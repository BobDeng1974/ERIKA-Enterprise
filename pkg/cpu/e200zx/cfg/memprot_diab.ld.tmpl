/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2011  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation,
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */
/*
 * Linker script template for Diab compiler, when memory protection is active.
 * Author: 2010 Fabio Checconi
 *         2011 Bernardo  Dal Seno
 */

SECTIONS
{
	GROUP : {
		.bam_data : { }
		.boot : { }
	} > boot

	GROUP : {
		.text : {
			*(.text)
			*(.text_vle)
			*(.init)
			*(.fini)
			*(.rdata)
			*(.rodata)
		}

		.sdata2 : {
			*(.sdata2)
			*(.sbss2)
		 }
		_load_ram = . ;
	} > iflash

	GROUP : {
		/* The stack is put at the beginning of the RAM,
		 * so that stack overflows are caught by the memory
		 * protection system */
		_sstack = . ;
		.stack : { *(.stack) }
		_estack = . ;

		_sdata = . ;
		.data LOAD(_load_ram): { }

		.sram_text LOAD(_load_ram + ADDR(.sram_text) - ADDR(.data)): { }

		.sdata LOAD(_load_ram + ADDR(.sdata) - ADDR(.data)): { }

		_sbss = . ;
		.sbss : { }
		.bss : { }
		_ebss = . ;

FOR_EACH_APP
		_load_data_${APP_NAME} = _load_ram + (_ebss - _sdata)
INNER_FOR_EACH_PREV_APP
				+ (_sbss_${APP_NAME} - _sdata_${APP_NAME})
INNER_END_EACH_PREV_APP
				;
		. = ${APP_BASE} ;
		_data_${APP_NAME}_start = . ;
		/* The stack is put at the beginning of the application space,
		 * so that stack overflows are caught by the memory
		 * protection system */
		.stack_${APP_NAME} : {
			_sstack_${APP_NAME} = . ;
			*(.stack_${APP_NAME})
			_estack_${APP_NAME} = . ;
		}
		.data_${APP_NAME} LOAD(_load_data_${APP_NAME}) : {
			_sdata_${APP_NAME} = . ;
			*(.data_${APP_NAME})
		}
		.sdata_${APP_NAME} LOAD(_load_data_${APP_NAME}
				+ ADDR(.sdata_${APP_NAME}) - _sdata_${APP_NAME}) : {
			*(.sdata_${APP_NAME})
		}
		_sbss_${APP_NAME} = . ;
		.sbss_${APP_NAME} : { }
		.bss_${APP_NAME} : { }
		_ebss_${APP_NAME} = . ;
		ASSERT(_ebss_${APP_NAME} <= ${APP_BASE} + ${APP_SIZE})
		_data_${APP_NAME}_end = . ;

END_EACH_APP
	} > isram
}
