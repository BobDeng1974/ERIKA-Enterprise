CPU test_application {

	OS EE {
		EE_OPT = "DEBUG";
		EE_OPT = "NODEPS";
		EE_OPT = "__ASSERT__";
		EE_OPT = "__S12XS_INCLUDE_REGS__";

		CFLAGS = "-l +modf +fast +nowiden +warn +sprec";
		ASFLAGS = "-c -v -l ";
		LDFLAGS = "-p -sa -m mapfile.map"; 

		CPU_DATA = MC9S12XS {
			APP_SRC = "main.c";
			MULTI_STACK = FALSE;
			ICD = TRUE;
		};
		
		MCU_DATA = S12XS {
   			MODEL = CUSTOM{
    			MODEL = "MC9S12XS128";
    			LINKERSCRIPT = "mc9s12xs128.lkf";
    			INCLUDE_H = "hs12xsregs.h";
    			INCLUDE_C = "vector_s12x.c";
    			INCLUDE_S = "crtsx.S";
   			};
   			SERIAL = TRUE;
   			TIMER = TRUE;
  		};

		BOARD_DATA = DEMO9S12XSFAME {
				OPTIONS = ALL;
		};

		STATUS = EXTENDED;
		STARTUPHOOK = FALSE;
		ERRORHOOK = FALSE;
		SHUTDOWNHOOK = FALSE;
		PRETASKHOOK = FALSE;
		POSTTASKHOOK = FALSE;
		USEGETSERVICEID = FALSE;
		USEPARAMETERACCESS = FALSE;
		USERESSCHEDULER = FALSE;
		
//		ORTI_SECTIONS = ALL;
    };

	/* this is the OIL part for the task displaying the christmas tree */
    TASK Task1 {
		PRIORITY = 0x01;   /* Low priority */
		AUTOSTART = FALSE;
		STACK = SHARED;
		ACTIVATION = 1;    /* only one pending activation */
	};	
	
	/* this is the OIL part for the task activated by the button press */
    TASK Task2 {
		PRIORITY = 0x02;   /* High priority */
		SCHEDULE = FULL;
		AUTOSTART = TRUE;	
		STACK = SHARED;
    };


	/*
	 * Please uncomment ONLY one of the following configurations at a time!
	 */

	/* CONFIGURATION 1:
	 * Kernel is BCC1
	 * Task 1 is full preemptive
	 */

    // OS EE { KERNEL_TYPE = BCC1; }; 
	// TASK Task1 { SCHEDULE = FULL; };
	// TASK Task2 { ACTIVATION = 1; };
		
    
    /* ----------------------------------------------------------- */

	/* CONFIGURATION 2:
	 * Same as Configuration 1, BUT Task 1 is NON preemptive
	 */

    // OS EE { KERNEL_TYPE = BCC1; }; 
	// TASK Task1 { SCHEDULE = NON; };
	// TASK Task2 { ACTIVATION = 1; };

    /* ----------------------------------------------------------- */

	/* CONFIGURATION 3:
	 * Same as Configuration 2, BUT the code is compiled with an additional #define	
	 * that controls the presence of the Schedule() function inside Task1
	 *
	 * The additional define is added with the EEOPT = "..."; statement inside 
	 * the OS object.
	 */

    // OS EE { EE_OPT = "MYSCHEDULE"; KERNEL_TYPE = BCC1; }; 
	// TASK Task1 { SCHEDULE = NON; };
	// TASK Task2 { ACTIVATION = 1; };

    /* ----------------------------------------------------------- */

	/* CONFIGURATION 4:
	 * Same as Configuration 3, BUT Task2 supports three pending activations.
	 * The kernel type has to be BCC2 to support more than one pending activation!
	 *
	 * Note: This configuration does not work with the Demo version 
	 * (which includes only a BCC1 kernel)
	 */

    OS EE { EE_OPT = "MYSCHEDULE"; KERNEL_TYPE = BCC2; }; 
	TASK Task1 { SCHEDULE = NON; };
	TASK Task2 { ACTIVATION = 6; };

    /* ----------------------------------------------------------- */

	/* CONFIGURATION 5:
	 * Kernel is FP
	 * Task 1 is full preemptive
	 */

    // OS EE { KERNEL_TYPE = FP; }; 
	// TASK Task1 { SCHEDULE = FULL; };
	// TASK Task2 { ACTIVATION = 1; };
		

};


