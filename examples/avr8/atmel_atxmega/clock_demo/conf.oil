/* ###*B*###
 * ERIKA Enterprise - a tiny RTOS for small microcontrollers
 *
 * Copyright (C) 2002-2013  Evidence Srl
 *
 * This file is part of ERIKA Enterprise.
 *
 * ERIKA Enterprise is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation, 
 * (with a special exception described below).
 *
 * Linking this code statically or dynamically with other modules is
 * making a combined work based on this code.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole
 * combination.
 *
 * As a special exception, the copyright holders of this library give you
 * permission to link this code with independent modules to produce an
 * executable, regardless of the license terms of these independent
 * modules, and to copy and distribute the resulting executable under
 * terms of your choice, provided that you also meet, for each linked
 * independent module, the terms and conditions of the license of that
 * module.  An independent module is a module which is not derived from
 * or based on this library.  If you modify this code, you may extend
 * this exception to your version of the code, but you are not
 * obligated to do so.  If you do not wish to do so, delete this
 * exception statement from your version.
 *
 * ERIKA Enterprise is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License version 2 for more details.
 *
 * You should have received a copy of the GNU General Public License
 * version 2 along with ERIKA Enterprise; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA.
 * ###*E*### */
/*
 * Demo project to test alarms.
 * TaskL1, TaskL2 and TaskL3 are actived by alarms controlled by timers.
 * Every tasks switch on a led.
 * Author: 2013  Giuseppe Serano
 */

CPU mySystem {

	OS myOs {

		EE_OPT = "DEBUG";

		EE_OPT = "__HAS_TYPES_H__";

		CPU_DATA = AVR {
			MODEL = AVR8
			APP_SRC = "code.c";
			MULTI_STACK = FALSE;
		};

		MCU_DATA = XMEGA {
			MODEL = 16A4;
		};

		EE_OPT = "__MCU_EXTENDED_STATUS__";
		EE_OPT = "__MCU_INITCLOCK_API__";
		EE_OPT = "__MCU_DEINITCLOCK_API__";
		EE_OPT = "__MCU_GETCLOCKSTATUS_API__";
		EE_OPT = "__MCU_DISTRIBUTECLOCK_API__";

		EE_OPT = "__GPIO_DRIVER__";
		EE_OPT = "__GPIO_EXTENDED_STATUS__";
		EE_OPT = "__GPIO_READCHANNEL_API__";
		EE_OPT = "__GPIO_WRITECHANNEL_API__";
		EE_OPT = "__GPIO_FLIPCHANNEL_API__";
		EE_OPT = "__GPIO_ENABLENOTIF_API__";

		EE_OPT = "__GPT_DRIVER__";
		EE_OPT = "__GPT_CHANNEL_C_0__";
		EE_OPT = "__GPT_CHANNEL_D_0__";
		EE_OPT = "__GPT_EXTENDED_STATUS__";
		EE_OPT = "__GPT_STOPTIMER_API__";
		EE_OPT = "__GPT_ENABLENOTIF_API__";

		/* NOTE: BOARD not implemented for now!!! 
		BOARD_DATA = ATMEL {
			MODEL = STK600;
		};

		EE_OPT = "__BOARD_EXTENDED_STATUS__";
		EE_OPT = "__LED_DRIVER__";
		EE_OPT = "__LED_PORT_D__";
		EE_OPT = "__LED_EXTENDED_STATUS__";
		*/

		KERNEL_TYPE = FP {
			NESTED_IRQ = TRUE;
		};

	};

	TASK TaskL1 {
		PRIORITY = 1;
		STACK = SHARED;
		SCHEDULE = FULL;
	};
  
	TASK TaskL2 {
		PRIORITY = 2;
		STACK = SHARED;
		SCHEDULE = FULL;
	};

	TASK TaskL3 {
		PRIORITY = 3;
		STACK = SHARED;
		SCHEDULE = FULL;
	};

	ISR EE_Gpt_C_0_OVF_ISR {
		CATEGORY = 2;
		ENTRY = "TCC0_OVF";	/* TODO: Set correct ENTRY name. */
		PRIORITY = LOW;
	};

	ISR EE_Gpt_D_0_OVF_ISR {
		CATEGORY = 2;
		ENTRY = "TCD0_OVF";	/* TODO: Set correct ENTRY name. */
		PRIORITY = LOW;
	};

	ISR EE_Gpio_PortA_ISR {
		CATEGORY = 2;
		ENTRY = "PORTA_INT0";	/* TODO: Set correct ENTRY name. */
		PRIORITY = HIGH;
	};

	COUNTER Counter1ms;

	ALARM AlarmL1 {
		COUNTER = Counter1ms;
		ACTION = ACTIVATETASK { TASK = TaskL1; };
	};

	ALARM AlarmL2 {
		COUNTER = Counter1ms;
		ACTION = ACTIVATETASK { TASK = TaskL2; };
	};

	COUNTER CounterTicks;

	ALARM AlarmL3 {
		COUNTER = CounterTicks;
		ACTION = ACTIVATETASK { TASK = TaskL3; };
	};

};
