
output/out.elf:     file format elf32-lm32

Disassembly of section .boot:

02000000 <_reset_handler>:
char str2[100];


/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
 2000000:	98 00 00 00 	xor r0,r0,r0
	return EE_UART_OK;
}

/* This functions sets rx callback */
int EE_hal_uart_set_rx_callback(EE_uart_st* usp, EE_ISR_callback isr_rx_callback)
{
 2000004:	d0 00 00 00 	wcsr IE,r0
/******************************************************************************/
/*                       Public Global Functions                              */
/******************************************************************************/
/* This function is used to turn off I2C controller */
int EE_hal_i2c_disable(OCI2CMDev_t* i2cc)
{
 2000008:	d0 20 00 00 	wcsr IM,r0
/******************************************************************************/
/*                             Buffer Management                              */
/******************************************************************************/

int EE_buffer_init(EE_buffer *buf, int msgsize, int bufsize, EE_UINT8 *vet)
{
 200000c:	78 01 02 00 	mvhi r1,0x200
 2000010:	38 21 00 00 	ori r1,r1,0x0
 2000014:	d0 e1 00 00 	wcsr EBA,r1
 2000018:	f8 00 00 3a 	calli 2000100 <_crt0>
 200001c:	34 00 00 00 	nop

02000020 <_breakpoint_handler>:
 2000020:	91 20 38 00 	rcsr r7,DEBA
 2000024:	34 e7 00 20 	addi r7,r7,32
 2000028:	c0 e0 00 00 	b r7
 200002c:	34 00 00 00 	nop
 2000030:	34 00 00 00 	nop
 2000034:	34 00 00 00 	nop
 2000038:	34 00 00 00 	nop
 200003c:	34 00 00 00 	nop

02000040 <_instruction_bus_error_handler>:
 2000040:	91 20 38 00 	rcsr r7,DEBA
 2000044:	34 e7 00 40 	addi r7,r7,64
 2000048:	c0 e0 00 00 	b r7
 200004c:	34 00 00 00 	nop
 2000050:	34 00 00 00 	nop
 2000054:	34 00 00 00 	nop
 2000058:	34 00 00 00 	nop
 200005c:	34 00 00 00 	nop

02000060 <_watchpoint_handler>:
 2000060:	91 20 38 00 	rcsr r7,DEBA
 2000064:	34 e7 00 60 	addi r7,r7,96
 2000068:	c0 e0 00 00 	b r7
 200006c:	34 00 00 00 	nop
 2000070:	34 00 00 00 	nop
 2000074:	34 00 00 00 	nop
 2000078:	34 00 00 00 	nop
 200007c:	34 00 00 00 	nop

02000080 <_data_bus_error_handler>:
 2000080:	91 20 38 00 	rcsr r7,DEBA
 2000084:	34 e7 00 80 	addi r7,r7,128
 2000088:	c0 e0 00 00 	b r7
 200008c:	34 00 00 00 	nop
 2000090:	34 00 00 00 	nop
 2000094:	34 00 00 00 	nop
 2000098:	34 00 00 00 	nop
 200009c:	34 00 00 00 	nop

020000a0 <_divide_by_zero_handler>:
 20000a0:	91 20 38 00 	rcsr r7,DEBA
 20000a4:	34 e7 00 a0 	addi r7,r7,160
 20000a8:	c0 e0 00 00 	b r7
 20000ac:	34 00 00 00 	nop
 20000b0:	34 00 00 00 	nop
 20000b4:	34 00 00 00 	nop
 20000b8:	34 00 00 00 	nop
 20000bc:	34 00 00 00 	nop

020000c0 <_interrupt_handler>:
 20000c0:	5b 9d 00 00 	sw (sp+0),ra
 20000c4:	f8 00 00 21 	calli 2000148 <_save_all>
 20000c8:	34 01 00 02 	mvi r1,2
 20000cc:	f8 00 02 77 	calli 2000aa8 <MicoISRHandler>
 20000d0:	e0 00 00 33 	bi 200019c <_restore_all_and_return>
 20000d4:	34 00 00 00 	nop
 20000d8:	34 00 00 00 	nop
 20000dc:	34 00 00 00 	nop

020000e0 <_system_call_handler>:
 20000e0:	91 20 38 00 	rcsr r7,DEBA
 20000e4:	34 e7 00 e0 	addi r7,r7,224
 20000e8:	c0 e0 00 00 	b r7
 20000ec:	34 00 00 00 	nop
 20000f0:	34 00 00 00 	nop
 20000f4:	34 00 00 00 	nop
 20000f8:	34 00 00 00 	nop
 20000fc:	34 00 00 00 	nop

02000100 <_crt0>:
 2000100:	98 00 00 00 	xor r0,r0,r0
 2000104:	78 1c 02 07 	mvhi sp,0x207
 2000108:	3b 9c ff fc 	ori sp,sp,0xfffc
 200010c:	78 1a 02 01 	mvhi gp,0x201
 2000110:	3b 5a 33 00 	ori gp,gp,0x3300
 2000114:	78 01 02 00 	mvhi r1,0x200
 2000118:	38 21 b3 10 	ori r1,r1,0xb310
 200011c:	78 03 02 00 	mvhi r3,0x200
 2000120:	38 63 b5 c0 	ori r3,r3,0xb5c0

02000124 <.ClearBSS>:
 2000124:	e0 00 00 03 	bi 2000130 <.ClearBSS+0xc>
 2000128:	58 20 00 00 	sw (r1+0),r0
 200012c:	34 21 00 04 	addi r1,r1,4
 2000130:	5c 23 ff fe 	bne r1,r3,2000128 <.ClearBSS+0x4>

02000134 <.CallConstructor>:
 2000134:	34 01 00 00 	mvi r1,0
 2000138:	34 02 00 00 	mvi r2,0
 200013c:	34 03 00 00 	mvi r3,0
 2000140:	f8 00 02 39 	calli 2000a24 <LatticeDDInit>
 2000144:	f8 00 06 79 	calli 2001b28 <_exit>

02000148 <_save_all>:
 2000148:	37 9c ff c4 	addi sp,sp,-60
 200014c:	5b 81 00 04 	sw (sp+4),r1
 2000150:	5b 82 00 08 	sw (sp+8),r2
 2000154:	5b 83 00 0c 	sw (sp+12),r3
 2000158:	5b 84 00 10 	sw (sp+16),r4
 200015c:	5b 85 00 14 	sw (sp+20),r5
 2000160:	5b 86 00 18 	sw (sp+24),r6
 2000164:	5b 87 00 1c 	sw (sp+28),r7
 2000168:	5b 88 00 20 	sw (sp+32),r8
 200016c:	5b 89 00 24 	sw (sp+36),r9
 2000170:	5b 8a 00 28 	sw (sp+40),r10
 2000174:	5b 9e 00 34 	sw (sp+52),ea
 2000178:	5b 9f 00 38 	sw (sp+56),ba
 200017c:	2b 81 00 3c 	lw r1,(sp+60)
 2000180:	5b 81 00 30 	sw (sp+48),r1
 2000184:	bb 80 08 00 	mv r1,sp
 2000188:	34 21 00 3c 	addi r1,r1,60
 200018c:	5b 81 00 2c 	sw (sp+44),r1
 2000190:	98 21 08 00 	xor r1,r1,r1
 2000194:	d0 01 00 00 	wcsr IE,r1
 2000198:	c3 a0 00 00 	ret

0200019c <_restore_all_and_return>:
 200019c:	34 01 00 02 	mvi r1,2
 20001a0:	d0 01 00 00 	wcsr IE,r1
 20001a4:	2b 81 00 04 	lw r1,(sp+4)
 20001a8:	2b 82 00 08 	lw r2,(sp+8)
 20001ac:	2b 83 00 0c 	lw r3,(sp+12)
 20001b0:	2b 84 00 10 	lw r4,(sp+16)
 20001b4:	2b 85 00 14 	lw r5,(sp+20)
 20001b8:	2b 86 00 18 	lw r6,(sp+24)
 20001bc:	2b 87 00 1c 	lw r7,(sp+28)
 20001c0:	2b 88 00 20 	lw r8,(sp+32)
 20001c4:	2b 89 00 24 	lw r9,(sp+36)
 20001c8:	2b 8a 00 28 	lw r10,(sp+40)
 20001cc:	2b 9d 00 30 	lw ra,(sp+48)
 20001d0:	2b 9e 00 34 	lw ea,(sp+52)
 20001d4:	2b 9f 00 38 	lw ba,(sp+56)
 20001d8:	2b 9c 00 2c 	lw sp,(sp+44)
 20001dc:	34 00 00 00 	nop
 20001e0:	c3 c0 00 00 	eret
Disassembly of section .text:

020001e4 <Display_Time>:
   	
   	return 0;
}

int Display_Time(void) 
{
 20001e4:	37 9c ff dc 	addi sp,sp,-36
 20001e8:	5b 8b 00 14 	sw (sp+20),r11
 20001ec:	5b 8c 00 10 	sw (sp+16),r12
 20001f0:	5b 8d 00 0c 	sw (sp+12),r13
 20001f4:	5b 8e 00 08 	sw (sp+8),r14
 20001f8:	5b 9d 00 04 	sw (sp+4),ra
	EE_UINT8 txt[16];
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
 20001fc:	78 0c 02 00 	mvhi r12,0x200
 2000200:	39 8c b5 20 	ori r12,r12,0xb520
   	txt[1] = (TimeRead.day % 10) + 48;
   	txt[2] = '/';
   	txt[3] = (TimeRead.month / 10) + 48;
   	txt[4] = (TimeRead.month % 10) + 48;
   	txt[5] = '/';
   	txt[6] = ((TimeRead.year % 100) / 10) + 48;
 2000204:	41 87 00 00 	lbu r7,(r12+0)
{
	EE_UINT8 txt[16];
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
 2000208:	41 85 00 02 	lbu r5,(r12+2)
   	txt[1] = (TimeRead.day % 10) + 48;
   	txt[2] = '/';
   	txt[3] = (TimeRead.month / 10) + 48;
 200020c:	41 86 00 01 	lbu r6,(r12+1)
   	txt[4] = (TimeRead.month % 10) + 48;
   	txt[5] = '/';
   	txt[6] = ((TimeRead.year % 100) / 10) + 48;
 2000210:	34 04 00 64 	mvi r4,100
 2000214:	c4 e4 20 00 	modu r4,r7,r4
{
	EE_UINT8 txt[16];
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
 2000218:	34 0d 00 0a 	mvi r13,10
   	txt[1] = (TimeRead.day % 10) + 48;
 200021c:	c4 ad 40 00 	modu r8,r5,r13
   	txt[2] = '/';
   	txt[3] = (TimeRead.month / 10) + 48;
   	txt[4] = (TimeRead.month % 10) + 48;
 2000220:	c4 cd 48 00 	modu r9,r6,r13
   	txt[5] = '/';
   	txt[6] = ((TimeRead.year % 100) / 10) + 48;
 2000224:	8c 8d 20 00 	divu r4,r4,r13
   	txt[7] = (TimeRead.year % 10)  + 48;
 2000228:	c4 ed 38 00 	modu r7,r7,r13
{
	EE_UINT8 txt[16];
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
 200022c:	8c ad 28 00 	divu r5,r5,r13
   	txt[1] = (TimeRead.day % 10) + 48;
   	txt[2] = '/';
   	txt[3] = (TimeRead.month / 10) + 48;
 2000230:	8c cd 30 00 	divu r6,r6,r13
	return EE_hal_uart_return_error(& EE_ST_NAME(lc)); }
	
/* User functions (API): */  
#ifdef EE_UART1_NAME_UC
DECLARE_STRUCT_UART(EE_UART1_NAME_UC, EE_UART1_NAME_LC)
DECLARE_FUNC_UART(EE_UART1_NAME_UC, EE_UART1_NAME_LC)
 2000234:	37 8e 00 18 	addi r14,sp,24
 2000238:	78 01 02 00 	mvhi r1,0x200
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
   	txt[1] = (TimeRead.day % 10) + 48;
   	txt[2] = '/';
 200023c:	34 0a 00 2f 	mvi r10,47
{
	EE_UINT8 txt[16];
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
 2000240:	34 a5 00 30 	addi r5,r5,48
   	txt[1] = (TimeRead.day % 10) + 48;
 2000244:	35 08 00 30 	addi r8,r8,48
   	txt[2] = '/';
   	txt[3] = (TimeRead.month / 10) + 48;
 2000248:	34 c6 00 30 	addi r6,r6,48
   	txt[4] = (TimeRead.month % 10) + 48;
 200024c:	35 29 00 30 	addi r9,r9,48
   	txt[5] = '/';
   	txt[6] = ((TimeRead.year % 100) / 10) + 48;
 2000250:	34 84 00 30 	addi r4,r4,48
   	txt[7] = (TimeRead.year % 10)  + 48;
 2000254:	34 e7 00 30 	addi r7,r7,48
   	txt[8] = ' ';
 2000258:	34 0b 00 20 	mvi r11,32
 200025c:	38 21 aa a0 	ori r1,r1,0xaaa0
 2000260:	b9 c0 10 00 	mv r2,r14
 2000264:	34 03 00 09 	mvi r3,9
 2000268:	33 8b 00 20 	sb (sp+32),r11
{
	EE_UINT8 txt[16];
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
 200026c:	33 85 00 18 	sb (sp+24),r5
   	txt[1] = (TimeRead.day % 10) + 48;
 2000270:	33 88 00 19 	sb (sp+25),r8
   	txt[2] = '/';
   	txt[3] = (TimeRead.month / 10) + 48;
 2000274:	33 86 00 1b 	sb (sp+27),r6
   	txt[4] = (TimeRead.month % 10) + 48;
 2000278:	33 89 00 1c 	sb (sp+28),r9
   	txt[5] = '/';
 200027c:	33 8a 00 1d 	sb (sp+29),r10
   	txt[6] = ((TimeRead.year % 100) / 10) + 48;
 2000280:	33 84 00 1e 	sb (sp+30),r4
   	txt[7] = (TimeRead.year % 10)  + 48;
 2000284:	33 87 00 1f 	sb (sp+31),r7
	int ret1, ret2;
	
   	// output values to USART
   	txt[0] = (TimeRead.day / 10) + 48;
   	txt[1] = (TimeRead.day % 10) + 48;
   	txt[2] = '/';
 2000288:	33 8a 00 1a 	sb (sp+26),r10
 200028c:	f8 00 03 36 	calli 2000f64 <EE_hal_uart_write_buffer>
 2000290:	b8 20 58 00 	mv r11,r1
   	txt[5] = '/';
   	txt[6] = ((TimeRead.year % 100) / 10) + 48;
   	txt[7] = (TimeRead.year % 10)  + 48;
   	txt[8] = ' ';
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
 2000294:	48 01 00 22 	bg r0,r1,200031c <_ftext_rom+0x138>
   	txt[1] = (TimeRead.hours % 10) + 48;
   	txt[2] = ':';
   	txt[3] = (TimeRead.minutes / 10) + 48;
   	txt[4] = (TimeRead.minutes % 10) + 48;
   	txt[5] = ':';
   	txt[6] = (TimeRead.seconds / 10) + 48;
 2000298:	41 86 00 05 	lbu r6,(r12+5)
   	txt[7] = (TimeRead.year % 10)  + 48;
   	txt[8] = ' ';
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
	
   	txt[0] = (TimeRead.hours / 10) + 48;
 200029c:	41 84 00 03 	lbu r4,(r12+3)
   	txt[1] = (TimeRead.hours % 10) + 48;
   	txt[2] = ':';
   	txt[3] = (TimeRead.minutes / 10) + 48;
 20002a0:	41 85 00 04 	lbu r5,(r12+4)
   	txt[4] = (TimeRead.minutes % 10) + 48;
   	txt[5] = ':';
   	txt[6] = (TimeRead.seconds / 10) + 48;
   	txt[7] = (TimeRead.seconds % 10) + 48;
 20002a4:	c4 cd 48 00 	modu r9,r6,r13
   	txt[8] = ' ';
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
	
   	txt[0] = (TimeRead.hours / 10) + 48;
   	txt[1] = (TimeRead.hours % 10) + 48;
 20002a8:	c4 8d 38 00 	modu r7,r4,r13
   	txt[2] = ':';
   	txt[3] = (TimeRead.minutes / 10) + 48;
   	txt[4] = (TimeRead.minutes % 10) + 48;
 20002ac:	c4 ad 40 00 	modu r8,r5,r13
   	txt[7] = (TimeRead.year % 10)  + 48;
   	txt[8] = ' ';
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
	
   	txt[0] = (TimeRead.hours / 10) + 48;
 20002b0:	8c 8d 20 00 	divu r4,r4,r13
   	txt[1] = (TimeRead.hours % 10) + 48;
   	txt[2] = ':';
   	txt[3] = (TimeRead.minutes / 10) + 48;
 20002b4:	8c ad 28 00 	divu r5,r5,r13
   	txt[4] = (TimeRead.minutes % 10) + 48;
   	txt[5] = ':';
   	txt[6] = (TimeRead.seconds / 10) + 48;
 20002b8:	8c cd 30 00 	divu r6,r6,r13
 20002bc:	78 01 02 00 	mvhi r1,0x200
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
	
   	txt[0] = (TimeRead.hours / 10) + 48;
   	txt[1] = (TimeRead.hours % 10) + 48;
   	txt[2] = ':';
 20002c0:	34 0a 00 3a 	mvi r10,58
   	txt[7] = (TimeRead.year % 10)  + 48;
   	txt[8] = ' ';
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
	
   	txt[0] = (TimeRead.hours / 10) + 48;
 20002c4:	34 84 00 30 	addi r4,r4,48
   	txt[1] = (TimeRead.hours % 10) + 48;
 20002c8:	34 e7 00 30 	addi r7,r7,48
   	txt[2] = ':';
   	txt[3] = (TimeRead.minutes / 10) + 48;
 20002cc:	34 a5 00 30 	addi r5,r5,48
   	txt[4] = (TimeRead.minutes % 10) + 48;
 20002d0:	35 08 00 30 	addi r8,r8,48
   	txt[5] = ':';
   	txt[6] = (TimeRead.seconds / 10) + 48;
 20002d4:	34 c6 00 30 	addi r6,r6,48
   	txt[7] = (TimeRead.seconds % 10) + 48;
 20002d8:	35 29 00 30 	addi r9,r9,48
 20002dc:	38 21 aa a0 	ori r1,r1,0xaaa0
 20002e0:	b9 c0 10 00 	mv r2,r14
 20002e4:	34 03 00 09 	mvi r3,9
   	txt[7] = (TimeRead.year % 10)  + 48;
   	txt[8] = ' ';
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
	
   	txt[0] = (TimeRead.hours / 10) + 48;
 20002e8:	33 84 00 18 	sb (sp+24),r4
   	txt[1] = (TimeRead.hours % 10) + 48;
 20002ec:	33 87 00 19 	sb (sp+25),r7
   	txt[2] = ':';
   	txt[3] = (TimeRead.minutes / 10) + 48;
 20002f0:	33 85 00 1b 	sb (sp+27),r5
   	txt[4] = (TimeRead.minutes % 10) + 48;
 20002f4:	33 88 00 1c 	sb (sp+28),r8
   	txt[5] = ':';
 20002f8:	33 8a 00 1d 	sb (sp+29),r10
   	txt[6] = (TimeRead.seconds / 10) + 48;
 20002fc:	33 86 00 1e 	sb (sp+30),r6
   	txt[7] = (TimeRead.seconds % 10) + 48;
 2000300:	33 89 00 1f 	sb (sp+31),r9
   	txt[8] = '\n';
 2000304:	33 8d 00 20 	sb (sp+32),r13
   	ret1 = EE_uart_write_buffer(txt,9);
	if(ret1 < 0) return ret1;
	
   	txt[0] = (TimeRead.hours / 10) + 48;
   	txt[1] = (TimeRead.hours % 10) + 48;
   	txt[2] = ':';
 2000308:	33 8a 00 1a 	sb (sp+26),r10
 200030c:	f8 00 03 16 	calli 2000f64 <EE_hal_uart_write_buffer>
   	txt[7] = (TimeRead.seconds % 10) + 48;
   	txt[8] = '\n';
   	ret2 = EE_uart_write_buffer(txt,9);
	if(ret2 < 0) return ret2;
	
   	return ret1+ret2;
 2000310:	b5 61 58 00 	add r11,r11,r1
   	txt[5] = ':';
   	txt[6] = (TimeRead.seconds / 10) + 48;
   	txt[7] = (TimeRead.seconds % 10) + 48;
   	txt[8] = '\n';
   	ret2 = EE_uart_write_buffer(txt,9);
	if(ret2 < 0) return ret2;
 2000314:	4c 20 00 02 	bge r1,r0,200031c <_ftext_rom+0x138>
 2000318:	b8 20 58 00 	mv r11,r1
	
   	return ret1+ret2;
}
 200031c:	b9 60 08 00 	mv r1,r11
 2000320:	2b 9d 00 04 	lw ra,(sp+4)
 2000324:	2b 8b 00 14 	lw r11,(sp+20)
 2000328:	2b 8c 00 10 	lw r12,(sp+16)
 200032c:	2b 8d 00 0c 	lw r13,(sp+12)
 2000330:	2b 8e 00 08 	lw r14,(sp+8)
 2000334:	37 9c 00 24 	addi sp,sp,36
 2000338:	c3 a0 00 00 	ret

0200033c <rtc_read>:
	
   	return 0;
}

int rtc_read(int * retvalue) 
{
 200033c:	37 9c ff d8 	addi sp,sp,-40
 2000340:	5b 8b 00 28 	sw (sp+40),r11
 2000344:	5b 8c 00 24 	sw (sp+36),r12
 2000348:	5b 8d 00 20 	sw (sp+32),r13
 200034c:	5b 8e 00 1c 	sw (sp+28),r14
 2000350:	5b 8f 00 18 	sw (sp+24),r15
 2000354:	5b 90 00 14 	sw (sp+20),r16
 2000358:	5b 91 00 10 	sw (sp+16),r17
 200035c:	5b 92 00 0c 	sw (sp+12),r18
 2000360:	5b 93 00 08 	sw (sp+8),r19
 2000364:	5b 9d 00 04 	sw (sp+4),ra
#endif //#ifdef __USE_I2C_IRQ__


/* User functions (API) declaration: */  
#ifdef EE_I2C1_NAME_UC
DECLARE_FUNC_I2C(EE_I2C1_NAME_UC, EE_I2C1_NAME_LC)
 2000368:	78 04 02 00 	mvhi r4,0x200
 200036c:	b8 20 98 00 	mv r19,r1
 2000370:	78 01 80 00 	mvhi r1,0x8000
 2000374:	38 21 03 00 	ori r1,r1,0x300
 2000378:	38 84 b4 94 	ori r4,r4,0xb494
 200037c:	34 02 00 a0 	mvi r2,160
 2000380:	34 03 00 02 	mvi r3,2
 2000384:	34 05 00 05 	mvi r5,5
 2000388:	f8 00 04 6c 	calli 2001538 <EE_hal_i2c_read_buffer_polling>
 200038c:	b8 20 90 00 	mv r18,r1
	EE_UINT8 device = 0xA0;
	EE_UINT8 address;
	
	address = 2;											// address in memory
   	retvalue[0] = EE_i2c_read_buffer(device, address, rx_data, 5);	
 2000390:	5a 61 00 00 	sw (r19+0),r1
   	if(retvalue[0]!= EE_I2C_OK)
 2000394:	34 01 00 00 	mvi r1,0
 2000398:	5e 41 00 7e 	bne r18,r1,2000590 <rtc_read+0x254>
   		strcat(str1,str2);
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
 200039c:	78 0b 02 00 	mvhi r11,0x200
 20003a0:	39 6b b4 94 	ori r11,r11,0xb494
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
    byteRead = rx_data[3];     	// read year/day byte
 20003a4:	41 62 00 03 	lbu r2,(r11+3)
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
 20003a8:	41 70 00 04 	lbu r16,(r11+4)
   		strcat(str1,str2);
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
 20003ac:	41 63 00 00 	lbu r3,(r11+0)
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
   	byteRead = rx_data[1];     	// read minutes byte
 20003b0:	41 69 00 01 	lbu r9,(r11+1)
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
   	byteRead = rx_data[2];     	// read hours byte
 20003b4:	41 6a 00 02 	lbu r10,(r11+2)
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 20003b8:	20 44 00 30 	andi r4,r2,0x30
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 20003bc:	22 08 00 10 	andi r8,r16,0x10
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 20003c0:	00 65 00 04 	srui r5,r3,4
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
 20003c4:	01 26 00 04 	srui r6,r9,4
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
 20003c8:	01 47 00 04 	srui r7,r10,4
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 20003cc:	14 84 00 04 	sri r4,r4,4
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 20003d0:	15 08 00 04 	sri r8,r8,4
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 20003d4:	3c a1 00 03 	sli r1,r5,3
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
 20003d8:	3c cc 00 03 	sli r12,r6,3
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
 20003dc:	3c ed 00 03 	sli r13,r7,3
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 20003e0:	3c 8e 00 03 	sli r14,r4,3
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 20003e4:	3d 0f 00 03 	sli r15,r8,3
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 20003e8:	b4 a5 28 00 	add r5,r5,r5
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
 20003ec:	b4 c6 30 00 	add r6,r6,r6
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
 20003f0:	b4 e7 38 00 	add r7,r7,r7
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 20003f4:	b4 84 20 00 	add r4,r4,r4
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 20003f8:	b5 08 40 00 	add r8,r8,r8
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 20003fc:	b4 a1 28 00 	add r5,r5,r1
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
 2000400:	b4 cc 30 00 	add r6,r6,r12
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
 2000404:	b4 ed 38 00 	add r7,r7,r13
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 2000408:	b4 8e 20 00 	add r4,r4,r14
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 200040c:	b5 0f 40 00 	add r8,r8,r15
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 2000410:	20 63 00 0f 	andi r3,r3,0xf
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
 2000414:	21 29 00 0f 	andi r9,r9,0xf
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
 2000418:	21 4a 00 0f 	andi r10,r10,0xf
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
 200041c:	00 4e 00 06 	srui r14,r2,6
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 2000420:	22 0d 00 0f 	andi r13,r16,0xf
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 2000424:	20 42 00 0f 	andi r2,r2,0xf
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 2000428:	78 0f 02 00 	mvhi r15,0x200
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
 200042c:	78 0c 02 00 	mvhi r12,0x200
    byteRead = rx_data[4];     	// read weekday/month byte
 2000430:	78 11 02 00 	mvhi r17,0x200
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 2000434:	39 ef b5 20 	ori r15,r15,0xb520
 2000438:	b4 a3 28 00 	add r5,r5,r3
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 200043c:	b4 82 20 00 	add r4,r4,r2
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
 2000440:	b4 c9 30 00 	add r6,r6,r9
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
 2000444:	b4 ea 38 00 	add r7,r7,r10
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 2000448:	b5 0d 40 00 	add r8,r8,r13
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
 200044c:	39 8c b4 2c 	ori r12,r12,0xb42c
    byteRead = rx_data[4];     	// read weekday/month byte
 2000450:	3a 31 b4 2d 	ori r17,r17,0xb42d
 2000454:	78 01 80 00 	mvhi r1,0x8000
 2000458:	34 02 00 a0 	mvi r2,160
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -4;
   	}
   	
   	byteRead = rx_data[0];		// read seconds byte
   	TimeRead.seconds = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform seconds
 200045c:	31 e5 00 05 	sb (r15+5),r5
 2000460:	38 21 03 00 	ori r1,r1,0x300
 2000464:	34 03 00 10 	mvi r3,16
   	byteRead = rx_data[1];     	// read minutes byte
   	TimeRead.minutes = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform minutes
 2000468:	31 e6 00 04 	sb (r15+4),r6
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
 200046c:	31 e7 00 03 	sb (r15+3),r7
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
 2000470:	31 e4 00 02 	sb (r15+2),r4
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
 2000474:	31 8e 00 00 	sb (r12+0),r14
    byteRead = rx_data[4];     	// read weekday/month byte
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
 2000478:	31 e8 00 01 	sb (r15+1),r8
   	byteRead = rx_data[2];     	// read hours byte
   	TimeRead.hours = (byteRead >> 4)*10 + (byteRead & 0x0F); // transform hours
    byteRead = rx_data[3];     	// read year/day byte
   	TimeRead.day = ((byteRead & 0b00110000) >> 4)*10 + (byteRead & 0x0F); // transform day
   	yearmod4 = (byteRead & 0b11000000) >> 6;   // get year mod 4 from RTC
    byteRead = rx_data[4];     	// read weekday/month byte
 200047c:	32 30 00 00 	sb (r17+0),r16
 2000480:	f8 00 03 bc 	calli 2001370 <EE_hal_i2c_read_byte_polling>
   	TimeRead.month = ((byteRead & 0b00010000) >> 4)*10 + (byteRead & 0x0F); // transform month
   	
	address = 0x10;				// address in memory
	
	rx_data[0] = EE_i2c_read_byte(device, address);	
 2000484:	20 21 00 ff 	andi r1,r1,0xff
 2000488:	31 61 00 00 	sb (r11+0),r1
	retvalue[0] = rx_data[0];
 200048c:	5a 61 00 00 	sw (r19+0),r1
   		strcat(str1,str2);
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -5;
   	}
  
    byteRead = rx_data[0];  		// read year
 2000490:	41 65 00 00 	lbu r5,(r11+0)
   	if (yearmod4 != byteRead % 4 )  // check if year is incremented in RTC
 2000494:	41 82 00 00 	lbu r2,(r12+0)
   		strcat(str1,str2);
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -5;
   	}
  
    byteRead = rx_data[0];  		// read year
 2000498:	32 25 00 00 	sb (r17+0),r5
   	if (yearmod4 != byteRead % 4 )  // check if year is incremented in RTC
 200049c:	20 a1 00 03 	andi r1,r5,0x3
 20004a0:	5c 41 00 10 	bne r2,r1,20004e0 <rtc_read+0x1a4>
	   		print_error((EE_UINT8 *)str1, strlen(str1));		
	   		return -6;
   		}
    	
   	}
   	TimeRead.year = byteRead;
 20004a4:	42 31 00 00 	lbu r17,(r17+0)
 20004a8:	34 01 00 00 	mvi r1,0
 20004ac:	31 f1 00 00 	sb (r15+0),r17
   	
   	return 0;
}
 20004b0:	2b 9d 00 04 	lw ra,(sp+4)
 20004b4:	2b 8b 00 28 	lw r11,(sp+40)
 20004b8:	2b 8c 00 24 	lw r12,(sp+36)
 20004bc:	2b 8d 00 20 	lw r13,(sp+32)
 20004c0:	2b 8e 00 1c 	lw r14,(sp+28)
 20004c4:	2b 8f 00 18 	lw r15,(sp+24)
 20004c8:	2b 90 00 14 	lw r16,(sp+20)
 20004cc:	2b 91 00 10 	lw r17,(sp+16)
 20004d0:	2b 92 00 0c 	lw r18,(sp+12)
 20004d4:	2b 93 00 08 	lw r19,(sp+8)
 20004d8:	37 9c 00 28 	addi sp,sp,40
 20004dc:	c3 a0 00 00 	ret
   	}
  
    byteRead = rx_data[0];  		// read year
   	if (yearmod4 != byteRead % 4 )  // check if year is incremented in RTC
   	{	// in this case the new value should be written to RTC RAM at address 16(0x10)
   		byteRead++;  
 20004e0:	34 a5 00 01 	addi r5,r5,1
   		address = 0x10;				// address in memory
   		tx_data[0] = byteRead;		// data to be written
 20004e4:	78 06 02 00 	mvhi r6,0x200
   	}
  
    byteRead = rx_data[0];  		// read year
   	if (yearmod4 != byteRead % 4 )  // check if year is incremented in RTC
   	{	// in this case the new value should be written to RTC RAM at address 16(0x10)
   		byteRead++;  
 20004e8:	20 a5 00 ff 	andi r5,r5,0xff
   		address = 0x10;				// address in memory
   		tx_data[0] = byteRead;		// data to be written
 20004ec:	38 c6 b5 10 	ori r6,r6,0xb510
 20004f0:	78 01 80 00 	mvhi r1,0x8000
 20004f4:	38 21 03 00 	ori r1,r1,0x300
 20004f8:	b8 a0 20 00 	mv r4,r5
 20004fc:	34 02 00 a0 	mvi r2,160
 2000500:	34 03 00 10 	mvi r3,16
 2000504:	30 c5 00 00 	sb (r6+0),r5
   	}
  
    byteRead = rx_data[0];  		// read year
   	if (yearmod4 != byteRead % 4 )  // check if year is incremented in RTC
   	{	// in this case the new value should be written to RTC RAM at address 16(0x10)
   		byteRead++;  
 2000508:	32 25 00 00 	sb (r17+0),r5
 200050c:	f8 00 03 67 	calli 20012a8 <EE_hal_i2c_write_byte_polling>
   		address = 0x10;				// address in memory
   		tx_data[0] = byteRead;		// data to be written
   		retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
 2000510:	5a 61 00 00 	sw (r19+0),r1
   		if(retvalue[0]!= EE_I2C_OK)
 2000514:	44 20 ff e4 	be r1,r0,20004a4 <rtc_read+0x168>
   		{
	   		str1[0] = '\0';
 2000518:	78 0b 02 00 	mvhi r11,0x200
	   		str2[0] = '\0';
 200051c:	78 0c 02 00 	mvhi r12,0x200
   		address = 0x10;				// address in memory
   		tx_data[0] = byteRead;		// data to be written
   		retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   		if(retvalue[0]!= EE_I2C_OK)
   		{
	   		str1[0] = '\0';
 2000520:	39 6b b4 30 	ori r11,r11,0xb430
	   		str2[0] = '\0';
 2000524:	39 8c b4 ac 	ori r12,r12,0xb4ac
 2000528:	31 92 00 00 	sb (r12+0),r18
   		address = 0x10;				// address in memory
   		tx_data[0] = byteRead;		// data to be written
   		retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   		if(retvalue[0]!= EE_I2C_OK)
   		{
	   		str1[0] = '\0';
 200052c:	31 72 00 00 	sb (r11+0),r18
	   		str2[0] = '\0';
	   		sprintf(str2,"%d",retvalue[0]);
 2000530:	2a 63 00 00 	lw r3,(r19+0)
 2000534:	78 02 02 00 	mvhi r2,0x200
 2000538:	38 42 a1 a8 	ori r2,r2,0xa1a8
 200053c:	b9 80 08 00 	mv r1,r12
 2000540:	f8 00 05 bc 	calli 2001c30 <sprintf>
	   		strcat(str1,"\nrtc_write error code: -6\nreturn value: ");
 2000544:	b9 60 08 00 	mv r1,r11
 2000548:	f8 00 06 2c 	calli 2001df8 <strlen>
 200054c:	78 02 02 00 	mvhi r2,0x200
 2000550:	34 03 00 29 	mvi r3,41
 2000554:	38 42 a1 d8 	ori r2,r2,0xa1d8
 2000558:	b5 61 08 00 	add r1,r11,r1
 200055c:	f8 00 05 75 	calli 2001b30 <memcpy>
	   		strcat(str1,str2);
 2000560:	b9 80 10 00 	mv r2,r12
 2000564:	b9 60 08 00 	mv r1,r11
 2000568:	f8 00 05 d7 	calli 2001cc4 <strcat>
	   		print_error((EE_UINT8 *)str1, strlen(str1));		
 200056c:	b9 60 08 00 	mv r1,r11
 2000570:	f8 00 06 22 	calli 2001df8 <strlen>
 2000574:	b8 20 18 00 	mv r3,r1
 2000578:	78 01 02 00 	mvhi r1,0x200
 200057c:	38 21 aa a0 	ori r1,r1,0xaaa0
 2000580:	b9 60 10 00 	mv r2,r11
 2000584:	f8 00 02 78 	calli 2000f64 <EE_hal_uart_write_buffer>
 2000588:	34 01 ff fa 	mvi r1,-6
 200058c:	e3 ff ff c9 	bi 20004b0 <rtc_read+0x174>
	
	address = 2;											// address in memory
   	retvalue[0] = EE_i2c_read_buffer(device, address, rx_data, 5);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 2000590:	78 0b 02 00 	mvhi r11,0x200
   		str2[0] = '\0';
 2000594:	78 0c 02 00 	mvhi r12,0x200
	
	address = 2;											// address in memory
   	retvalue[0] = EE_i2c_read_buffer(device, address, rx_data, 5);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 2000598:	39 6b b4 30 	ori r11,r11,0xb430
   		str2[0] = '\0';
 200059c:	39 8c b4 ac 	ori r12,r12,0xb4ac
 20005a0:	31 81 00 00 	sb (r12+0),r1
	
	address = 2;											// address in memory
   	retvalue[0] = EE_i2c_read_buffer(device, address, rx_data, 5);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 20005a4:	31 61 00 00 	sb (r11+0),r1
   		str2[0] = '\0';
   		sprintf(str2,"%d",retvalue[0]);
 20005a8:	2a 63 00 00 	lw r3,(r19+0)
 20005ac:	78 02 02 00 	mvhi r2,0x200
 20005b0:	38 42 a1 a8 	ori r2,r2,0xa1a8
 20005b4:	b9 80 08 00 	mv r1,r12
 20005b8:	f8 00 05 9e 	calli 2001c30 <sprintf>
   		strcat(str1,"\nrtc_write error code: -4\nreturn value: ");
 20005bc:	b9 60 08 00 	mv r1,r11
 20005c0:	f8 00 06 0e 	calli 2001df8 <strlen>
 20005c4:	78 02 02 00 	mvhi r2,0x200
 20005c8:	34 03 00 29 	mvi r3,41
 20005cc:	38 42 a1 ac 	ori r2,r2,0xa1ac
 20005d0:	b5 61 08 00 	add r1,r11,r1
 20005d4:	f8 00 05 57 	calli 2001b30 <memcpy>
   		strcat(str1,str2);
 20005d8:	b9 80 10 00 	mv r2,r12
 20005dc:	b9 60 08 00 	mv r1,r11
 20005e0:	f8 00 05 b9 	calli 2001cc4 <strcat>
   		print_error((EE_UINT8 *)str1, strlen(str1));	
 20005e4:	b9 60 08 00 	mv r1,r11
 20005e8:	f8 00 06 04 	calli 2001df8 <strlen>
 20005ec:	b8 20 18 00 	mv r3,r1
 20005f0:	78 01 02 00 	mvhi r1,0x200
 20005f4:	38 21 aa a0 	ori r1,r1,0xaaa0
 20005f8:	b9 60 10 00 	mv r2,r11
 20005fc:	f8 00 02 5a 	calli 2000f64 <EE_hal_uart_write_buffer>
 2000600:	34 01 ff fc 	mvi r1,-4
 2000604:	e3 ff ff ab 	bi 20004b0 <rtc_read+0x174>

02000608 <FuncTask1>:

/*
 * Task 1
 */
TASK(Task1)
{
 2000608:	37 9c ff f4 	addi sp,sp,-12
 200060c:	5b 8b 00 08 	sw (sp+8),r11
 2000610:	5b 9d 00 04 	sw (sp+4),ra
	int ret;
	int retval=0;
	
    counter1++;
 2000614:	78 02 02 00 	mvhi r2,0x200
 2000618:	38 42 b3 10 	ori r2,r2,0xb310
 200061c:	28 43 00 00 	lw r3,(r2+0)
 * Task 1
 */
TASK(Task1)
{
	int ret;
	int retval=0;
 2000620:	34 04 00 00 	mvi r4,0
	
    counter1++;
    
    ret = rtc_read(&retval);
 2000624:	37 81 00 0c 	addi r1,sp,12
TASK(Task1)
{
	int ret;
	int retval=0;
	
    counter1++;
 2000628:	34 63 00 01 	addi r3,r3,1
 200062c:	58 43 00 00 	sw (r2+0),r3
 * Task 1
 */
TASK(Task1)
{
	int ret;
	int retval=0;
 2000630:	5b 84 00 0c 	sw (sp+12),r4
	
    counter1++;
    
    ret = rtc_read(&retval);
 2000634:	fb ff ff 42 	calli 200033c <rtc_read>
 2000638:	b8 20 58 00 	mv r11,r1
    
    if(ret == EE_I2C_OK)
 200063c:	44 20 00 06 	be r1,r0,2000654 <FuncTask1+0x4c>

/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
    MicoGPIO_t *ledc = (MicoGPIO_t *)LED_BASE_ADDRESS;
    ledc->data = (EE_UINT8)led;
 2000640:	78 01 80 00 	mvhi r1,0x8000
 2000644:	38 21 00 80 	ori r1,r1,0x80
 2000648:	34 02 00 df 	mvi r2,223
 200064c:	58 22 00 00 	sw (r1+0),r2
 2000650:	e0 00 00 00 	bi 2000650 <FuncTask1+0x48>
    
    ret = rtc_read(&retval);
    
    if(ret == EE_I2C_OK)
    {
		ret = Display_Time(); 
 2000654:	fb ff fe e4 	calli 20001e4 <_ftext_rom>
		if(ret<0)
 2000658:	4c 2b 00 06 	bge r1,r11,2000670 <FuncTask1+0x68>

/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
    MicoGPIO_t *ledc = (MicoGPIO_t *)LED_BASE_ADDRESS;
    ledc->data = (EE_UINT8)led;
 200065c:	78 01 80 00 	mvhi r1,0x8000
 2000660:	38 21 00 80 	ori r1,r1,0x80
 2000664:	34 02 00 f7 	mvi r2,247
 2000668:	58 22 00 00 	sw (r1+0),r2
 200066c:	e0 00 00 00 	bi 200066c <FuncTask1+0x64>
   	{
   		write_led(LED6);
   		while(1);
   	}
	
}
 2000670:	2b 9d 00 04 	lw ra,(sp+4)
 2000674:	2b 8b 00 08 	lw r11,(sp+8)
 2000678:	37 9c 00 0c 	addi sp,sp,12
 200067c:	c3 a0 00 00 	ret

02000680 <rtc_write>:
	while(1);
	
    return 0;
}

int rtc_write(int * retvalue) {
 2000680:	37 9c ff d0 	addi sp,sp,-48
 2000684:	5b 8b 00 30 	sw (sp+48),r11
 2000688:	5b 8c 00 2c 	sw (sp+44),r12
 200068c:	5b 8d 00 28 	sw (sp+40),r13
 2000690:	5b 8e 00 24 	sw (sp+36),r14
 2000694:	5b 8f 00 20 	sw (sp+32),r15
 2000698:	5b 90 00 1c 	sw (sp+28),r16
 200069c:	5b 91 00 18 	sw (sp+24),r17
 20006a0:	5b 92 00 14 	sw (sp+20),r18
 20006a4:	5b 93 00 10 	sw (sp+16),r19
 20006a8:	5b 94 00 0c 	sw (sp+12),r20
 20006ac:	5b 95 00 08 	sw (sp+8),r21
 20006b0:	5b 9d 00 04 	sw (sp+4),ra
    TimeToWrite.hours   = 23;
   	TimeToWrite.minutes = 59;
   	TimeToWrite.seconds = 40;
   	
   	address = 0;							// address in memory
   	tx_data[0] = 0x80;
 20006b4:	78 13 02 00 	mvhi r19,0x200
 20006b8:	3a 73 b5 10 	ori r19,r19,0xb510
	while(1);
	
    return 0;
}

int rtc_write(int * retvalue) {
 20006bc:	b8 20 a0 00 	mv r20,r1
	EE_UINT8 device = 0xA0;
	EE_UINT8 address;
	
    TimeToWrite.year    = 7;    			// 2007 (offset from 2000)
 20006c0:	34 0b 00 07 	mvi r11,7
   	TimeToWrite.minutes = 59;
   	TimeToWrite.seconds = 40;
   	
   	address = 0;							// address in memory
   	tx_data[0] = 0x80;
   	tx_data[1] = 0;
 20006c4:	34 15 00 00 	mvi r21,0

int rtc_write(int * retvalue) {
	EE_UINT8 device = 0xA0;
	EE_UINT8 address;
	
    TimeToWrite.year    = 7;    			// 2007 (offset from 2000)
 20006c8:	78 12 02 00 	mvhi r18,0x200
 20006cc:	78 01 80 00 	mvhi r1,0x8000
 20006d0:	3a 52 b4 a4 	ori r18,r18,0xb4a4
    TimeToWrite.month   = 12;
    TimeToWrite.day     = 31;
 20006d4:	34 0d 00 1f 	mvi r13,31
   	TimeToWrite.seconds = 40;
   	
   	address = 0;							// address in memory
   	tx_data[0] = 0x80;
   	tx_data[1] = 0;
   	tx_data[2] = ((TimeToWrite.seconds/10)<<4) + (TimeToWrite.seconds%10);
 20006d8:	34 06 00 40 	mvi r6,64
   	tx_data[3] = ((TimeToWrite.minutes/10)<<4) + (TimeToWrite.minutes%10);
 20006dc:	34 07 00 59 	mvi r7,89
   	tx_data[4] = ((TimeToWrite.hours/10)<<4) + (TimeToWrite.hours%10);
 20006e0:	34 08 00 23 	mvi r8,35
   	tx_data[5] = ((TimeToWrite.year%4)<<6) + ((TimeToWrite.day/10)<<4) +(TimeToWrite.day%10);
 20006e4:	34 09 ff f1 	mvi r9,-15
   	tx_data[6] = ((TimeToWrite.month/10)<<4) + (TimeToWrite.month%10);
 20006e8:	34 0a 00 12 	mvi r10,18
 20006ec:	38 21 03 00 	ori r1,r1,0x300
int rtc_write(int * retvalue) {
	EE_UINT8 device = 0xA0;
	EE_UINT8 address;
	
    TimeToWrite.year    = 7;    			// 2007 (offset from 2000)
    TimeToWrite.month   = 12;
 20006f0:	34 0c 00 0c 	mvi r12,12
    TimeToWrite.day     = 31;
    TimeToWrite.hours   = 23;
 20006f4:	34 0e 00 17 	mvi r14,23
   	TimeToWrite.minutes = 59;
 20006f8:	34 0f 00 3b 	mvi r15,59
   	TimeToWrite.seconds = 40;
 20006fc:	34 10 00 28 	mvi r16,40
   	
   	address = 0;							// address in memory
   	tx_data[0] = 0x80;
 2000700:	34 11 ff 80 	mvi r17,-128
 2000704:	34 02 00 a0 	mvi r2,160
 2000708:	ba a0 18 00 	mv r3,r21
 200070c:	ba 60 20 00 	mv r4,r19
 2000710:	b9 60 28 00 	mv r5,r11
	EE_UINT8 device = 0xA0;
	EE_UINT8 address;
	
    TimeToWrite.year    = 7;    			// 2007 (offset from 2000)
    TimeToWrite.month   = 12;
    TimeToWrite.day     = 31;
 2000714:	32 4d 00 02 	sb (r18+2),r13

int rtc_write(int * retvalue) {
	EE_UINT8 device = 0xA0;
	EE_UINT8 address;
	
    TimeToWrite.year    = 7;    			// 2007 (offset from 2000)
 2000718:	32 4b 00 00 	sb (r18+0),r11
    TimeToWrite.month   = 12;
 200071c:	32 4c 00 01 	sb (r18+1),r12
    TimeToWrite.day     = 31;
    TimeToWrite.hours   = 23;
 2000720:	32 4e 00 03 	sb (r18+3),r14
   	TimeToWrite.minutes = 59;
 2000724:	32 4f 00 04 	sb (r18+4),r15
   	TimeToWrite.seconds = 40;
 2000728:	32 50 00 05 	sb (r18+5),r16
   	
   	address = 0;							// address in memory
   	tx_data[0] = 0x80;
 200072c:	32 71 00 00 	sb (r19+0),r17
   	tx_data[1] = 0;
   	tx_data[2] = ((TimeToWrite.seconds/10)<<4) + (TimeToWrite.seconds%10);
 2000730:	32 66 00 02 	sb (r19+2),r6
   	tx_data[3] = ((TimeToWrite.minutes/10)<<4) + (TimeToWrite.minutes%10);
 2000734:	32 67 00 03 	sb (r19+3),r7
   	tx_data[4] = ((TimeToWrite.hours/10)<<4) + (TimeToWrite.hours%10);
 2000738:	32 68 00 04 	sb (r19+4),r8
   	tx_data[5] = ((TimeToWrite.year%4)<<6) + ((TimeToWrite.day/10)<<4) +(TimeToWrite.day%10);
 200073c:	32 69 00 05 	sb (r19+5),r9
   	tx_data[6] = ((TimeToWrite.month/10)<<4) + (TimeToWrite.month%10);
 2000740:	32 6a 00 06 	sb (r19+6),r10
   	TimeToWrite.minutes = 59;
   	TimeToWrite.seconds = 40;
   	
   	address = 0;							// address in memory
   	tx_data[0] = 0x80;
   	tx_data[1] = 0;
 2000744:	32 75 00 01 	sb (r19+1),r21
 2000748:	f8 00 03 44 	calli 2001458 <EE_hal_i2c_write_buffer_polling>
   	tx_data[2] = ((TimeToWrite.seconds/10)<<4) + (TimeToWrite.seconds%10);
   	tx_data[3] = ((TimeToWrite.minutes/10)<<4) + (TimeToWrite.minutes%10);
   	tx_data[4] = ((TimeToWrite.hours/10)<<4) + (TimeToWrite.hours%10);
   	tx_data[5] = ((TimeToWrite.year%4)<<6) + ((TimeToWrite.day/10)<<4) +(TimeToWrite.day%10);
   	tx_data[6] = ((TimeToWrite.month/10)<<4) + (TimeToWrite.month%10);
   	retvalue[0] = EE_i2c_write_buffer(device, address, tx_data, 7);	
 200074c:	5a 81 00 00 	sw (r20+0),r1
 2000750:	b8 20 68 00 	mv r13,r1
   	
   	if(retvalue[0]!= EE_I2C_OK) 
 2000754:	5c 35 00 25 	bne r1,r21,20007e8 <rtc_write+0x168>
   		print_error((EE_UINT8 *)str1, strlen(str1));	
   		return -1;
   	}

	address = 0x10;							// address in memory
   	tx_data[0] = TimeToWrite.year;			// data to be written
 2000758:	42 45 00 00 	lbu r5,(r18+0)
 200075c:	78 01 80 00 	mvhi r1,0x8000
 2000760:	38 21 03 00 	ori r1,r1,0x300
 2000764:	b8 a0 20 00 	mv r4,r5
 2000768:	34 02 00 a0 	mvi r2,160
 200076c:	34 03 00 10 	mvi r3,16
 2000770:	32 65 00 00 	sb (r19+0),r5
 2000774:	f8 00 02 cd 	calli 20012a8 <EE_hal_i2c_write_byte_polling>
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
 2000778:	5a 81 00 00 	sw (r20+0),r1
 200077c:	b8 20 58 00 	mv r11,r1
   	if(retvalue[0]!= EE_I2C_OK)
 2000780:	5c 2d 00 38 	bne r1,r13,2000860 <rtc_write+0x1e0>
 2000784:	78 01 80 00 	mvhi r1,0x8000
 2000788:	34 02 00 a0 	mvi r2,160
 200078c:	38 21 03 00 	ori r1,r1,0x300
 2000790:	b9 60 18 00 	mv r3,r11
 2000794:	b9 60 20 00 	mv r4,r11
   		print_error((EE_UINT8 *)str1, strlen(str1));		
   		return -2;
   	}

	address = 0;							// address in memory
   	tx_data[0] = 0;							// data to be written
 2000798:	32 6b 00 00 	sb (r19+0),r11
 200079c:	f8 00 02 c3 	calli 20012a8 <EE_hal_i2c_write_byte_polling>
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
 20007a0:	5a 81 00 00 	sw (r20+0),r1
   	if(retvalue[0]!= EE_I2C_OK)
 20007a4:	b8 20 10 00 	mv r2,r1
 20007a8:	5c 2b 00 4c 	bne r1,r11,20008d8 <rtc_write+0x258>
   		print_error((EE_UINT8 *)str1, strlen(str1));		
   		return -2;
   	}
	
   	return 0;
}
 20007ac:	b8 40 08 00 	mv r1,r2
 20007b0:	2b 9d 00 04 	lw ra,(sp+4)
 20007b4:	2b 8b 00 30 	lw r11,(sp+48)
 20007b8:	2b 8c 00 2c 	lw r12,(sp+44)
 20007bc:	2b 8d 00 28 	lw r13,(sp+40)
 20007c0:	2b 8e 00 24 	lw r14,(sp+36)
 20007c4:	2b 8f 00 20 	lw r15,(sp+32)
 20007c8:	2b 90 00 1c 	lw r16,(sp+28)
 20007cc:	2b 91 00 18 	lw r17,(sp+24)
 20007d0:	2b 92 00 14 	lw r18,(sp+20)
 20007d4:	2b 93 00 10 	lw r19,(sp+16)
 20007d8:	2b 94 00 0c 	lw r20,(sp+12)
 20007dc:	2b 95 00 08 	lw r21,(sp+8)
 20007e0:	37 9c 00 30 	addi sp,sp,48
 20007e4:	c3 a0 00 00 	ret
   	tx_data[6] = ((TimeToWrite.month/10)<<4) + (TimeToWrite.month%10);
   	retvalue[0] = EE_i2c_write_buffer(device, address, tx_data, 7);	
   	
   	if(retvalue[0]!= EE_I2C_OK) 
   	{
   		str1[0] = '\0';
 20007e8:	78 0b 02 00 	mvhi r11,0x200
   		str2[0] = '\0';
 20007ec:	78 0c 02 00 	mvhi r12,0x200
   	tx_data[6] = ((TimeToWrite.month/10)<<4) + (TimeToWrite.month%10);
   	retvalue[0] = EE_i2c_write_buffer(device, address, tx_data, 7);	
   	
   	if(retvalue[0]!= EE_I2C_OK) 
   	{
   		str1[0] = '\0';
 20007f0:	39 6b b4 30 	ori r11,r11,0xb430
   		str2[0] = '\0';
 20007f4:	39 8c b4 ac 	ori r12,r12,0xb4ac
 20007f8:	31 95 00 00 	sb (r12+0),r21
   	tx_data[6] = ((TimeToWrite.month/10)<<4) + (TimeToWrite.month%10);
   	retvalue[0] = EE_i2c_write_buffer(device, address, tx_data, 7);	
   	
   	if(retvalue[0]!= EE_I2C_OK) 
   	{
   		str1[0] = '\0';
 20007fc:	31 75 00 00 	sb (r11+0),r21
   		str2[0] = '\0';
   		sprintf(str2,"%d",retvalue[0]);
 2000800:	2a 83 00 00 	lw r3,(r20+0)
 2000804:	78 02 02 00 	mvhi r2,0x200
 2000808:	38 42 a1 a8 	ori r2,r2,0xa1a8
 200080c:	b9 80 08 00 	mv r1,r12
 2000810:	f8 00 05 08 	calli 2001c30 <sprintf>
   		strcat(str1,"\nrtc_write error code: -1\nreturn value: ");
 2000814:	b9 60 08 00 	mv r1,r11
 2000818:	f8 00 05 78 	calli 2001df8 <strlen>
 200081c:	78 02 02 00 	mvhi r2,0x200
 2000820:	34 03 00 29 	mvi r3,41
 2000824:	38 42 a2 04 	ori r2,r2,0xa204
 2000828:	b5 61 08 00 	add r1,r11,r1
 200082c:	f8 00 04 c1 	calli 2001b30 <memcpy>
   		strcat(str1,str2);
 2000830:	b9 80 10 00 	mv r2,r12
 2000834:	b9 60 08 00 	mv r1,r11
 2000838:	f8 00 05 23 	calli 2001cc4 <strcat>
   		print_error((EE_UINT8 *)str1, strlen(str1));	
 200083c:	b9 60 08 00 	mv r1,r11
 2000840:	f8 00 05 6e 	calli 2001df8 <strlen>
 2000844:	b8 20 18 00 	mv r3,r1
 2000848:	78 01 02 00 	mvhi r1,0x200
 200084c:	b9 60 10 00 	mv r2,r11
 2000850:	38 21 aa a0 	ori r1,r1,0xaaa0
 2000854:	f8 00 01 c4 	calli 2000f64 <EE_hal_uart_write_buffer>
 2000858:	34 02 ff ff 	mvi r2,-1
 200085c:	e3 ff ff d4 	bi 20007ac <rtc_write+0x12c>
	address = 0x10;							// address in memory
   	tx_data[0] = TimeToWrite.year;			// data to be written
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 2000860:	78 0b 02 00 	mvhi r11,0x200
   		str2[0] = '\0';
 2000864:	78 0c 02 00 	mvhi r12,0x200
	address = 0x10;							// address in memory
   	tx_data[0] = TimeToWrite.year;			// data to be written
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 2000868:	39 6b b4 30 	ori r11,r11,0xb430
   		str2[0] = '\0';
 200086c:	39 8c b4 ac 	ori r12,r12,0xb4ac
	address = 0x10;							// address in memory
   	tx_data[0] = TimeToWrite.year;			// data to be written
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 2000870:	31 6d 00 00 	sb (r11+0),r13
   		str2[0] = '\0';
 2000874:	31 95 00 00 	sb (r12+0),r21
   		sprintf(str2,"%d",retvalue[0]);
 2000878:	2a 83 00 00 	lw r3,(r20+0)
 200087c:	78 02 02 00 	mvhi r2,0x200
 2000880:	38 42 a1 a8 	ori r2,r2,0xa1a8
 2000884:	b9 80 08 00 	mv r1,r12
 2000888:	f8 00 04 ea 	calli 2001c30 <sprintf>
   		strcat(str1,"\nrtc_write error code: -2\nreturn value: ");
 200088c:	b9 60 08 00 	mv r1,r11
 2000890:	f8 00 05 5a 	calli 2001df8 <strlen>
 2000894:	78 02 02 00 	mvhi r2,0x200
 2000898:	38 42 a2 30 	ori r2,r2,0xa230
 200089c:	34 03 00 29 	mvi r3,41
 20008a0:	b5 61 08 00 	add r1,r11,r1
 20008a4:	f8 00 04 a3 	calli 2001b30 <memcpy>
   		strcat(str1,str2);
 20008a8:	b9 60 08 00 	mv r1,r11
 20008ac:	b9 80 10 00 	mv r2,r12
 20008b0:	f8 00 05 05 	calli 2001cc4 <strcat>
   		print_error((EE_UINT8 *)str1, strlen(str1));		
 20008b4:	b9 60 08 00 	mv r1,r11
 20008b8:	f8 00 05 50 	calli 2001df8 <strlen>
   		str1[0] = '\0';
   		str2[0] = '\0';
   		sprintf(str2,"%d",retvalue[0]);
   		strcat(str1,"\nrtc_write error code: -2\nreturn value: ");
   		strcat(str1,str2);
   		print_error((EE_UINT8 *)str1, strlen(str1));		
 20008bc:	b8 20 18 00 	mv r3,r1
 20008c0:	78 01 02 00 	mvhi r1,0x200
 20008c4:	b9 60 10 00 	mv r2,r11
 20008c8:	38 21 aa a0 	ori r1,r1,0xaaa0
 20008cc:	f8 00 01 a6 	calli 2000f64 <EE_hal_uart_write_buffer>
 20008d0:	34 02 ff fe 	mvi r2,-2
 20008d4:	e3 ff ff b6 	bi 20007ac <rtc_write+0x12c>
	address = 0;							// address in memory
   	tx_data[0] = 0;							// data to be written
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 20008d8:	78 0b 02 00 	mvhi r11,0x200
   		str2[0] = '\0';
 20008dc:	78 0c 02 00 	mvhi r12,0x200
	address = 0;							// address in memory
   	tx_data[0] = 0;							// data to be written
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 20008e0:	39 6b b4 30 	ori r11,r11,0xb430
   		str2[0] = '\0';
 20008e4:	39 8c b4 ac 	ori r12,r12,0xb4ac
 20008e8:	31 95 00 00 	sb (r12+0),r21
	address = 0;							// address in memory
   	tx_data[0] = 0;							// data to be written
   	retvalue[0] = EE_i2c_write_byte(device, address, tx_data[0]);	
   	if(retvalue[0]!= EE_I2C_OK)
   	{
   		str1[0] = '\0';
 20008ec:	31 75 00 00 	sb (r11+0),r21
   		str2[0] = '\0';
   		sprintf(str2,"%d",retvalue[0]);
 20008f0:	2a 83 00 00 	lw r3,(r20+0)
 20008f4:	78 02 02 00 	mvhi r2,0x200
 20008f8:	38 42 a1 a8 	ori r2,r2,0xa1a8
 20008fc:	b9 80 08 00 	mv r1,r12
 2000900:	f8 00 04 cc 	calli 2001c30 <sprintf>
   		strcat(str1,"\nrtc_write error code: -2\nreturn value: ");
 2000904:	b9 60 08 00 	mv r1,r11
 2000908:	f8 00 05 3c 	calli 2001df8 <strlen>
 200090c:	78 02 02 00 	mvhi r2,0x200
 2000910:	34 03 00 29 	mvi r3,41
 2000914:	b5 61 08 00 	add r1,r11,r1
 2000918:	38 42 a2 30 	ori r2,r2,0xa230
 200091c:	f8 00 04 85 	calli 2001b30 <memcpy>
   		strcat(str1,str2);
 2000920:	b9 60 08 00 	mv r1,r11
 2000924:	b9 80 10 00 	mv r2,r12
 2000928:	f8 00 04 e7 	calli 2001cc4 <strcat>
   		print_error((EE_UINT8 *)str1, strlen(str1));		
 200092c:	b9 60 08 00 	mv r1,r11
 2000930:	f8 00 05 32 	calli 2001df8 <strlen>
 2000934:	e3 ff ff e2 	bi 20008bc <rtc_write+0x23c>

02000938 <main>:

/*
 * MAIN TASK
 */
int main(void)
{
 2000938:	37 9c ff ec 	addi sp,sp,-20
 200093c:	5b 8b 00 10 	sw (sp+16),r11
 2000940:	5b 8c 00 0c 	sw (sp+12),r12
 2000944:	5b 8d 00 08 	sw (sp+8),r13
 2000948:	5b 9d 00 04 	sw (sp+4),ra
	int i = 0;
	int ret;
	int retval=0;
 200094c:	34 02 00 00 	mvi r2,0
 2000950:	5b 82 00 14 	sw (sp+20),r2
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2000954:	90 00 08 00 	rcsr r1,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2000958:	34 02 ff fe 	mvi r2,-2
 200095c:	a0 22 08 00 	and r1,r1,r2
 2000960:	d0 01 00 00 	wcsr IE,r1

/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
    MicoGPIO_t *ledc = (MicoGPIO_t *)LED_BASE_ADDRESS;
    ledc->data = (EE_UINT8)led;
 2000964:	78 0c 80 00 	mvhi r12,0x8000
 2000968:	34 03 00 ff 	mvi r3,255
 200096c:	39 8c 00 80 	ori r12,r12,0x80
 2000970:	78 01 02 00 	mvhi r1,0x200
 2000974:	78 02 00 01 	mvhi r2,0x1
 2000978:	59 83 00 00 	sw (r12+0),r3
 200097c:	38 21 aa a0 	ori r1,r1,0xaaa0
 2000980:	38 42 c2 00 	ori r2,r2,0xc200
 2000984:	34 03 00 03 	mvi r3,3
 2000988:	f8 00 01 d1 	calli 20010cc <EE_hal_uart_config>
 200098c:	b8 20 58 00 	mv r11,r1
	EE_mico32_disableIRQ();

	/* Turn off all leds */
	write_led(NONE_LED);
	
	if( EE_uart_config(115200, EE_UART_BIT8_NO | EE_UART_BIT_STOP_1) != EE_UART_OK )
 2000990:	44 20 00 04 	be r1,r0,20009a0 <main+0x68>

/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
    MicoGPIO_t *ledc = (MicoGPIO_t *)LED_BASE_ADDRESS;
    ledc->data = (EE_UINT8)led;
 2000994:	34 01 00 ef 	mvi r1,239
 2000998:	59 81 00 00 	sw (r12+0),r1
 200099c:	e0 00 00 00 	bi 200099c <main+0x64>
 20009a0:	34 03 00 fe 	mvi r3,254
 20009a4:	78 01 80 00 	mvhi r1,0x8000
 20009a8:	78 02 00 01 	mvhi r2,0x1
 20009ac:	59 83 00 00 	sw (r12+0),r3
 20009b0:	38 21 03 00 	ori r1,r1,0x300
 20009b4:	38 42 86 a0 	ori r2,r2,0x86a0
 20009b8:	b9 60 18 00 	mv r3,r11
 20009bc:	f8 00 03 25 	calli 2001650 <EE_hal_i2c_config>
 20009c0:	b8 20 68 00 	mv r13,r1
	}

	write_led(LED1);

	///* Background activity */
	if( EE_i2c_config(100000, 0) == EE_I2C_OK )
 20009c4:	44 2b 00 04 	be r1,r11,20009d4 <main+0x9c>

/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
    MicoGPIO_t *ledc = (MicoGPIO_t *)LED_BASE_ADDRESS;
    ledc->data = (EE_UINT8)led;
 20009c8:	34 01 00 7f 	mvi r1,127
 20009cc:	59 81 00 00 	sw (r12+0),r1
 20009d0:	e0 00 00 00 	bi 20009d0 <main+0x98>
	write_led(LED1);

	///* Background activity */
	if( EE_i2c_config(100000, 0) == EE_I2C_OK )
	{
			ret = rtc_write(&retval);
 20009d4:	37 81 00 14 	addi r1,sp,20
 20009d8:	fb ff ff 2a 	calli 2000680 <rtc_write>
 20009dc:	b8 20 10 00 	mv r2,r1
			if(ret == EE_I2C_OK)
 20009e0:	5c 2d 00 0e 	bne r1,r13,2000a18 <main+0xe0>
 20009e4:	78 0b 00 0f 	mvhi r11,0xf

/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
    MicoGPIO_t *ledc = (MicoGPIO_t *)LED_BASE_ADDRESS;
    ledc->data = (EE_UINT8)led;
 20009e8:	34 01 00 fd 	mvi r1,253
 20009ec:	59 81 00 00 	sw (r12+0),r1
			{
				write_led(LED2);
				/* Activate a periodic task */
	    		while(1)
	    		{
		 			for(i=0;i<1000000;i++);
 20009f0:	39 6b 42 3f 	ori r11,r11,0x423f
	   				ActivateTask(Task1);
 20009f4:	34 01 00 00 	mvi r1,0
			{
				write_led(LED2);
				/* Activate a periodic task */
	    		while(1)
	    		{
		 			for(i=0;i<1000000;i++);
 20009f8:	4d 62 00 06 	bge r11,r2,2000a10 <main+0xd8>
	   				ActivateTask(Task1);
 20009fc:	f8 00 00 ef 	calli 2000db8 <EE_fp_ActivateTask>
 2000a00:	34 02 00 00 	mvi r2,0
 2000a04:	34 01 00 00 	mvi r1,0
			{
				write_led(LED2);
				/* Activate a periodic task */
	    		while(1)
	    		{
		 			for(i=0;i<1000000;i++);
 2000a08:	4d 62 00 02 	bge r11,r2,2000a10 <main+0xd8>
 2000a0c:	e3 ff ff fc 	bi 20009fc <main+0xc4>
 2000a10:	34 42 00 01 	addi r2,r2,1
 2000a14:	e3 ff ff f8 	bi 20009f4 <main+0xbc>

/* User functions */
void write_led(volatile unsigned int led)		// Function to turn on the leds 
{
    MicoGPIO_t *ledc = (MicoGPIO_t *)LED_BASE_ADDRESS;
    ledc->data = (EE_UINT8)led;
 2000a18:	34 01 00 bf 	mvi r1,191
 2000a1c:	59 81 00 00 	sw (r12+0),r1
 2000a20:	e3 ff ff ec 	bi 20009d0 <main+0x98>

02000a24 <LatticeDDInit>:
//  
/////////////////////////////////////////////////////////////////////////////
    #include "DDStructs.h"

    void LatticeDDInit(void)
    {
 2000a24:	37 9c ff fc 	addi sp,sp,-4
 2000a28:	5b 9d 00 04 	sw (sp+4),ra
        LatticeMico32Init(&lm32_top_LM32);
        // Needed only to use the Jtag interface for I/O
#endif

        // Invoke application's main routine
        main();
 2000a2c:	fb ff ff c3 	calli 2000938 <main>
    }
 2000a30:	2b 9d 00 04 	lw ra,(sp+4)
 2000a34:	37 9c 00 04 	addi sp,sp,4
 2000a38:	c3 a0 00 00 	ret

02000a3c <EE_mico32_register_ISR>:


#ifndef __STATIC_ISR_TABLE__

void EE_mico32_register_ISR(int level, EE_mico32_ISR_handler fun)
{
 2000a3c:	b8 20 20 00 	mv r4,r1
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2000a40:	90 00 28 00 	rcsr r5,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2000a44:	34 01 ff fe 	mvi r1,-2
 2000a48:	a0 a1 08 00 	and r1,r5,r1
 2000a4c:	d0 01 00 00 	wcsr IE,r1
    int mask;
    EE_FREG intst = EE_mico32_disableIRQ();
    EE_mico32_ISR_table[level] = fun;
 2000a50:	78 03 02 00 	mvhi r3,0x200
 2000a54:	3c 81 00 02 	sli r1,r4,2
 2000a58:	38 63 b5 2c 	ori r3,r3,0xb52c
 2000a5c:	b4 61 18 00 	add r3,r3,r1
 2000a60:	58 62 00 00 	sw (r3+0),r2


__INLINE__ int __ALWAYS_INLINE__ mico32_get_reg_im(void)
{
    int im;
    asm volatile ( "rcsr %0,im":"=r"(im) );
 2000a64:	90 20 18 00 	rcsr r3,IM
    mask = mico32_get_reg_im();
    if (fun)
        mask |= 1 << level;
 2000a68:	34 01 00 01 	mvi r1,1
 2000a6c:	bc 24 08 00 	sl r1,r1,r4
 2000a70:	b8 61 08 00 	or r1,r3,r1
{
    int mask;
    EE_FREG intst = EE_mico32_disableIRQ();
    EE_mico32_ISR_table[level] = fun;
    mask = mico32_get_reg_im();
    if (fun)
 2000a74:	44 40 00 08 	be r2,r0,2000a94 <EE_mico32_register_ISR+0x58>
}


__INLINE__ void __ALWAYS_INLINE__ mico32_set_reg_im(int im)
{
    asm volatile ( "wcsr im,%0"::"r"(im) );
 2000a78:	d0 21 00 00 	wcsr IM,r1
        mask |= 1 << level;
    else
        mask &= ~(1 << level);
    mico32_set_reg_im(mask);
    if (EE_mico32_are_IRQs_enabled(intst))
 2000a7c:	20 a1 00 01 	andi r1,r5,0x1
 2000a80:	44 20 00 04 	be r1,r0,2000a90 <EE_mico32_register_ISR+0x54>
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_enableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2000a84:	90 00 08 00 	rcsr r1,IE
    newie = oldie | (0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2000a88:	38 21 00 01 	ori r1,r1,0x1
 2000a8c:	d0 01 00 00 	wcsr IE,r1
 2000a90:	c3 a0 00 00 	ret
    EE_mico32_ISR_table[level] = fun;
    mask = mico32_get_reg_im();
    if (fun)
        mask |= 1 << level;
    else
        mask &= ~(1 << level);
 2000a94:	34 01 00 01 	mvi r1,1
 2000a98:	bc 24 08 00 	sl r1,r1,r4
 2000a9c:	a4 20 08 00 	not r1,r1
 2000aa0:	a0 61 08 00 	and r1,r3,r1
 2000aa4:	e3 ff ff f5 	bi 2000a78 <EE_mico32_register_ISR+0x3c>

02000aa8 <MicoISRHandler>:


/* Possible improvement: Enable higher-level interrupts while processing lower
 * level interrupts, even in this function */
void MicoISRHandler(void)
{
 2000aa8:	37 9c ff f0 	addi sp,sp,-16
 2000aac:	5b 8b 00 10 	sw (sp+16),r11
 2000ab0:	5b 8c 00 0c 	sw (sp+12),r12
 2000ab4:	5b 8d 00 08 	sw (sp+8),r13
 2000ab8:	5b 9d 00 04 	sw (sp+4),ra
    EE_increment_IRQ_nesting_level();
 2000abc:	78 0d 02 00 	mvhi r13,0x200
 2000ac0:	39 ad b5 b4 	ori r13,r13,0xb5b4
 2000ac4:	34 01 00 01 	mvi r1,1
 2000ac8:	59 a1 00 00 	sw (r13+0),r1


__INLINE__ int __ALWAYS_INLINE__ mico32_get_reg_ip(void)
{
    int ip;
    asm volatile ( "rcsr %0,ip":"=r"(ip) );
 2000acc:	90 40 10 00 	rcsr r2,IP


__INLINE__ int __ALWAYS_INLINE__ mico32_get_reg_im(void)
{
    int im;
    asm volatile ( "rcsr %0,im":"=r"(im) );
 2000ad0:	90 20 08 00 	rcsr r1,IM
    int im, ip;

    for (;;) {
        ip = mico32_get_reg_ip();
        im = mico32_get_reg_im();
        ip &= im;
 2000ad4:	a0 41 10 00 	and r2,r2,r1
        if (ip == 0)
 2000ad8:	44 40 00 15 	be r2,r0,2000b2c <MicoISRHandler+0x84>
 2000adc:	78 0c 02 00 	mvhi r12,0x200
 2000ae0:	39 8c b5 2c 	ori r12,r12,0xb52c
 2000ae4:	20 43 00 01 	andi r3,r2,0x1
 2000ae8:	34 0b 00 01 	mvi r11,1
            break;
        for (mask = 1, level = 0; ; ++level, mask <<= 1) {
            if (ip & mask) {
 2000aec:	5c 60 00 29 	bne r3,r0,2000b90 <MicoISRHandler+0xe8>
        ip = mico32_get_reg_ip();
        im = mico32_get_reg_im();
        ip &= im;
        if (ip == 0)
            break;
        for (mask = 1, level = 0; ; ++level, mask <<= 1) {
 2000af0:	b5 6b 58 00 	add r11,r11,r11
            if (ip & mask) {
 2000af4:	a1 62 08 00 	and r1,r11,r2
        ip = mico32_get_reg_ip();
        im = mico32_get_reg_im();
        ip &= im;
        if (ip == 0)
            break;
        for (mask = 1, level = 0; ; ++level, mask <<= 1) {
 2000af8:	34 63 00 01 	addi r3,r3,1
            if (ip & mask) {
 2000afc:	44 20 ff fd 	be r1,r0,2000af0 <MicoISRHandler+0x48>
                EE_mico32_ISR_handler f = EE_mico32_ISR_table[level];
 2000b00:	3c 61 00 02 	sli r1,r3,2
 2000b04:	b5 81 08 00 	add r1,r12,r1
 2000b08:	28 22 00 00 	lw r2,(r1+0)
                if (f)
 2000b0c:	44 40 00 03 	be r2,r0,2000b18 <MicoISRHandler+0x70>
*/
#else /* __IRQ_STACK_NEEDED__ is defined */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_call_ISR_new_stack(int irq_level, EE_mico32_ISR_handler fun, int nesting_level)
{
    EE_std_enableIRQ_nested(); /* Enable IRQ if nesting is allowed */
    fun(irq_level);
 2000b10:	b8 60 08 00 	mv r1,r3
 2000b14:	d8 40 00 00 	call r2
}


__INLINE__ void __ALWAYS_INLINE__ mico32_clear_ip_mask(int mask)
{
    asm volatile ( "wcsr ip,%0"::"r"(mask) );
 2000b18:	d0 4b 00 00 	wcsr IP,r11


__INLINE__ int __ALWAYS_INLINE__ mico32_get_reg_ip(void)
{
    int ip;
    asm volatile ( "rcsr %0,ip":"=r"(ip) );
 2000b1c:	90 40 10 00 	rcsr r2,IP


__INLINE__ int __ALWAYS_INLINE__ mico32_get_reg_im(void)
{
    int im;
    asm volatile ( "rcsr %0,im":"=r"(im) );
 2000b20:	90 20 08 00 	rcsr r1,IM
    int im, ip;

    for (;;) {
        ip = mico32_get_reg_ip();
        im = mico32_get_reg_im();
        ip &= im;
 2000b24:	a0 22 10 00 	and r2,r1,r2
        if (ip == 0)
 2000b28:	5c 40 ff ef 	bne r2,r0,2000ae4 <MicoISRHandler+0x3c>
                mico32_clear_ip_mask(mask);
                break;
            }
        }
    }
    EE_decrement_IRQ_nesting_level();
 2000b2c:	34 01 00 00 	mvi r1,0
 2000b30:	59 a1 00 00 	sw (r13+0),r1
 * the scheduler and launch a new scheduled task (if any), or change the current
 * stack (if needed); return whenever there is nothing else to do.
 */
__INLINE__ void __ALWAYS_INLINE__ EE_std_after_IRQ_schedule(void)
{
    EE_IRQ_end_instance();
 2000b34:	f8 00 00 57 	calli 2000c90 <EE_IRQ_end_instance>
    if (EE_std_need_context_change(EE_std_endcycle_next_tid))
 2000b38:	78 01 02 00 	mvhi r1,0x200
 2000b3c:	38 21 b5 b8 	ori r1,r1,0xb5b8
 2000b40:	28 25 00 00 	lw r5,(r1+0)
 2000b44:	4c a0 00 0b 	bge r5,r0,2000b70 <MicoISRHandler+0xc8>
 2000b48:	34 a3 00 01 	addi r3,r5,1
 2000b4c:	3c 63 00 02 	sli r3,r3,2
 2000b50:	78 01 02 00 	mvhi r1,0x200
 2000b54:	38 21 a2 68 	ori r1,r1,0xa268
 2000b58:	78 02 02 00 	mvhi r2,0x200
 2000b5c:	b4 23 08 00 	add r1,r1,r3
 2000b60:	38 42 b3 18 	ori r2,r2,0xb318
 2000b64:	28 24 00 00 	lw r4,(r1+0)
 2000b68:	28 43 00 00 	lw r3,(r2+0)
 2000b6c:	44 83 00 03 	be r4,r3,2000b78 <MicoISRHandler+0xd0>
        EE_std_change_context(EE_std_endcycle_next_tid);
 2000b70:	b8 a0 08 00 	mv r1,r5
 2000b74:	f8 00 00 09 	calli 2000b98 <EE_std_change_context>
        /* Outer nesting level: call the scheduler.  If we have also type-ISR1
         * interrupts, the scheduler should be called only for type-ISR2
         * interrupts. */
        EE_std_after_IRQ_schedule();
    }
}
 2000b78:	2b 9d 00 04 	lw ra,(sp+4)
 2000b7c:	2b 8b 00 10 	lw r11,(sp+16)
 2000b80:	2b 8c 00 0c 	lw r12,(sp+12)
 2000b84:	2b 8d 00 08 	lw r13,(sp+8)
 2000b88:	37 9c 00 10 	addi sp,sp,16
 2000b8c:	c3 a0 00 00 	ret
        im = mico32_get_reg_im();
        ip &= im;
        if (ip == 0)
            break;
        for (mask = 1, level = 0; ; ++level, mask <<= 1) {
            if (ip & mask) {
 2000b90:	34 03 00 00 	mvi r3,0
 2000b94:	e3 ff ff db 	bi 2000b00 <MicoISRHandler+0x58>

02000b98 <EE_std_change_context>:
 2000b98:	3c 22 00 02 	sli r2,r1,2
 2000b9c:	78 03 02 00 	mvhi r3,0x200
 2000ba0:	38 63 a2 68 	ori r3,r3,0xa268
 2000ba4:	b4 62 10 00 	add r2,r3,r2
 2000ba8:	28 42 00 04 	lw r2,(r2+4)
 2000bac:	78 03 02 00 	mvhi r3,0x200
 2000bb0:	38 63 b3 18 	ori r3,r3,0xb318
 2000bb4:	28 64 00 00 	lw r4,(r3+0)
 2000bb8:	44 44 00 2e 	be r2,r4,2000c70 <_end_change_stacks>
 2000bbc:	5b 9d ff bc 	sw (sp+-68),ra
 2000bc0:	5b 9b ff c0 	sw (sp+-64),fp
 2000bc4:	5b 9a ff c4 	sw (sp+-60),gp
 2000bc8:	5b 99 ff c8 	sw (sp+-56),r25
 2000bcc:	5b 98 ff cc 	sw (sp+-52),r24
 2000bd0:	5b 97 ff d0 	sw (sp+-48),r23
 2000bd4:	5b 96 ff d4 	sw (sp+-44),r22
 2000bd8:	5b 95 ff d8 	sw (sp+-40),r21
 2000bdc:	5b 94 ff dc 	sw (sp+-36),r20
 2000be0:	5b 93 ff e0 	sw (sp+-32),r19
 2000be4:	5b 92 ff e4 	sw (sp+-28),r18
 2000be8:	5b 91 ff e8 	sw (sp+-24),r17
 2000bec:	5b 90 ff ec 	sw (sp+-20),r16
 2000bf0:	5b 8f ff f0 	sw (sp+-16),r15
 2000bf4:	5b 8e ff f4 	sw (sp+-12),r14
 2000bf8:	5b 8d ff f8 	sw (sp+-8),r13
 2000bfc:	5b 8c ff fc 	sw (sp+-4),r12
 2000c00:	5b 8b 00 00 	sw (sp+0),r11
 2000c04:	78 05 02 00 	mvhi r5,0x200
 2000c08:	38 a5 aa 98 	ori r5,r5,0xaa98
 2000c0c:	3c 84 00 02 	sli r4,r4,2
 2000c10:	b4 a4 20 00 	add r4,r5,r4
 2000c14:	58 9c 00 00 	sw (r4+0),sp
 2000c18:	58 62 00 00 	sw (r3+0),r2
 2000c1c:	3c 42 00 02 	sli r2,r2,2
 2000c20:	b4 a2 10 00 	add r2,r5,r2
 2000c24:	28 5c 00 00 	lw sp,(r2+0)
 2000c28:	2b 9d ff bc 	lw ra,(sp+-68)
 2000c2c:	2b 9b ff c0 	lw fp,(sp+-64)
 2000c30:	2b 9a ff c4 	lw gp,(sp+-60)
 2000c34:	2b 99 ff c8 	lw r25,(sp+-56)
 2000c38:	2b 98 ff cc 	lw r24,(sp+-52)
 2000c3c:	2b 97 ff d0 	lw r23,(sp+-48)
 2000c40:	2b 96 ff d4 	lw r22,(sp+-44)
 2000c44:	2b 95 ff d8 	lw r21,(sp+-40)
 2000c48:	2b 94 ff dc 	lw r20,(sp+-36)
 2000c4c:	2b 93 ff e0 	lw r19,(sp+-32)
 2000c50:	2b 92 ff e4 	lw r18,(sp+-28)
 2000c54:	2b 91 ff e8 	lw r17,(sp+-24)
 2000c58:	2b 90 ff ec 	lw r16,(sp+-20)
 2000c5c:	2b 8f ff f0 	lw r15,(sp+-16)
 2000c60:	2b 8e ff f4 	lw r14,(sp+-12)
 2000c64:	2b 8d ff f8 	lw r13,(sp+-8)
 2000c68:	2b 8c ff fc 	lw r12,(sp+-4)
 2000c6c:	2b 8b 00 00 	lw r11,(sp+0)

02000c70 <_end_change_stacks>:
 2000c70:	48 01 00 07 	bg r0,r1,2000c8c <_end_run_thread>
 2000c74:	37 9c ff fc 	addi sp,sp,-4
 2000c78:	5b 9d 00 04 	sw (sp+4),ra
 2000c7c:	f8 00 03 13 	calli 20018c8 <EE_std_run_task_code>
 2000c80:	2b 9d 00 04 	lw ra,(sp+4)
 2000c84:	37 9c 00 04 	addi sp,sp,4
 2000c88:	e3 ff ff c4 	bi 2000b98 <EE_std_change_context>

02000c8c <_end_run_thread>:
 2000c8c:	c3 a0 00 00 	ret

02000c90 <EE_IRQ_end_instance>:
   If the HAL allow IRQ nesting the C_end_instance should work as follows:
   - it must implement the preemption test only if it is the last IRQ on the stack
   - if there are other interrupts on the stack the IRQ end_instance should do nothing
*/
void EE_IRQ_end_instance(void)
{
 2000c90:	37 9c ff fc 	addi sp,sp,-4
 2000c94:	5b 9d 00 04 	sw (sp+4),ra

/* return the first ready task without extracting it */
#ifndef __PRIVATE_RQ_QUERYFIRST__
__INLINE__ EE_TID __ALWAYS_INLINE__ EE_rq_queryfirst(void)
{
    return EE_rqfirst;  
 2000c98:	78 01 02 00 	mvhi r1,0x200
 2000c9c:	38 21 a8 2c 	ori r1,r1,0xa82c
 2000ca0:	28 21 00 00 	lw r1,(r1+0)
    register EE_TID t;

    t = EE_rq_queryfirst();
    if (t != EE_NIL && EE_sys_ceiling < EE_th_ready_prio[t]) {
 2000ca4:	34 02 ff ff 	mvi r2,-1
 2000ca8:	44 22 00 22 	be r1,r2,2000d30 <EE_IRQ_end_instance+0xa0>
 2000cac:	3c 24 00 02 	sli r4,r1,2
 2000cb0:	78 01 02 00 	mvhi r1,0x200
 2000cb4:	38 21 a2 60 	ori r1,r1,0xa260
 2000cb8:	78 05 02 00 	mvhi r5,0x200
 2000cbc:	38 a5 b3 14 	ori r5,r5,0xb314
 2000cc0:	b4 24 08 00 	add r1,r1,r4
 2000cc4:	28 22 00 00 	lw r2,(r1+0)
 2000cc8:	28 a6 00 00 	lw r6,(r5+0)
 2000ccc:	50 c2 00 19 	bgeu r6,r2,2000d30 <EE_IRQ_end_instance+0xa0>
      register int flag;

      flag = EE_th_status[t] & EE_WASSTACKED;
#endif

      EE_sys_ceiling |= EE_th_dispatch_prio[t];
 2000cd0:	78 02 02 00 	mvhi r2,0x200
 2000cd4:	38 42 a2 64 	ori r2,r2,0xa264
    t = EE_rq_queryfirst();
    if (t != EE_NIL && EE_sys_ceiling < EE_th_ready_prio[t]) {
#if defined(__MULTI__)
      register int flag;

      flag = EE_th_status[t] & EE_WASSTACKED;
 2000cd8:	78 03 02 00 	mvhi r3,0x200
#endif

      EE_sys_ceiling |= EE_th_dispatch_prio[t];
 2000cdc:	b4 44 10 00 	add r2,r2,r4
    t = EE_rq_queryfirst();
    if (t != EE_NIL && EE_sys_ceiling < EE_th_ready_prio[t]) {
#if defined(__MULTI__)
      register int flag;

      flag = EE_th_status[t] & EE_WASSTACKED;
 2000ce0:	38 63 a8 20 	ori r3,r3,0xa820
 2000ce4:	b4 64 18 00 	add r3,r3,r4
#endif

      EE_sys_ceiling |= EE_th_dispatch_prio[t];
 2000ce8:	28 41 00 00 	lw r1,(r2+0)
    t = EE_rq_queryfirst();
    if (t != EE_NIL && EE_sys_ceiling < EE_th_ready_prio[t]) {
#if defined(__MULTI__)
      register int flag;

      flag = EE_th_status[t] & EE_WASSTACKED;
 2000cec:	28 64 00 00 	lw r4,(r3+0)
#endif

      EE_sys_ceiling |= EE_th_dispatch_prio[t];

#if defined(__MULTI__) || defined(__WITH_STATUS__)
      EE_th_status[t] = EE_STACKED;
 2000cf0:	34 02 00 02 	mvi r2,2
      register int flag;

      flag = EE_th_status[t] & EE_WASSTACKED;
#endif

      EE_sys_ceiling |= EE_th_dispatch_prio[t];
 2000cf4:	b8 26 08 00 	or r1,r1,r6
 2000cf8:	58 a1 00 00 	sw (r5+0),r1

#if defined(__MULTI__) || defined(__WITH_STATUS__)
      EE_th_status[t] = EE_STACKED;
 2000cfc:	58 62 00 00 	sw (r3+0),r2
    t = EE_rq_queryfirst();
    if (t != EE_NIL && EE_sys_ceiling < EE_th_ready_prio[t]) {
#if defined(__MULTI__)
      register int flag;

      flag = EE_th_status[t] & EE_WASSTACKED;
 2000d00:	20 84 00 08 	andi r4,r4,0x8
#if defined(__MULTI__) || defined(__WITH_STATUS__)
      EE_th_status[t] = EE_STACKED;
#endif

#if defined(__MULTI__)
      if (flag)
 2000d04:	44 80 00 17 	be r4,r0,2000d60 <EE_IRQ_end_instance+0xd0>
	EE_hal_IRQ_stacked(EE_rq2stk_exchange());
 2000d08:	f8 00 00 1d 	calli 2000d7c <EE_rq2stk_exchange>
}


__INLINE__ void __ALWAYS_INLINE__ EE_hal_endcycle_stacked(EE_TID tid)
{
    EE_std_endcycle_next_tid = EE_std_mark_tid_stacked(tid);
 2000d0c:	78 02 80 00 	mvhi r2,0x8000
 2000d10:	38 42 00 00 	ori r2,r2,0x0
 2000d14:	78 03 02 00 	mvhi r3,0x200
 2000d18:	b8 22 08 00 	or r1,r1,r2
 2000d1c:	38 63 b5 b8 	ori r3,r3,0xb5b8
 2000d20:	58 61 00 00 	sw (r3+0),r1
      EE_hal_IRQ_ready(EE_rq2stk_exchange());
#endif
    } else {
      EE_hal_IRQ_stacked(EE_stk_queryfirst());
    }
}
 2000d24:	2b 9d 00 04 	lw ra,(sp+4)
 2000d28:	37 9c 00 04 	addi sp,sp,4
 2000d2c:	c3 a0 00 00 	ret
 2000d30:	78 01 02 00 	mvhi r1,0x200
 2000d34:	38 21 a8 28 	ori r1,r1,0xa828
 2000d38:	28 23 00 00 	lw r3,(r1+0)
 2000d3c:	78 02 80 00 	mvhi r2,0x8000
 2000d40:	38 42 00 00 	ori r2,r2,0x0
 2000d44:	78 01 02 00 	mvhi r1,0x200
 2000d48:	b8 62 18 00 	or r3,r3,r2
 2000d4c:	38 21 b5 b8 	ori r1,r1,0xb5b8
 2000d50:	58 23 00 00 	sw (r1+0),r3
 2000d54:	2b 9d 00 04 	lw ra,(sp+4)
 2000d58:	37 9c 00 04 	addi sp,sp,4
 2000d5c:	c3 a0 00 00 	ret

#if defined(__MULTI__)
      if (flag)
	EE_hal_IRQ_stacked(EE_rq2stk_exchange());
      else
	EE_hal_IRQ_ready(EE_rq2stk_exchange());
 2000d60:	f8 00 00 07 	calli 2000d7c <EE_rq2stk_exchange>
}


__INLINE__ void __ALWAYS_INLINE__ EE_hal_endcycle_ready(EE_TID tid)
{
    EE_std_endcycle_next_tid = tid;
 2000d64:	78 02 02 00 	mvhi r2,0x200
 2000d68:	38 42 b5 b8 	ori r2,r2,0xb5b8
 2000d6c:	58 41 00 00 	sw (r2+0),r1
      EE_hal_IRQ_ready(EE_rq2stk_exchange());
#endif
    } else {
      EE_hal_IRQ_stacked(EE_stk_queryfirst());
    }
}
 2000d70:	2b 9d 00 04 	lw ra,(sp+4)
 2000d74:	37 9c 00 04 	addi sp,sp,4
 2000d78:	c3 a0 00 00 	ret

02000d7c <EE_rq2stk_exchange>:

#include "ee_internal.h"

#ifndef __PRIVATE_RQ2STK_EXCHANGE__
EE_TID EE_rq2stk_exchange(void)
{
 2000d7c:	78 04 02 00 	mvhi r4,0x200
 2000d80:	38 84 a8 2c 	ori r4,r4,0xa82c
 2000d84:	28 81 00 00 	lw r1,(r4+0)
  EE_TID temp;

  temp = EE_rqfirst;
  
  // extract the first task from the ready queue
  EE_rqfirst = EE_th_next[temp]; 
 2000d88:	78 02 02 00 	mvhi r2,0x200
 2000d8c:	38 42 a8 24 	ori r2,r2,0xa824
 2000d90:	3c 25 00 02 	sli r5,r1,2
  // insert the extracted task on the topo of the stack
  EE_th_next[temp] = EE_stkfirst;
 2000d94:	78 03 02 00 	mvhi r3,0x200
  EE_TID temp;

  temp = EE_rqfirst;
  
  // extract the first task from the ready queue
  EE_rqfirst = EE_th_next[temp]; 
 2000d98:	b4 45 10 00 	add r2,r2,r5
 2000d9c:	28 45 00 00 	lw r5,(r2+0)
  // insert the extracted task on the topo of the stack
  EE_th_next[temp] = EE_stkfirst;
 2000da0:	38 63 a8 28 	ori r3,r3,0xa828
  EE_TID temp;

  temp = EE_rqfirst;
  
  // extract the first task from the ready queue
  EE_rqfirst = EE_th_next[temp]; 
 2000da4:	58 85 00 00 	sw (r4+0),r5
  // insert the extracted task on the topo of the stack
  EE_th_next[temp] = EE_stkfirst;
 2000da8:	28 64 00 00 	lw r4,(r3+0)
  EE_stkfirst = temp;
 2000dac:	58 61 00 00 	sw (r3+0),r1
  temp = EE_rqfirst;
  
  // extract the first task from the ready queue
  EE_rqfirst = EE_th_next[temp]; 
  // insert the extracted task on the topo of the stack
  EE_th_next[temp] = EE_stkfirst;
 2000db0:	58 44 00 00 	sw (r2+0),r4
  EE_stkfirst = temp;

  return temp;
}
 2000db4:	c3 a0 00 00 	ret

02000db8 <EE_fp_ActivateTask>:
#include "ee_internal.h"

#ifndef __PRIVATE_ACTIVATETASK__

void EE_fp_ActivateTask(EE_TID t)
{
 2000db8:	37 9c ff ec 	addi sp,sp,-20
 2000dbc:	5b 8b 00 14 	sw (sp+20),r11
 2000dc0:	5b 8c 00 10 	sw (sp+16),r12
 2000dc4:	5b 8d 00 0c 	sw (sp+12),r13
 2000dc8:	5b 8e 00 08 	sw (sp+8),r14
 2000dcc:	5b 9d 00 04 	sw (sp+4),ra
 2000dd0:	b8 20 20 00 	mv r4,r1
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2000dd4:	90 00 70 00 	rcsr r14,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2000dd8:	34 01 ff fe 	mvi r1,-2
 2000ddc:	a1 c1 08 00 	and r1,r14,r1
 2000de0:	d0 01 00 00 	wcsr IE,r1
#endif
    
    flag = EE_hal_begin_nested_primitive();
    
    /* check for first activation */
    if (EE_th_nact[t] == 0) {
 2000de4:	78 0b 02 00 	mvhi r11,0x200
 2000de8:	3c 8c 00 02 	sli r12,r4,2
 2000dec:	39 6b b5 28 	ori r11,r11,0xb528
 2000df0:	b5 6c 68 00 	add r13,r11,r12
 2000df4:	29 a3 00 00 	lw r3,(r13+0)
 2000df8:	44 60 00 37 	be r3,r0,2000ed4 <EE_fp_ActivateTask+0x11c>
#endif
      EE_rq_insert(t);
    }
    
    /* activate the task avoiding the counter wraparound */
    if (EE_th_nact[t] != EE_MAX_NACT)
 2000dfc:	34 01 ff ff 	mvi r1,-1
 2000e00:	44 61 00 04 	be r3,r1,2000e10 <EE_fp_ActivateTask+0x58>
      EE_th_nact[t] ++;
 2000e04:	b5 6c 10 00 	add r2,r11,r12
 2000e08:	34 61 00 01 	addi r1,r3,1
 2000e0c:	58 41 00 00 	sw (r2+0),r1
    
    /* check for preemption */
    if (!EE_hal_get_IRQ_nesting_level()) {
 2000e10:	78 01 02 00 	mvhi r1,0x200
 2000e14:	38 21 b5 b4 	ori r1,r1,0xb5b4
 2000e18:	28 22 00 00 	lw r2,(r1+0)
 2000e1c:	5c 40 00 22 	bne r2,r0,2000ea4 <EE_fp_ActivateTask+0xec>
 2000e20:	78 01 02 00 	mvhi r1,0x200
 2000e24:	38 21 a8 2c 	ori r1,r1,0xa82c
 2000e28:	28 21 00 00 	lw r1,(r1+0)
      tmp = EE_rq_queryfirst();
      if (tmp != EE_NIL) {
 2000e2c:	34 02 ff ff 	mvi r2,-1
 2000e30:	44 22 00 1d 	be r1,r2,2000ea4 <EE_fp_ActivateTask+0xec>
	if (EE_sys_ceiling < EE_th_ready_prio[tmp]) {
 2000e34:	3c 23 00 02 	sli r3,r1,2
 2000e38:	78 01 02 00 	mvhi r1,0x200
 2000e3c:	38 21 a2 60 	ori r1,r1,0xa260
 2000e40:	78 05 02 00 	mvhi r5,0x200
 2000e44:	38 a5 b3 14 	ori r5,r5,0xb314
 2000e48:	b4 23 08 00 	add r1,r1,r3
 2000e4c:	28 22 00 00 	lw r2,(r1+0)
 2000e50:	28 a6 00 00 	lw r6,(r5+0)
 2000e54:	50 c2 00 14 	bgeu r6,r2,2000ea4 <EE_fp_ActivateTask+0xec>
	  
#if defined(__MULTI__) || defined(__WITH_STATUS__)
	  EE_th_status[tmp] = EE_STACKED;
#endif
	  
	  EE_sys_ceiling |= EE_th_dispatch_prio[tmp];
 2000e58:	78 01 02 00 	mvhi r1,0x200
 2000e5c:	38 21 a2 64 	ori r1,r1,0xa264
      if (tmp != EE_NIL) {
	if (EE_sys_ceiling < EE_th_ready_prio[tmp]) {
#if defined(__MULTI__)
	  register int wasstacked;
	  
	  wasstacked = EE_th_status[tmp] & EE_WASSTACKED;
 2000e60:	78 02 02 00 	mvhi r2,0x200
	  
#if defined(__MULTI__) || defined(__WITH_STATUS__)
	  EE_th_status[tmp] = EE_STACKED;
#endif
	  
	  EE_sys_ceiling |= EE_th_dispatch_prio[tmp];
 2000e64:	b4 23 08 00 	add r1,r1,r3
      if (tmp != EE_NIL) {
	if (EE_sys_ceiling < EE_th_ready_prio[tmp]) {
#if defined(__MULTI__)
	  register int wasstacked;
	  
	  wasstacked = EE_th_status[tmp] & EE_WASSTACKED;
 2000e68:	38 42 a8 20 	ori r2,r2,0xa820
 2000e6c:	b4 43 10 00 	add r2,r2,r3
	  
#if defined(__MULTI__) || defined(__WITH_STATUS__)
	  EE_th_status[tmp] = EE_STACKED;
#endif
	  
	  EE_sys_ceiling |= EE_th_dispatch_prio[tmp];
 2000e70:	28 23 00 00 	lw r3,(r1+0)
      if (tmp != EE_NIL) {
	if (EE_sys_ceiling < EE_th_ready_prio[tmp]) {
#if defined(__MULTI__)
	  register int wasstacked;
	  
	  wasstacked = EE_th_status[tmp] & EE_WASSTACKED;
 2000e74:	28 44 00 00 	lw r4,(r2+0)
#endif
	  
#if defined(__MULTI__) || defined(__WITH_STATUS__)
	  EE_th_status[tmp] = EE_STACKED;
 2000e78:	34 01 00 02 	mvi r1,2
#endif
	  
	  EE_sys_ceiling |= EE_th_dispatch_prio[tmp];
 2000e7c:	b8 66 18 00 	or r3,r3,r6
	  
	  wasstacked = EE_th_status[tmp] & EE_WASSTACKED;
#endif
	  
#if defined(__MULTI__) || defined(__WITH_STATUS__)
	  EE_th_status[tmp] = EE_STACKED;
 2000e80:	58 41 00 00 	sw (r2+0),r1
#endif
	  
	  EE_sys_ceiling |= EE_th_dispatch_prio[tmp];
 2000e84:	58 a3 00 00 	sw (r5+0),r3
      if (tmp != EE_NIL) {
	if (EE_sys_ceiling < EE_th_ready_prio[tmp]) {
#if defined(__MULTI__)
	  register int wasstacked;
	  
	  wasstacked = EE_th_status[tmp] & EE_WASSTACKED;
 2000e88:	20 84 00 08 	andi r4,r4,0x8
#endif
	  
	  EE_sys_ceiling |= EE_th_dispatch_prio[tmp];
	  
#if defined(__MULTI__)
	  if (wasstacked)
 2000e8c:	44 80 00 1b 	be r4,r0,2000ef8 <EE_fp_ActivateTask+0x140>
	    EE_hal_stkchange(EE_rq2stk_exchange());
 2000e90:	fb ff ff bb 	calli 2000d7c <EE_rq2stk_exchange>
#define EE_std_need_context_change(tid) (((tid) >= 0) || \
(EE_hal_active_tos != EE_std_thread_tos[tid+1]))

__INLINE__ void __ALWAYS_INLINE__ EE_hal_stkchange(EE_TID tid)
{
    EE_std_change_context(EE_std_mark_tid_stacked(tid));
 2000e94:	78 02 80 00 	mvhi r2,0x8000
 2000e98:	38 42 00 00 	ori r2,r2,0x0
 2000e9c:	b8 22 08 00 	or r1,r1,r2
 2000ea0:	fb ff ff 3e 	calli 2000b98 <EE_std_change_context>

/* Called as _last_ function of a primitive that can be called in
   an IRQ and in a task.  Enable IRQs if they were enabled before entering. */
__INLINE__ void __ALWAYS_INLINE__ EE_hal_end_nested_primitive(EE_FREG f)
{
    if (EE_mico32_are_IRQs_enabled(f))
 2000ea4:	21 c1 00 01 	andi r1,r14,0x1
 2000ea8:	44 20 00 04 	be r1,r0,2000eb8 <EE_fp_ActivateTask+0x100>
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_enableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2000eac:	90 00 08 00 	rcsr r1,IE
    newie = oldie | (0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2000eb0:	38 21 00 01 	ori r1,r1,0x1
 2000eb4:	d0 01 00 00 	wcsr IE,r1
    EE_hal_end_nested_primitive(flag);
    
#ifdef __RN_TASK__
  }
#endif
}
 2000eb8:	2b 9d 00 04 	lw ra,(sp+4)
 2000ebc:	2b 8b 00 14 	lw r11,(sp+20)
 2000ec0:	2b 8c 00 10 	lw r12,(sp+16)
 2000ec4:	2b 8d 00 0c 	lw r13,(sp+12)
 2000ec8:	2b 8e 00 08 	lw r14,(sp+8)
 2000ecc:	37 9c 00 14 	addi sp,sp,20
 2000ed0:	c3 a0 00 00 	ret
    flag = EE_hal_begin_nested_primitive();
    
    /* check for first activation */
    if (EE_th_nact[t] == 0) {
#if defined(__MULTI__) || defined(__WITH_STATUS__)
      EE_th_status[t] = EE_READY;
 2000ed4:	78 02 02 00 	mvhi r2,0x200
 2000ed8:	38 42 a8 20 	ori r2,r2,0xa820
 2000edc:	34 03 00 01 	mvi r3,1
 2000ee0:	b4 4c 10 00 	add r2,r2,r12
 2000ee4:	58 43 00 00 	sw (r2+0),r3
#endif
      EE_rq_insert(t);
 2000ee8:	b8 80 08 00 	mv r1,r4
 2000eec:	f8 00 02 8d 	calli 2001920 <EE_rq_insert>
 2000ef0:	29 a3 00 00 	lw r3,(r13+0)
 2000ef4:	e3 ff ff c2 	bi 2000dfc <EE_fp_ActivateTask+0x44>
	  
#if defined(__MULTI__)
	  if (wasstacked)
	    EE_hal_stkchange(EE_rq2stk_exchange());
	  else
	    EE_hal_ready2stacked(EE_rq2stk_exchange());
 2000ef8:	fb ff ff a1 	calli 2000d7c <EE_rq2stk_exchange>
 * version, all the stack-related stuff is ignored. */


__INLINE__ void EE_hal_ready2stacked(EE_TID tid)
{
    EE_std_change_context(tid);
 2000efc:	fb ff ff 27 	calli 2000b98 <EE_std_change_context>
 2000f00:	e3 ff ff e9 	bi 2000ea4 <EE_fp_ActivateTask+0xec>

02000f04 <EE_hal_uart_enable_tx_ISR>:
	
	return EE_UART_OK;
}

int EE_hal_uart_enable_tx_ISR(EE_uart_st* usp)
{
 2000f04:	28 25 00 08 	lw r5,(r1+8)
	unsigned int intst, mode = usp->mode;;
 2000f08:	28 23 00 04 	lw r3,(r1+4)
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2000f0c:	90 00 20 00 	rcsr r4,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2000f10:	34 01 ff fe 	mvi r1,-2
 2000f14:	a0 81 08 00 	and r1,r4,r1
 2000f18:	d0 01 00 00 	wcsr IE,r1
	MicoUart_t *uartc = usp->base; 
	
	intst = EE_mico32_disableIRQ();				
	ee_uart_tip = 1;								// transmission in progress...
 2000f1c:	78 02 02 00 	mvhi r2,0x200
 2000f20:	34 01 00 01 	mvi r1,1
 2000f24:	38 42 b3 1c 	ori r2,r2,0xb31c
 2000f28:	58 41 00 00 	sw (r2+0),r1
	if(EE_uart_enabled_rx_int(mode))
 2000f2c:	a0 61 18 00 	and r3,r3,r1
 2000f30:	44 60 00 0a 	be r3,r0,2000f58 <EE_hal_uart_enable_tx_ISR+0x54>
		uartc->ier = (volatile unsigned int)(MICOUART_IER_RX_INT_MASK | MICOUART_IER_TX_INT_MASK);
 2000f34:	34 01 00 03 	mvi r1,3
 2000f38:	58 a1 00 04 	sw (r5+4),r1
	else
		uartc->ier = (volatile unsigned int)(MICOUART_IER_TX_INT_MASK);	// Enable interrupts to empty the tx buffer...
	if (EE_mico32_are_IRQs_enabled(intst))		
 2000f3c:	20 81 00 01 	andi r1,r4,0x1
 2000f40:	44 20 00 04 	be r1,r0,2000f50 <EE_hal_uart_enable_tx_ISR+0x4c>
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_enableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2000f44:	90 00 08 00 	rcsr r1,IE
    newie = oldie | (0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2000f48:	38 21 00 01 	ori r1,r1,0x1
 2000f4c:	d0 01 00 00 	wcsr IE,r1
	   	EE_mico32_enableIRQ();
	   	
	return EE_UART_OK;	
}
 2000f50:	34 01 00 00 	mvi r1,0
 2000f54:	c3 a0 00 00 	ret
	intst = EE_mico32_disableIRQ();				
	ee_uart_tip = 1;								// transmission in progress...
	if(EE_uart_enabled_rx_int(mode))
		uartc->ier = (volatile unsigned int)(MICOUART_IER_RX_INT_MASK | MICOUART_IER_TX_INT_MASK);
	else
		uartc->ier = (volatile unsigned int)(MICOUART_IER_TX_INT_MASK);	// Enable interrupts to empty the tx buffer...
 2000f58:	34 01 00 02 	mvi r1,2
 2000f5c:	58 a1 00 04 	sw (r5+4),r1
 2000f60:	e3 ff ff f7 	bi 2000f3c <EE_hal_uart_enable_tx_ISR+0x38>

02000f64 <EE_hal_uart_write_buffer>:
	- isr mode:
		- blocking mode: wait if a transmission is in progress or if buffer is full, return the number of bytes loaded (should be loaded all characters...)
		- no-blocking mode: no wait if buffer is full or if a transmission is in progress, return the number of bytes loaded
*/
int EE_hal_uart_write_buffer(EE_uart_st* usp, EE_UINT8 *vet, int len)
{
 2000f64:	37 9c ff dc 	addi sp,sp,-36
 2000f68:	5b 8b 00 24 	sw (sp+36),r11
 2000f6c:	5b 8c 00 20 	sw (sp+32),r12
 2000f70:	5b 8d 00 1c 	sw (sp+28),r13
 2000f74:	5b 8e 00 18 	sw (sp+24),r14
 2000f78:	5b 8f 00 14 	sw (sp+20),r15
 2000f7c:	5b 90 00 10 	sw (sp+16),r16
 2000f80:	5b 91 00 0c 	sw (sp+12),r17
 2000f84:	5b 92 00 08 	sw (sp+8),r18
 2000f88:	5b 9d 00 04 	sw (sp+4),ra
	int ret,i;
  
	MicoUart_t *uartc = usp->base; 
	
	buffer = &usp->txbuf;
	mode = usp->mode;
 2000f8c:	28 25 00 04 	lw r5,(r1+4)
	- isr mode:
		- blocking mode: wait if a transmission is in progress or if buffer is full, return the number of bytes loaded (should be loaded all characters...)
		- no-blocking mode: no wait if buffer is full or if a transmission is in progress, return the number of bytes loaded
*/
int EE_hal_uart_write_buffer(EE_uart_st* usp, EE_UINT8 *vet, int len)
{
 2000f90:	b8 20 60 00 	mv r12,r1
 2000f94:	b8 40 78 00 	mv r15,r2
	MicoUart_t *uartc = usp->base; 
	
	buffer = &usp->txbuf;
	mode = usp->mode;
	
	if( EE_uart_tx_polling(mode) )							// TX POLLING MODE
 2000f98:	20 a1 00 02 	andi r1,r5,0x2
	- isr mode:
		- blocking mode: wait if a transmission is in progress or if buffer is full, return the number of bytes loaded (should be loaded all characters...)
		- no-blocking mode: no wait if buffer is full or if a transmission is in progress, return the number of bytes loaded
*/
int EE_hal_uart_write_buffer(EE_uart_st* usp, EE_UINT8 *vet, int len)
{
 2000f9c:	b8 60 70 00 	mv r14,r3
	unsigned int uiValue, mode;
	EE_buffer* buffer;
	int ret,i;
  
	MicoUart_t *uartc = usp->base; 
 2000fa0:	29 84 00 08 	lw r4,(r12+8)
	
	buffer = &usp->txbuf;
 2000fa4:	35 90 00 30 	addi r16,r12,48
	mode = usp->mode;
	
	if( EE_uart_tx_polling(mode) )							// TX POLLING MODE
 2000fa8:	44 20 00 0f 	be r1,r0,2000fe4 <EE_hal_uart_write_buffer+0x80>
		}
		ret = len;											// all bytes transmitted... 
	}
	else
	{	// if there is no transmission in progress or there is a transmission in progress but we are in blocking mode
		if( !ee_uart_tip || (ee_uart_tip && EE_uart_tx_block(mode)) )
 2000fac:	78 0d 02 00 	mvhi r13,0x200
 2000fb0:	39 ad b3 1c 	ori r13,r13,0xb31c
 2000fb4:	29 a1 00 00 	lw r1,(r13+0)
 2000fb8:	5c 20 00 35 	bne r1,r0,200108c <EE_hal_uart_write_buffer+0x128>
		{																																			
			while(ee_uart_tip)
 2000fbc:	29 a1 00 00 	lw r1,(r13+0)
 2000fc0:	5c 20 ff ff 	bne r1,r0,2000fbc <EE_hal_uart_write_buffer+0x58>
				;								// wait until transmission is finished...
			for(i=0; i<len; i++)
 2000fc4:	b8 20 58 00 	mv r11,r1
				if(ret == EE_BUF_OK)						// byte loaded in the tx buffer... 
					usp->err = ret; 
				else
				{
					usp->err = EE_UART_ERR_TX_BUF_FULL;
					if(!EE_uart_tx_block(mode))
 2000fc8:	20 b1 00 20 	andi r17,r5,0x20
				ret = EE_buffer_putmsg(buffer, vet+i);
				if(ret == EE_BUF_OK)						// byte loaded in the tx buffer... 
					usp->err = ret; 
				else
				{
					usp->err = EE_UART_ERR_TX_BUF_FULL;
 2000fcc:	34 12 ff f9 	mvi r18,-7
	{	// if there is no transmission in progress or there is a transmission in progress but we are in blocking mode
		if( !ee_uart_tip || (ee_uart_tip && EE_uart_tx_block(mode)) )
		{																																			
			while(ee_uart_tip)
				;								// wait until transmission is finished...
			for(i=0; i<len; i++)
 2000fd0:	49 c1 00 24 	bg r14,r1,2001060 <EE_hal_uart_write_buffer+0xfc>
						while(ee_uart_tip)
							;								// wait until transmission is finished...
					}
				}
			}
			EE_hal_uart_enable_tx_ISR(usp);					// enable tx interrupt
 2000fd4:	b9 80 08 00 	mv r1,r12
 2000fd8:	fb ff ff cb 	calli 2000f04 <EE_hal_uart_enable_tx_ISR>
 2000fdc:	b9 60 08 00 	mv r1,r11
 2000fe0:	e0 00 00 0d 	bi 2001014 <EE_hal_uart_write_buffer+0xb0>
	buffer = &usp->txbuf;
	mode = usp->mode;
	
	if( EE_uart_tx_polling(mode) )							// TX POLLING MODE
	{							
		for(i=0; i<len; i++)
 2000fe4:	4c 23 00 1d 	bge r1,r3,2001058 <EE_hal_uart_write_buffer+0xf4>
 2000fe8:	b8 20 18 00 	mv r3,r1
    				break;
				}
				else if(i==0)
				{											// if TX is not ready because another task uses tx buffer...
					usp->err = EE_UART_ERR_TX_NOT_READY;
					if(!EE_uart_tx_block(mode))				// no bytes transmitted, operation failed...
 2000fec:	20 a5 00 20 	andi r5,r5,0x20
		{
			do
			{
				/* if uart's ready to accept character, send immediately */
    			uiValue = uartc->lsr;
    			if(uiValue & MICOUART_LSR_TX_RDY_MASK)
 2000ff0:	b8 20 38 00 	mv r7,r1
    				usp->err = EE_UART_OK;
    				break;
				}
				else if(i==0)
				{											// if TX is not ready because another task uses tx buffer...
					usp->err = EE_UART_ERR_TX_NOT_READY;
 2000ff4:	34 06 ff f6 	mvi r6,-10
		for(i=0; i<len; i++)
		{
			do
			{
				/* if uart's ready to accept character, send immediately */
    			uiValue = uartc->lsr;
 2000ff8:	28 81 00 14 	lw r1,(r4+20)
    			if(uiValue & MICOUART_LSR_TX_RDY_MASK)
 2000ffc:	20 21 00 20 	andi r1,r1,0x20
 2001000:	5c 20 00 10 	bne r1,r0,2001040 <EE_hal_uart_write_buffer+0xdc>
    				uartc->rxtx = vet[i];					// byte loaded in the uart tx buffer
    				ret = 1;
    				usp->err = EE_UART_OK;
    				break;
				}
				else if(i==0)
 2001004:	5c 61 ff fd 	bne r3,r1,2000ff8 <EE_hal_uart_write_buffer+0x94>
				{											// if TX is not ready because another task uses tx buffer...
					usp->err = EE_UART_ERR_TX_NOT_READY;
 2001008:	59 86 00 00 	sw (r12+0),r6
					if(!EE_uart_tx_block(mode))				// no bytes transmitted, operation failed...
 200100c:	5c a3 ff fb 	bne r5,r3,2000ff8 <EE_hal_uart_write_buffer+0x94>
 2001010:	b8 c0 08 00 	mv r1,r6
		}
	}
	
	// All done!!!
	return ret;
}
 2001014:	2b 9d 00 04 	lw ra,(sp+4)
 2001018:	2b 8b 00 24 	lw r11,(sp+36)
 200101c:	2b 8c 00 20 	lw r12,(sp+32)
 2001020:	2b 8d 00 1c 	lw r13,(sp+28)
 2001024:	2b 8e 00 18 	lw r14,(sp+24)
 2001028:	2b 8f 00 14 	lw r15,(sp+20)
 200102c:	2b 90 00 10 	lw r16,(sp+16)
 2001030:	2b 91 00 0c 	lw r17,(sp+12)
 2001034:	2b 92 00 08 	lw r18,(sp+8)
 2001038:	37 9c 00 24 	addi sp,sp,36
 200103c:	c3 a0 00 00 	ret
			{
				/* if uart's ready to accept character, send immediately */
    			uiValue = uartc->lsr;
    			if(uiValue & MICOUART_LSR_TX_RDY_MASK)
				{
    				uartc->rxtx = vet[i];					// byte loaded in the uart tx buffer
 2001040:	b5 e3 08 00 	add r1,r15,r3
 2001044:	40 22 00 00 	lbu r2,(r1+0)
	buffer = &usp->txbuf;
	mode = usp->mode;
	
	if( EE_uart_tx_polling(mode) )							// TX POLLING MODE
	{							
		for(i=0; i<len; i++)
 2001048:	34 63 00 01 	addi r3,r3,1
			{
				/* if uart's ready to accept character, send immediately */
    			uiValue = uartc->lsr;
    			if(uiValue & MICOUART_LSR_TX_RDY_MASK)
				{
    				uartc->rxtx = vet[i];					// byte loaded in the uart tx buffer
 200104c:	58 82 00 00 	sw (r4+0),r2
    				ret = 1;
    				usp->err = EE_UART_OK;
 2001050:	59 87 00 00 	sw (r12+0),r7
	buffer = &usp->txbuf;
	mode = usp->mode;
	
	if( EE_uart_tx_polling(mode) )							// TX POLLING MODE
	{							
		for(i=0; i<len; i++)
 2001054:	49 c3 ff e9 	bg r14,r3,2000ff8 <EE_hal_uart_write_buffer+0x94>
			EE_hal_uart_enable_tx_ISR(usp);					// enable tx interrupt
	        ret = i;										// number of bytes loaded in the tx buffer
		}
		else												// there is a transmission in progress and we are in non blocking mode
		{
			usp->err = EE_UART_ERR_TX_NOT_READY;
 2001058:	b9 c0 08 00 	mv r1,r14
 200105c:	e3 ff ff ee 	bi 2001014 <EE_hal_uart_write_buffer+0xb0>
		{																																			
			while(ee_uart_tip)
				;								// wait until transmission is finished...
			for(i=0; i<len; i++)
			{
				ret = EE_buffer_putmsg(buffer, vet+i);
 2001060:	ba 00 08 00 	mv r1,r16
 2001064:	b5 eb 10 00 	add r2,r15,r11
 2001068:	f8 00 01 b5 	calli 200173c <EE_buffer_putmsg>
				if(ret == EE_BUF_OK)						// byte loaded in the tx buffer... 
 200106c:	5c 20 00 0d 	bne r1,r0,20010a0 <EE_hal_uart_write_buffer+0x13c>
					usp->err = ret; 
 2001070:	59 81 00 00 	sw (r12+0),r1
	{	// if there is no transmission in progress or there is a transmission in progress but we are in blocking mode
		if( !ee_uart_tip || (ee_uart_tip && EE_uart_tx_block(mode)) )
		{																																			
			while(ee_uart_tip)
				;								// wait until transmission is finished...
			for(i=0; i<len; i++)
 2001074:	35 6b 00 01 	addi r11,r11,1
 2001078:	49 cb ff fa 	bg r14,r11,2001060 <EE_hal_uart_write_buffer+0xfc>
						while(ee_uart_tip)
							;								// wait until transmission is finished...
					}
				}
			}
			EE_hal_uart_enable_tx_ISR(usp);					// enable tx interrupt
 200107c:	b9 80 08 00 	mv r1,r12
 2001080:	fb ff ff a1 	calli 2000f04 <EE_hal_uart_enable_tx_ISR>
 2001084:	b9 60 08 00 	mv r1,r11
 2001088:	e3 ff ff e3 	bi 2001014 <EE_hal_uart_write_buffer+0xb0>
		}
		ret = len;											// all bytes transmitted... 
	}
	else
	{	// if there is no transmission in progress or there is a transmission in progress but we are in blocking mode
		if( !ee_uart_tip || (ee_uart_tip && EE_uart_tx_block(mode)) )
 200108c:	29 a1 00 00 	lw r1,(r13+0)
 2001090:	5c 20 00 0c 	bne r1,r0,20010c0 <EE_hal_uart_write_buffer+0x15c>
			EE_hal_uart_enable_tx_ISR(usp);					// enable tx interrupt
	        ret = i;										// number of bytes loaded in the tx buffer
		}
		else												// there is a transmission in progress and we are in non blocking mode
		{
			usp->err = EE_UART_ERR_TX_NOT_READY;
 2001094:	34 01 ff f6 	mvi r1,-10
 2001098:	59 81 00 00 	sw (r12+0),r1
 200109c:	e3 ff ff de 	bi 2001014 <EE_hal_uart_write_buffer+0xb0>
				ret = EE_buffer_putmsg(buffer, vet+i);
				if(ret == EE_BUF_OK)						// byte loaded in the tx buffer... 
					usp->err = ret; 
				else
				{
					usp->err = EE_UART_ERR_TX_BUF_FULL;
 20010a0:	59 92 00 00 	sw (r12+0),r18
					if(!EE_uart_tx_block(mode))
 20010a4:	46 20 ff cc 	be r17,r0,2000fd4 <EE_hal_uart_write_buffer+0x70>
						break;
					else
					{
						i--;											// restore the previous character...
						EE_hal_uart_enable_tx_ISR(usp);					// enable tx interrupt
 20010a8:	b9 80 08 00 	mv r1,r12
 20010ac:	fb ff ff 96 	calli 2000f04 <EE_hal_uart_enable_tx_ISR>
						while(ee_uart_tip)
 20010b0:	29 a1 00 00 	lw r1,(r13+0)
 20010b4:	5c 20 ff ff 	bne r1,r0,20010b0 <EE_hal_uart_write_buffer+0x14c>
					usp->err = EE_UART_ERR_TX_BUF_FULL;
					if(!EE_uart_tx_block(mode))
						break;
					else
					{
						i--;											// restore the previous character...
 20010b8:	35 6b ff ff 	addi r11,r11,-1
 20010bc:	e3 ff ff ee 	bi 2001074 <EE_hal_uart_write_buffer+0x110>
		}
		ret = len;											// all bytes transmitted... 
	}
	else
	{	// if there is no transmission in progress or there is a transmission in progress but we are in blocking mode
		if( !ee_uart_tip || (ee_uart_tip && EE_uart_tx_block(mode)) )
 20010c0:	20 a1 00 20 	andi r1,r5,0x20
 20010c4:	44 20 ff f4 	be r1,r0,2001094 <EE_hal_uart_write_buffer+0x130>
 20010c8:	e3 ff ff bd 	bi 2000fbc <EE_hal_uart_write_buffer+0x58>

020010cc <EE_hal_uart_config>:
	return EE_UART_OK;
}

/* This function configures UART baudrate and other features (parity, stop bits...) */
int EE_hal_uart_config(EE_uart_st* usp, int baudrate, int settings)
{
 20010cc:	37 9c ff ec 	addi sp,sp,-20
 20010d0:	5b 8b 00 14 	sw (sp+20),r11
 20010d4:	5b 8c 00 10 	sw (sp+16),r12
 20010d8:	5b 8d 00 0c 	sw (sp+12),r13
 20010dc:	5b 8e 00 08 	sw (sp+8),r14
 20010e0:	5b 9d 00 04 	sw (sp+4),ra
	unsigned int iir;
	MicoUart_t *uartc = usp->base; 
 20010e4:	28 2b 00 08 	lw r11,(r1+8)
	
	/* reset ier (isr register) */
    uartc->ier = 0;						// if ier==0 -> POLLING MODE (ATT! is a blocking mode!!!)
 20010e8:	34 0d 00 00 	mvi r13,0
	return EE_UART_OK;
}

/* This function configures UART baudrate and other features (parity, stop bits...) */
int EE_hal_uart_config(EE_uart_st* usp, int baudrate, int settings)
{
 20010ec:	b8 40 70 00 	mv r14,r2
	unsigned int iir;
	MicoUart_t *uartc = usp->base; 
	
	/* reset ier (isr register) */
    uartc->ier = 0;						// if ier==0 -> POLLING MODE (ATT! is a blocking mode!!!)
 20010f0:	59 6d 00 04 	sw (r11+4),r13
/******************************************************************************/
/* This function records ISR handler */
int EE_hal_uart_handler_setup(EE_uart_st* usp)
{
    /* Register IRQ handler */
    EE_mico32_register_ISR(usp->irqf, EE_uart_common_handler);	 
 20010f4:	28 21 00 0c 	lw r1,(r1+12)
	return EE_UART_OK;
}

/* This function configures UART baudrate and other features (parity, stop bits...) */
int EE_hal_uart_config(EE_uart_st* usp, int baudrate, int settings)
{
 20010f8:	b8 60 60 00 	mv r12,r3
/******************************************************************************/
/* This function records ISR handler */
int EE_hal_uart_handler_setup(EE_uart_st* usp)
{
    /* Register IRQ handler */
    EE_mico32_register_ISR(usp->irqf, EE_uart_common_handler);	 
 20010fc:	78 02 02 00 	mvhi r2,0x200
	MicoUart_t *uartc = usp->base; 
	
	/* reset ier (isr register) */
    uartc->ier = 0;						// if ier==0 -> POLLING MODE (ATT! is a blocking mode!!!)
    									// if ier!=0 -> ISR MODE (ATT! is not a blocking mode!!!)
    iir = uartc->iir;					// read iir register to clean ISR flags.	FARE PROVA!!!
 2001100:	29 63 00 08 	lw r3,(r11+8)
/******************************************************************************/
/* This function records ISR handler */
int EE_hal_uart_handler_setup(EE_uart_st* usp)
{
    /* Register IRQ handler */
    EE_mico32_register_ISR(usp->irqf, EE_uart_common_handler);	 
 2001104:	38 42 11 44 	ori r2,r2,0x1144
 2001108:	fb ff fe 4d 	calli 2000a3c <EE_mico32_register_ISR>
	/* Register IRQ handler */
    EE_hal_uart_handler_setup(usp);
	/* set the control register */
    uartc->lcr = settings;    
    /* Calculate clock-divisor */
    uartc->div = (MICO32_CPU_CLOCK_MHZ)/baudrate;
 200110c:	78 01 02 06 	mvhi r1,0x206
    									// if ier!=0 -> ISR MODE (ATT! is not a blocking mode!!!)
    iir = uartc->iir;					// read iir register to clean ISR flags.	FARE PROVA!!!
	/* Register IRQ handler */
    EE_hal_uart_handler_setup(usp);
	/* set the control register */
    uartc->lcr = settings;    
 2001110:	59 6c 00 0c 	sw (r11+12),r12
    /* Calculate clock-divisor */
    uartc->div = (MICO32_CPU_CLOCK_MHZ)/baudrate;
 2001114:	b9 c0 10 00 	mv r2,r14
 2001118:	38 21 cc 80 	ori r1,r1,0xcc80
 200111c:	f8 00 21 66 	calli 20096b4 <__divsi3>
 2001120:	59 61 00 1c 	sw (r11+28),r1
    
    /* ISR management */
    return EE_UART_OK;	//EE_uart_set_ISR_callback_base(base, irq_flag, ie_flag, isr_rx_callback, isr_tx_callback);
}
 2001124:	b9 a0 08 00 	mv r1,r13
 2001128:	2b 9d 00 04 	lw ra,(sp+4)
 200112c:	2b 8b 00 14 	lw r11,(sp+20)
 2001130:	2b 8c 00 10 	lw r12,(sp+16)
 2001134:	2b 8d 00 0c 	lw r13,(sp+12)
 2001138:	2b 8e 00 08 	lw r14,(sp+8)
 200113c:	37 9c 00 14 	addi sp,sp,20
 2001140:	c3 a0 00 00 	ret

02001144 <EE_uart_common_handler>:
/******************************************************************************/
/*                              ISRs                                          */
/******************************************************************************/
// Interrupt common handler:
void EE_uart_common_handler(int level)
{
 2001144:	37 9c ff e4 	addi sp,sp,-28
 2001148:	5b 8b 00 18 	sw (sp+24),r11
 200114c:	5b 8c 00 14 	sw (sp+20),r12
 2001150:	5b 8d 00 10 	sw (sp+16),r13
 2001154:	5b 8e 00 0c 	sw (sp+12),r14
 2001158:	5b 8f 00 08 	sw (sp+8),r15
 200115c:	5b 9d 00 04 	sw (sp+4),ra
    unsigned int spint;
    int ret;
    EE_UINT8 data = 0;
    
    EE_uart_st *usp = EE_get_uart_st_from_level(level);
    MicoUart_t *uartc = usp->base; 
 2001160:	78 0e 02 00 	mvhi r14,0x200
 2001164:	39 ce aa a0 	ori r14,r14,0xaaa0
 2001168:	29 cb 00 08 	lw r11,(r14+8)
void EE_uart_common_handler(int level)
{
    unsigned int iir;
    unsigned int spint;
    int ret;
    EE_UINT8 data = 0;
 200116c:	34 01 00 00 	mvi r1,0
 2001170:	33 81 00 1f 	sb (sp+31),r1
    
    EE_uart_st *usp = EE_get_uart_st_from_level(level);
    MicoUart_t *uartc = usp->base; 

    /* interrogate interrupt-cause */
    iir = uartc->iir;
 2001174:	29 62 00 08 	lw r2,(r11+8)
    
    /* check the interrupt source */
    switch(iir){
 2001178:	34 01 00 02 	mvi r1,2
 200117c:	44 41 00 0b 	be r2,r1,20011a8 <EE_uart_common_handler+0x64>
 2001180:	34 01 00 04 	mvi r1,4
 2001184:	44 41 00 31 	be r2,r1,2001248 <EE_uart_common_handler+0x104>
             */
        }break;
    }

    return;
}
 2001188:	2b 9d 00 04 	lw ra,(sp+4)
 200118c:	2b 8b 00 18 	lw r11,(sp+24)
 2001190:	2b 8c 00 14 	lw r12,(sp+20)
 2001194:	2b 8d 00 10 	lw r13,(sp+16)
 2001198:	2b 8e 00 0c 	lw r14,(sp+12)
 200119c:	2b 8f 00 08 	lw r15,(sp+8)
 20011a0:	37 9c 00 1c 	addi sp,sp,28
 20011a4:	c3 a0 00 00 	ret
 20011a8:	35 cc 00 30 	addi r12,r14,48
        }break;
        case MICOUART_IIR_TXRDY:	/* the interrupt is due to tx-data */
		{
			spint = 1;
			/* Loop to empty the buffer */
			while(!EE_buffer_isempty(&(usp->txbuf)))
 20011ac:	b9 80 08 00 	mv r1,r12

    /* interrogate interrupt-cause */
    iir = uartc->iir;
    
    /* check the interrupt source */
    switch(iir){
 20011b0:	34 0d 00 01 	mvi r13,1
		{
			spint = 1;
			/* Loop to empty the buffer */
			while(!EE_buffer_isempty(&(usp->txbuf)))
			{
				EE_buffer_getmsg(&(usp->txbuf), &data);
 20011b4:	37 8f 00 1f 	addi r15,sp,31
        }break;
        case MICOUART_IIR_TXRDY:	/* the interrupt is due to tx-data */
		{
			spint = 1;
			/* Loop to empty the buffer */
			while(!EE_buffer_isempty(&(usp->txbuf)))
 20011b8:	f8 00 01 4e 	calli 20016f0 <EE_buffer_isempty>
 20011bc:	5c 20 00 0d 	bne r1,r0,20011f0 <EE_uart_common_handler+0xac>
			{
				EE_buffer_getmsg(&(usp->txbuf), &data);
 20011c0:	b9 80 08 00 	mv r1,r12
 20011c4:	b9 e0 10 00 	mv r2,r15
 20011c8:	f8 00 01 8f 	calli 2001804 <EE_buffer_getmsg>
				while( !((uartc->lsr) & MICOUART_LSR_TX_RDY_MASK) )
 20011cc:	29 61 00 14 	lw r1,(r11+20)
 20011d0:	20 21 00 20 	andi r1,r1,0x20
 20011d4:	44 20 ff fe 	be r1,r0,20011cc <EE_uart_common_handler+0x88>
					;	
				uartc->rxtx = data;
 20011d8:	43 81 00 1f 	lbu r1,(sp+31)
				if(spint) spint = 0;	// is not a spurious interrupt...
 20011dc:	34 0d 00 00 	mvi r13,0
			while(!EE_buffer_isempty(&(usp->txbuf)))
			{
				EE_buffer_getmsg(&(usp->txbuf), &data);
				while( !((uartc->lsr) & MICOUART_LSR_TX_RDY_MASK) )
					;	
				uartc->rxtx = data;
 20011e0:	59 61 00 00 	sw (r11+0),r1
        }break;
        case MICOUART_IIR_TXRDY:	/* the interrupt is due to tx-data */
		{
			spint = 1;
			/* Loop to empty the buffer */
			while(!EE_buffer_isempty(&(usp->txbuf)))
 20011e4:	b9 80 08 00 	mv r1,r12
 20011e8:	f8 00 01 42 	calli 20016f0 <EE_buffer_isempty>
 20011ec:	44 20 ff f5 	be r1,r0,20011c0 <EE_uart_common_handler+0x7c>
				if(spint) spint = 0;	// is not a spurious interrupt...
			}
			
			/* To avoid interrupt is again asserted by the UART after reading the IIR register, 
	   		   we must to disable TX isr-source. NOTE: Could start spurious tx interrupt... */
	   		if(EE_uart_enabled_rx_int(usp->mode))
 20011f0:	29 c1 00 04 	lw r1,(r14+4)
 20011f4:	20 21 00 01 	andi r1,r1,0x1
 20011f8:	5c 20 00 26 	bne r1,r0,2001290 <EE_uart_common_handler+0x14c>
	   			uartc->ier = (volatile unsigned int)(MICOUART_IER_RX_INT_MASK);
	   		else
				uartc->ier = 0;
 20011fc:	59 61 00 04 	sw (r11+4),r1
			ee_uart_tip = 0;							// transmission not in progress...
				
			/* Call user Callback (not for spurious interrupt...) */
	       	if( (usp->txcbk != EE_NULL_CBK) && (!spint) )
 2001200:	29 c5 00 14 	lw r5,(r14+20)
 2001204:	65 a4 00 00 	cmpei r4,r13,0
	   		   we must to disable TX isr-source. NOTE: Could start spurious tx interrupt... */
	   		if(EE_uart_enabled_rx_int(usp->mode))
	   			uartc->ier = (volatile unsigned int)(MICOUART_IER_RX_INT_MASK);
	   		else
				uartc->ier = 0;
			ee_uart_tip = 0;							// transmission not in progress...
 2001208:	78 01 02 00 	mvhi r1,0x200
				
			/* Call user Callback (not for spurious interrupt...) */
	       	if( (usp->txcbk != EE_NULL_CBK) && (!spint) )
 200120c:	7c a3 00 00 	cmpnei r3,r5,0
	   		   we must to disable TX isr-source. NOTE: Could start spurious tx interrupt... */
	   		if(EE_uart_enabled_rx_int(usp->mode))
	   			uartc->ier = (volatile unsigned int)(MICOUART_IER_RX_INT_MASK);
	   		else
				uartc->ier = 0;
			ee_uart_tip = 0;							// transmission not in progress...
 2001210:	38 21 b3 1c 	ori r1,r1,0xb31c
 2001214:	34 02 00 00 	mvi r2,0
 2001218:	58 22 00 00 	sw (r1+0),r2
				
			/* Call user Callback (not for spurious interrupt...) */
	       	if( (usp->txcbk != EE_NULL_CBK) && (!spint) )
 200121c:	a0 64 18 00 	and r3,r3,r4
 2001220:	44 62 ff da 	be r3,r2,2001188 <EE_uart_common_handler+0x44>
            	usp->txcbk();
 2001224:	d8 a0 00 00 	call r5
             */
        }break;
    }

    return;
}
 2001228:	2b 9d 00 04 	lw ra,(sp+4)
 200122c:	2b 8b 00 18 	lw r11,(sp+24)
 2001230:	2b 8c 00 14 	lw r12,(sp+20)
 2001234:	2b 8d 00 10 	lw r13,(sp+16)
 2001238:	2b 8e 00 0c 	lw r14,(sp+12)
 200123c:	2b 8f 00 08 	lw r15,(sp+8)
 2001240:	37 9c 00 1c 	addi sp,sp,28
 2001244:	c3 a0 00 00 	ret
	         * read lsr to check for errors associated with current word. 
	         * reading lsr clears error bits 
	         */
            //lsr = uartc->lsr;
            //if((lsr & (MICOUART_LSR_PE_MASK | MICOUART_LSR_FE_MASK)) == 0) if(uiValue & MICOUART_LSR_RX_RDY_MASK)
            data = uartc->rxtx;
 2001248:	29 63 00 00 	lw r3,(r11+0)
            ret = EE_buffer_putmsg(&(usp->rxbuf), &data);
 200124c:	37 82 00 1f 	addi r2,sp,31
 2001250:	35 c1 00 18 	addi r1,r14,24
	         * read lsr to check for errors associated with current word. 
	         * reading lsr clears error bits 
	         */
            //lsr = uartc->lsr;
            //if((lsr & (MICOUART_LSR_PE_MASK | MICOUART_LSR_FE_MASK)) == 0) if(uiValue & MICOUART_LSR_RX_RDY_MASK)
            data = uartc->rxtx;
 2001254:	33 83 00 1f 	sb (sp+31),r3
            ret = EE_buffer_putmsg(&(usp->rxbuf), &data);
 2001258:	f8 00 01 39 	calli 200173c <EE_buffer_putmsg>
            if(ret==EE_BUF_ERR_FULL) 
 200125c:	34 02 ff fe 	mvi r2,-2
 2001260:	44 22 00 0f 	be r1,r2,200129c <EE_uart_common_handler+0x158>
				usp->err = EE_UART_ERR_RX_BUF_FULL;  
            /* Call user Callback */
            if(usp->rxcbk != EE_NULL_CBK)
 2001264:	29 c1 00 10 	lw r1,(r14+16)
 2001268:	44 20 ff c8 	be r1,r0,2001188 <EE_uart_common_handler+0x44>
            	usp->rxcbk();
 200126c:	d8 20 00 00 	call r1
             */
        }break;
    }

    return;
}
 2001270:	2b 9d 00 04 	lw ra,(sp+4)
 2001274:	2b 8b 00 18 	lw r11,(sp+24)
 2001278:	2b 8c 00 14 	lw r12,(sp+20)
 200127c:	2b 8d 00 10 	lw r13,(sp+16)
 2001280:	2b 8e 00 0c 	lw r14,(sp+12)
 2001284:	2b 8f 00 08 	lw r15,(sp+8)
 2001288:	37 9c 00 1c 	addi sp,sp,28
 200128c:	c3 a0 00 00 	ret
			}
			
			/* To avoid interrupt is again asserted by the UART after reading the IIR register, 
	   		   we must to disable TX isr-source. NOTE: Could start spurious tx interrupt... */
	   		if(EE_uart_enabled_rx_int(usp->mode))
	   			uartc->ier = (volatile unsigned int)(MICOUART_IER_RX_INT_MASK);
 2001290:	34 01 00 01 	mvi r1,1
 2001294:	59 61 00 04 	sw (r11+4),r1
 2001298:	e3 ff ff da 	bi 2001200 <EE_uart_common_handler+0xbc>
            //lsr = uartc->lsr;
            //if((lsr & (MICOUART_LSR_PE_MASK | MICOUART_LSR_FE_MASK)) == 0) if(uiValue & MICOUART_LSR_RX_RDY_MASK)
            data = uartc->rxtx;
            ret = EE_buffer_putmsg(&(usp->rxbuf), &data);
            if(ret==EE_BUF_ERR_FULL) 
				usp->err = EE_UART_ERR_RX_BUF_FULL;  
 200129c:	34 01 ff fb 	mvi r1,-5
 20012a0:	59 c1 00 00 	sw (r14+0),r1
 20012a4:	e3 ff ff f0 	bi 2001264 <EE_uart_common_handler+0x120>

020012a8 <EE_hal_i2c_write_byte_polling>:

    return EE_I2C_OK;
}
				
int EE_hal_i2c_write_byte_polling(OCI2CMDev_t* i2cc, EE_UINT8 device, EE_UINT8 address, EE_UINT8 data)
{
 20012a8:	b8 20 28 00 	mv r5,r1
 20012ac:	20 42 00 ff 	andi r2,r2,0xff
 20012b0:	20 63 00 ff 	andi r3,r3,0xff
 20012b4:	20 84 00 ff 	andi r4,r4,0xff
		Return values:
			- the return values can be:	1 if i2c bus is idle else 0	
*/	
__INLINE__ int __ALWAYS_INLINE__ EE_hal_i2c_idle(OCI2CMDev_t* i2cc)
{
	return EE_i2c_bus_idle(i2cc->StatusCommand);
 20012b8:	28 a1 00 10 	lw r1,(r5+16)
	int ret;

	while( !EE_hal_i2c_idle(i2cc) )
 20012bc:	20 21 00 40 	andi r1,r1,0x40
 20012c0:	5c 20 ff fe 	bne r1,r0,20012b8 <EE_hal_i2c_write_byte_polling+0x10>
		;
	/* load address, set-up a write to write the device address out to the bus */
	i2cc->Data = (device & ~EE_I2C_RW_MASK);
 20012c4:	20 41 00 fe 	andi r1,r2,0xfe
 20012c8:	58 a1 00 0c 	sw (r5+12),r1
	/* initiate a start (repeated) and write out the address */
	i2cc->StatusCommand = (OCI2CM_CMD_START | OCI2CM_CMD_WRITE);
 20012cc:	34 02 00 90 	mvi r2,144
 20012d0:	58 a2 00 10 	sw (r5+16),r2
	/* wait for transfer to complete */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20012d4:	28 a1 00 10 	lw r1,(r5+16)
 20012d8:	20 22 00 02 	andi r2,r1,0x2
 20012dc:	5c 40 ff fe 	bne r2,r0,20012d4 <EE_hal_i2c_write_byte_polling+0x2c>
	/* check if ack is received */
	if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 20012e0:	28 a1 00 10 	lw r1,(r5+16)
 20012e4:	34 06 ff ee 	mvi r6,-18
 20012e8:	20 21 00 80 	andi r1,r1,0x80
 20012ec:	5c 22 00 1a 	bne r1,r2,2001354 <EE_hal_i2c_write_byte_polling+0xac>
		ret = EE_I2C_ERR_DEV_ACK;
	else
	{
		/* load address, set-up a write to write the address out to the bus */
		i2cc->Data = (unsigned int)address;
 20012f0:	58 a3 00 0c 	sw (r5+12),r3
		/* write the data out to the bus */
		i2cc->StatusCommand = OCI2CM_CMD_WRITE;
 20012f4:	34 01 00 10 	mvi r1,16
 20012f8:	58 a1 00 10 	sw (r5+16),r1
		/* wait for transfer to complete */
		EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20012fc:	28 a1 00 10 	lw r1,(r5+16)
 2001300:	20 22 00 02 	andi r2,r1,0x2
 2001304:	5c 40 ff fe 	bne r2,r0,20012fc <EE_hal_i2c_write_byte_polling+0x54>
		/* check if ack is received */
		if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 2001308:	28 a1 00 10 	lw r1,(r5+16)
 200130c:	34 06 ff f1 	mvi r6,-15
 2001310:	20 21 00 80 	andi r1,r1,0x80
 2001314:	5c 22 00 10 	bne r1,r2,2001354 <EE_hal_i2c_write_byte_polling+0xac>
			ret = EE_I2C_ERR_ADD_ACK;
		else
		{
	  		/* load data in register */
	    	i2cc->Data = (unsigned int)data;
 2001318:	58 a4 00 0c 	sw (r5+12),r4
	    	/* write the data out to the bus */
	    	i2cc->StatusCommand = OCI2CM_CMD_WRITE;
 200131c:	34 01 00 10 	mvi r1,16
 2001320:	58 a1 00 10 	sw (r5+16),r1
	    	/* wait for current transfer to complete */
	    	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001324:	28 a1 00 10 	lw r1,(r5+16)
 2001328:	20 22 00 02 	andi r2,r1,0x2
 200132c:	5c 40 ff fe 	bne r2,r0,2001324 <EE_hal_i2c_write_byte_polling+0x7c>
	    	/* check for ack  and if arb was lost during this transaction */
	    	if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 2001330:	28 a1 00 10 	lw r1,(r5+16)
 2001334:	34 06 ff f0 	mvi r6,-16
 2001338:	20 23 00 80 	andi r3,r1,0x80
 200133c:	5c 62 00 06 	bne r3,r2,2001354 <EE_hal_i2c_write_byte_polling+0xac>
	        	ret = EE_I2C_ERR_DATA_ACK;
	    	else if( i2cc->StatusCommand & OCI2CM_STATUS_ARB_LOST )
 2001340:	28 a1 00 10 	lw r1,(r5+16)
 2001344:	34 06 ff ef 	mvi r6,-17
 2001348:	20 21 00 20 	andi r1,r1,0x20
 200134c:	5c 23 00 02 	bne r1,r3,2001354 <EE_hal_i2c_write_byte_polling+0xac>
 2001350:	b8 20 30 00 	mv r6,r1
			else
				ret = EE_I2C_OK;
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001354:	28 a1 00 10 	lw r1,(r5+16)
 2001358:	20 21 00 02 	andi r1,r1,0x2
 200135c:	5c 20 ff fe 	bne r1,r0,2001354 <EE_hal_i2c_write_byte_polling+0xac>
    i2cc->StatusCommand = OCI2CM_CMD_STOP;
 2001360:	34 01 00 40 	mvi r1,64
 2001364:	58 a1 00 10 	sw (r5+16),r1
	
	return ret;	
}
 2001368:	b8 c0 08 00 	mv r1,r6
 200136c:	c3 a0 00 00 	ret

02001370 <EE_hal_i2c_read_byte_polling>:

int EE_hal_i2c_read_byte_polling(OCI2CMDev_t* i2cc, EE_UINT8 device, EE_UINT8 address)
{
 2001370:	b8 20 20 00 	mv r4,r1
 2001374:	20 45 00 ff 	andi r5,r2,0xff
 2001378:	20 63 00 ff 	andi r3,r3,0xff
 200137c:	28 81 00 10 	lw r1,(r4+16)
	int ret;

	while( !EE_hal_i2c_idle(i2cc) )
 2001380:	20 21 00 40 	andi r1,r1,0x40
 2001384:	5c 20 ff fe 	bne r1,r0,200137c <EE_hal_i2c_read_byte_polling+0xc>
		;
	/* load device address, set-up a write to write the device address out to the bus */
	i2cc->Data = (device & ~EE_I2C_RW_MASK);					// AFTER WRITE
 2001388:	20 a1 00 fe 	andi r1,r5,0xfe
 200138c:	58 81 00 0c 	sw (r4+12),r1
	/* initiate a start (repeated) and write out the address */
	i2cc->StatusCommand = (OCI2CM_CMD_START | OCI2CM_CMD_WRITE);
 2001390:	34 02 00 90 	mvi r2,144
 2001394:	58 82 00 10 	sw (r4+16),r2
	/* wait for transfer to complete */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001398:	28 81 00 10 	lw r1,(r4+16)
 200139c:	20 22 00 02 	andi r2,r1,0x2
 20013a0:	5c 40 ff fe 	bne r2,r0,2001398 <EE_hal_i2c_read_byte_polling+0x28>
	/* check if ack is received */
	if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 20013a4:	28 81 00 10 	lw r1,(r4+16)
 20013a8:	20 21 00 80 	andi r1,r1,0x80
 20013ac:	5c 22 00 26 	bne r1,r2,2001444 <EE_hal_i2c_read_byte_polling+0xd4>
		ret = EE_I2C_ERR_DEV_ACK;
	else
	{
		/* load address, set-up a write to write the address out to the bus */
		i2cc->Data = (unsigned int)address;
 20013b0:	58 83 00 0c 	sw (r4+12),r3
		/* write the data out to the bus */
		i2cc->StatusCommand = OCI2CM_CMD_WRITE;
 20013b4:	34 01 00 10 	mvi r1,16
 20013b8:	58 81 00 10 	sw (r4+16),r1
		/* wait for transfer to complete */
		EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20013bc:	28 81 00 10 	lw r1,(r4+16)
 20013c0:	20 23 00 02 	andi r3,r1,0x2
 20013c4:	5c 60 ff fe 	bne r3,r0,20013bc <EE_hal_i2c_read_byte_polling+0x4c>
		/* check if ack is received */
		if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 20013c8:	28 81 00 10 	lw r1,(r4+16)
 20013cc:	34 02 ff f1 	mvi r2,-15
 20013d0:	20 21 00 80 	andi r1,r1,0x80
 20013d4:	5c 23 00 15 	bne r1,r3,2001428 <EE_hal_i2c_read_byte_polling+0xb8>
			ret = EE_I2C_ERR_ADD_ACK;
		else
		{
			/* load device address, set-up a write to write the device address out to the bus */
			i2cc->Data = (device | EE_I2C_RW_MASK );			// AFTER READ
 20013d8:	38 a1 00 01 	ori r1,r5,0x1
 20013dc:	58 81 00 0c 	sw (r4+12),r1
			/* initiate a start (repeated) and write out the address */
			i2cc->StatusCommand = (OCI2CM_CMD_START | OCI2CM_CMD_WRITE);
 20013e0:	34 02 00 90 	mvi r2,144
 20013e4:	58 82 00 10 	sw (r4+16),r2
			/* wait for transfer to complete */
			EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20013e8:	28 81 00 10 	lw r1,(r4+16)
 20013ec:	20 22 00 02 	andi r2,r1,0x2
 20013f0:	5c 40 ff fe 	bne r2,r0,20013e8 <EE_hal_i2c_read_byte_polling+0x78>
			/* check if ack is received */
			if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 20013f4:	28 81 00 10 	lw r1,(r4+16)
 20013f8:	20 21 00 80 	andi r1,r1,0x80
 20013fc:	5c 22 00 12 	bne r1,r2,2001444 <EE_hal_i2c_read_byte_polling+0xd4>
				ret = EE_I2C_ERR_DEV_ACK;
			else
			{
				/* issue a read with a NACK */
	   			i2cc->StatusCommand = (OCI2CM_CMD_READ | OCI2CM_CMD_NACK);
 2001400:	34 01 00 28 	mvi r1,40
 2001404:	58 81 00 10 	sw (r4+16),r1
	   			/* wait till transfer is in progress */
	   			EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001408:	28 81 00 10 	lw r1,(r4+16)
 200140c:	20 23 00 02 	andi r3,r1,0x2
 2001410:	5c 60 ff fe 	bne r3,r0,2001408 <EE_hal_i2c_read_byte_polling+0x98>
	   			/* read data */
	   			ret = i2cc->Data;
 2001414:	28 82 00 0c 	lw r2,(r4+12)
	   			/* check for ack  and if arb was lost during this transaction */
	   			if( i2cc->StatusCommand & OCI2CM_STATUS_ARB_LOST )
 2001418:	28 81 00 10 	lw r1,(r4+16)
 200141c:	20 21 00 20 	andi r1,r1,0x20
 2001420:	44 23 00 02 	be r1,r3,2001428 <EE_hal_i2c_read_byte_polling+0xb8>
 2001424:	34 02 ff ef 	mvi r2,-17
		       	 	ret = EE_I2C_ERR_ARB_LOST;
			}
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001428:	28 81 00 10 	lw r1,(r4+16)
 200142c:	20 21 00 02 	andi r1,r1,0x2
 2001430:	5c 20 ff fe 	bne r1,r0,2001428 <EE_hal_i2c_read_byte_polling+0xb8>
    i2cc->StatusCommand = OCI2CM_CMD_STOP;
 2001434:	34 01 00 40 	mvi r1,64
 2001438:	58 81 00 10 	sw (r4+16),r1
		
	return ret;
}
 200143c:	b8 40 08 00 	mv r1,r2
 2001440:	c3 a0 00 00 	ret
		       	 	ret = EE_I2C_ERR_ARB_LOST;
			}
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001444:	28 81 00 10 	lw r1,(r4+16)
				/* issue a read with a NACK */
	   			i2cc->StatusCommand = (OCI2CM_CMD_READ | OCI2CM_CMD_NACK);
	   			/* wait till transfer is in progress */
	   			EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
	   			/* read data */
	   			ret = i2cc->Data;
 2001448:	34 02 ff ee 	mvi r2,-18
		       	 	ret = EE_I2C_ERR_ARB_LOST;
			}
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 200144c:	20 21 00 02 	andi r1,r1,0x2
 2001450:	5c 20 ff f6 	bne r1,r0,2001428 <EE_hal_i2c_read_byte_polling+0xb8>
 2001454:	e3 ff ff f8 	bi 2001434 <EE_hal_i2c_read_byte_polling+0xc4>

02001458 <EE_hal_i2c_write_buffer_polling>:
		
	return ret;
}

int EE_hal_i2c_write_buffer_polling(OCI2CMDev_t* i2cc, EE_UINT8 device, EE_UINT8 address, EE_UINT8 *data, int len)
{
 2001458:	b8 20 30 00 	mv r6,r1
 200145c:	20 42 00 ff 	andi r2,r2,0xff
 2001460:	20 63 00 ff 	andi r3,r3,0xff
 2001464:	28 c1 00 10 	lw r1,(r6+16)
	int i;
	int ret;
	
	while( !EE_hal_i2c_idle(i2cc) )
 2001468:	20 21 00 40 	andi r1,r1,0x40
 200146c:	5c 20 ff fe 	bne r1,r0,2001464 <EE_hal_i2c_write_buffer_polling+0xc>
		;
	/* load device address, set-up a write to write the device address out to the bus */
    i2cc->Data = (device & ~EE_I2C_RW_MASK);			// AFTER WRITE
 2001470:	20 41 00 fe 	andi r1,r2,0xfe
 2001474:	58 c1 00 0c 	sw (r6+12),r1
    /* initiate a start (repeated) and write out the address */
    i2cc->StatusCommand = (OCI2CM_CMD_START | OCI2CM_CMD_WRITE);
 2001478:	34 02 00 90 	mvi r2,144
 200147c:	58 c2 00 10 	sw (r6+16),r2
    /* wait for transfer to complete */
    EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001480:	28 c1 00 10 	lw r1,(r6+16)
 2001484:	20 22 00 02 	andi r2,r1,0x2
 2001488:	5c 40 ff fe 	bne r2,r0,2001480 <EE_hal_i2c_write_buffer_polling+0x28>
    /* check if ack is received */
    if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 200148c:	28 c1 00 10 	lw r1,(r6+16)
 2001490:	34 07 ff ee 	mvi r7,-18
 2001494:	20 21 00 80 	andi r1,r1,0x80
 2001498:	5c 22 00 1c 	bne r1,r2,2001508 <EE_hal_i2c_write_buffer_polling+0xb0>
       	ret = EE_I2C_ERR_DEV_ACK;
    else
    {
		/* load device address, set-up a write to write the device address out to the bus */
    	i2cc->Data = (unsigned int)address;
 200149c:	58 c3 00 0c 	sw (r6+12),r3
    	/* initiate a start (repeated) and write out the address */
    	i2cc->StatusCommand = OCI2CM_CMD_WRITE;
 20014a0:	34 01 00 10 	mvi r1,16
 20014a4:	58 c1 00 10 	sw (r6+16),r1
    	/* wait for transfer to complete */
    	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20014a8:	28 c1 00 10 	lw r1,(r6+16)
 20014ac:	20 22 00 02 	andi r2,r1,0x2
 20014b0:	5c 40 ff fe 	bne r2,r0,20014a8 <EE_hal_i2c_write_buffer_polling+0x50>
    	/* check if ack is received */
    	if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 20014b4:	28 c1 00 10 	lw r1,(r6+16)
 20014b8:	34 07 ff f1 	mvi r7,-15
 20014bc:	20 21 00 80 	andi r1,r1,0x80
 20014c0:	5c 22 00 12 	bne r1,r2,2001508 <EE_hal_i2c_write_buffer_polling+0xb0>
       		ret = EE_I2C_ERR_ADD_ACK;
       	else
       	{
    		/* transfer the bytes */
    		for ( i = 0; i < len; i++)
 20014c4:	4c 25 00 0d 	bge r1,r5,20014f8 <EE_hal_i2c_write_buffer_polling+0xa0>
 20014c8:	b8 20 18 00 	mv r3,r1
    		{
        		/* load data in register */
        		i2cc->Data = (unsigned int)(data[i]);
        		/* write the data out to the bus  */
        		i2cc->StatusCommand = OCI2CM_CMD_WRITE;
 20014cc:	34 07 00 10 	mvi r7,16
       	{
    		/* transfer the bytes */
    		for ( i = 0; i < len; i++)
    		{
        		/* load data in register */
        		i2cc->Data = (unsigned int)(data[i]);
 20014d0:	b4 83 08 00 	add r1,r4,r3
 20014d4:	40 22 00 00 	lbu r2,(r1+0)
 20014d8:	58 c2 00 0c 	sw (r6+12),r2
        		/* write the data out to the bus  */
        		i2cc->StatusCommand = OCI2CM_CMD_WRITE;
 20014dc:	58 c7 00 10 	sw (r6+16),r7
        		/* wait for current transfer to complete */
        		EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20014e0:	28 c1 00 10 	lw r1,(r6+16)
 20014e4:	20 21 00 02 	andi r1,r1,0x2
 20014e8:	5c 20 ff fe 	bne r1,r0,20014e0 <EE_hal_i2c_write_buffer_polling+0x88>
        		/* check for ack */
        		if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 20014ec:	28 c1 00 10 	lw r1,(r6+16)
    	if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
       		ret = EE_I2C_ERR_ADD_ACK;
       	else
       	{
    		/* transfer the bytes */
    		for ( i = 0; i < len; i++)
 20014f0:	34 63 00 01 	addi r3,r3,1
 20014f4:	48 a3 ff f7 	bg r5,r3,20014d0 <EE_hal_i2c_write_buffer_polling+0x78>
        		/* check for ack */
        		if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
           			ret = EE_I2C_ERR_DATA_ACK;
    		}
    		/* see if arbitration was lost during this transaction */
    		if( i2cc->StatusCommand & OCI2CM_STATUS_ARB_LOST )
 20014f8:	28 c1 00 10 	lw r1,(r6+16)
 20014fc:	34 07 ff ef 	mvi r7,-17
 2001500:	20 21 00 20 	andi r1,r1,0x20
 2001504:	44 20 00 08 	be r1,r0,2001524 <EE_hal_i2c_write_buffer_polling+0xcc>
    		else	
        		ret = EE_I2C_OK;
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001508:	28 c1 00 10 	lw r1,(r6+16)
 200150c:	20 21 00 02 	andi r1,r1,0x2
 2001510:	5c 20 ff fe 	bne r1,r0,2001508 <EE_hal_i2c_write_buffer_polling+0xb0>
    i2cc->StatusCommand = OCI2CM_CMD_STOP;
 2001514:	34 01 00 40 	mvi r1,64
 2001518:	58 c1 00 10 	sw (r6+16),r1
    
	// All done!!!
	return ret;
}	
 200151c:	b8 e0 08 00 	mv r1,r7
 2001520:	c3 a0 00 00 	ret
        		/* check for ack */
        		if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
           			ret = EE_I2C_ERR_DATA_ACK;
    		}
    		/* see if arbitration was lost during this transaction */
    		if( i2cc->StatusCommand & OCI2CM_STATUS_ARB_LOST )
 2001524:	b8 20 38 00 	mv r7,r1
    		else	
        		ret = EE_I2C_OK;
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001528:	28 c1 00 10 	lw r1,(r6+16)
 200152c:	20 21 00 02 	andi r1,r1,0x2
 2001530:	5c 20 ff f6 	bne r1,r0,2001508 <EE_hal_i2c_write_buffer_polling+0xb0>
 2001534:	e3 ff ff f8 	bi 2001514 <EE_hal_i2c_write_buffer_polling+0xbc>

02001538 <EE_hal_i2c_read_buffer_polling>:
	// All done!!!
	return ret;
}	

int EE_hal_i2c_read_buffer_polling(OCI2CMDev_t* i2cc, EE_UINT8 device, EE_UINT8 address, EE_UINT8 *data, int len)
{
 2001538:	b8 20 30 00 	mv r6,r1
 200153c:	20 47 00 ff 	andi r7,r2,0xff
 2001540:	20 63 00 ff 	andi r3,r3,0xff
 2001544:	28 c1 00 10 	lw r1,(r6+16)
	int i;
	int ret;

	while( !EE_hal_i2c_idle(i2cc) )
 2001548:	20 21 00 40 	andi r1,r1,0x40
 200154c:	5c 20 ff fe 	bne r1,r0,2001544 <EE_hal_i2c_read_buffer_polling+0xc>
		;
	/* load device address, set-up a write to write the device address out to the bus */
	i2cc->Data = (device & ~EE_I2C_RW_MASK);			// AFTER WRITE 
 2001550:	20 e1 00 fe 	andi r1,r7,0xfe
 2001554:	58 c1 00 0c 	sw (r6+12),r1
	/* initiate a start (repeated) and write out the address */
	i2cc->StatusCommand = (OCI2CM_CMD_START | OCI2CM_CMD_WRITE);
 2001558:	34 02 00 90 	mvi r2,144
 200155c:	58 c2 00 10 	sw (r6+16),r2
	/* wait for transfer to complete */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001560:	28 c1 00 10 	lw r1,(r6+16)
 2001564:	20 22 00 02 	andi r2,r1,0x2
 2001568:	5c 40 ff fe 	bne r2,r0,2001560 <EE_hal_i2c_read_buffer_polling+0x28>
	/* check if ack is received */
	if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 200156c:	28 c1 00 10 	lw r1,(r6+16)
 2001570:	20 21 00 80 	andi r1,r1,0x80
 2001574:	5c 22 00 30 	bne r1,r2,2001634 <EE_hal_i2c_read_buffer_polling+0xfc>
		ret = EE_I2C_ERR_DEV_ACK;
	else
	{
		/* load device address, set-up a write to write the device address out to the bus */
    	i2cc->Data = (unsigned int)address;
 2001578:	58 c3 00 0c 	sw (r6+12),r3
    	/* initiate a start (repeated) and write out the address */
    	i2cc->StatusCommand = OCI2CM_CMD_WRITE;
 200157c:	34 01 00 10 	mvi r1,16
 2001580:	58 c1 00 10 	sw (r6+16),r1
    	/* wait for transfer to complete */
    	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001584:	28 c1 00 10 	lw r1,(r6+16)
 2001588:	20 22 00 02 	andi r2,r1,0x2
 200158c:	5c 40 ff fe 	bne r2,r0,2001584 <EE_hal_i2c_read_buffer_polling+0x4c>
    	/* check if ack is received */
    	if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 2001590:	28 c1 00 10 	lw r1,(r6+16)
 2001594:	34 03 ff f1 	mvi r3,-15
 2001598:	20 21 00 80 	andi r1,r1,0x80
 200159c:	5c 22 00 1f 	bne r1,r2,2001618 <EE_hal_i2c_read_buffer_polling+0xe0>
       		ret = EE_I2C_ERR_ADD_ACK;
       	else
       	{
			/* load device address, set-up a write to write the device address out to the bus */
			i2cc->Data = (device | EE_I2C_RW_MASK);		// AFTER READ
 20015a0:	38 e1 00 01 	ori r1,r7,0x1
 20015a4:	58 c1 00 0c 	sw (r6+12),r1
			/* initiate a start (repeated) and write out the address */
			i2cc->StatusCommand = (OCI2CM_CMD_START | OCI2CM_CMD_WRITE);
 20015a8:	34 02 00 90 	mvi r2,144
 20015ac:	58 c2 00 10 	sw (r6+16),r2
			/* wait for transfer to complete */
			EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20015b0:	28 c1 00 10 	lw r1,(r6+16)
 20015b4:	20 22 00 02 	andi r2,r1,0x2
 20015b8:	5c 40 ff fe 	bne r2,r0,20015b0 <EE_hal_i2c_read_buffer_polling+0x78>
			/* check if ack is received */
			if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
 20015bc:	28 c1 00 10 	lw r1,(r6+16)
 20015c0:	20 21 00 80 	andi r1,r1,0x80
 20015c4:	5c 22 00 1c 	bne r1,r2,2001634 <EE_hal_i2c_read_buffer_polling+0xfc>
				ret = EE_I2C_ERR_DEV_ACK;
			else
			{
				/* begin reading data */
		   		for (i = 0; i < len; i++)
 20015c8:	4c 25 00 0f 	bge r1,r5,2001604 <EE_hal_i2c_read_buffer_polling+0xcc>
 20015cc:	b8 20 18 00 	mv r3,r1
 20015d0:	34 a7 ff ff 	addi r7,r5,-1
		   		{
		       		/* read data; send ACK on all reads except the last one */
		       		if( i == (len - 1) )
		           		i2cc->StatusCommand = (OCI2CM_CMD_READ|OCI2CM_CMD_NACK);
		       		else
		           		i2cc->StatusCommand = (OCI2CM_CMD_READ|OCI2CM_CMD_ACK);	
 20015d4:	34 08 00 20 	mvi r8,32
				/* begin reading data */
		   		for (i = 0; i < len; i++)
		   		{
		       		/* read data; send ACK on all reads except the last one */
		       		if( i == (len - 1) )
		           		i2cc->StatusCommand = (OCI2CM_CMD_READ|OCI2CM_CMD_NACK);
 20015d8:	34 09 00 28 	mvi r9,40
			{
				/* begin reading data */
		   		for (i = 0; i < len; i++)
		   		{
		       		/* read data; send ACK on all reads except the last one */
		       		if( i == (len - 1) )
 20015dc:	44 e3 00 1b 	be r7,r3,2001648 <EE_hal_i2c_read_buffer_polling+0x110>
		           		i2cc->StatusCommand = (OCI2CM_CMD_READ|OCI2CM_CMD_NACK);
		       		else
		           		i2cc->StatusCommand = (OCI2CM_CMD_READ|OCI2CM_CMD_ACK);	
 20015e0:	58 c8 00 10 	sw (r6+16),r8
		       		/* wait while transfer is in progress */
		       		EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 20015e4:	28 c1 00 10 	lw r1,(r6+16)
 20015e8:	20 21 00 02 	andi r1,r1,0x2
 20015ec:	5c 20 ff fe 	bne r1,r0,20015e4 <EE_hal_i2c_read_buffer_polling+0xac>
		       		/* read data */
		       		data[i] = (EE_UINT8)(i2cc->Data);
 20015f0:	28 c2 00 0c 	lw r2,(r6+12)
 20015f4:	b4 83 08 00 	add r1,r4,r3
			if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
				ret = EE_I2C_ERR_DEV_ACK;
			else
			{
				/* begin reading data */
		   		for (i = 0; i < len; i++)
 20015f8:	34 63 00 01 	addi r3,r3,1
		       		else
		           		i2cc->StatusCommand = (OCI2CM_CMD_READ|OCI2CM_CMD_ACK);	
		       		/* wait while transfer is in progress */
		       		EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
		       		/* read data */
		       		data[i] = (EE_UINT8)(i2cc->Data);
 20015fc:	30 22 00 00 	sb (r1+0),r2
			if( i2cc->StatusCommand & OCI2CM_STATUS_RX_ACK )
				ret = EE_I2C_ERR_DEV_ACK;
			else
			{
				/* begin reading data */
		   		for (i = 0; i < len; i++)
 2001600:	48 a3 ff f7 	bg r5,r3,20015dc <EE_hal_i2c_read_buffer_polling+0xa4>
		       		EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
		       		/* read data */
		       		data[i] = (EE_UINT8)(i2cc->Data);
				}
				/* check for ack  and if arb was lost during this transaction */
				if( i2cc->StatusCommand & OCI2CM_STATUS_ARB_LOST )
 2001604:	28 c1 00 10 	lw r1,(r6+16)
 2001608:	34 03 ff ef 	mvi r3,-17
 200160c:	20 21 00 20 	andi r1,r1,0x20
 2001610:	5c 20 00 02 	bne r1,r0,2001618 <EE_hal_i2c_read_buffer_polling+0xe0>
 2001614:	b8 20 18 00 	mv r3,r1
	        		ret = EE_I2C_OK;	// return the number of bytes received... 
			}
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001618:	28 c1 00 10 	lw r1,(r6+16)
 200161c:	20 21 00 02 	andi r1,r1,0x2
 2001620:	5c 20 ff fe 	bne r1,r0,2001618 <EE_hal_i2c_read_buffer_polling+0xe0>
    i2cc->StatusCommand = OCI2CM_CMD_STOP;
 2001624:	34 01 00 40 	mvi r1,64
 2001628:	58 c1 00 10 	sw (r6+16),r1
		
	// All done!!!
	return ret;
}
 200162c:	b8 60 08 00 	mv r1,r3
 2001630:	c3 a0 00 00 	ret
	        		ret = EE_I2C_OK;	// return the number of bytes received... 
			}
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001634:	28 c1 00 10 	lw r1,(r6+16)
		       		EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
		       		/* read data */
		       		data[i] = (EE_UINT8)(i2cc->Data);
				}
				/* check for ack  and if arb was lost during this transaction */
				if( i2cc->StatusCommand & OCI2CM_STATUS_ARB_LOST )
 2001638:	34 03 ff ee 	mvi r3,-18
	        		ret = EE_I2C_OK;	// return the number of bytes received... 
			}
		}
	}
	/* stop signal */
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 200163c:	20 21 00 02 	andi r1,r1,0x2
 2001640:	5c 20 ff f6 	bne r1,r0,2001618 <EE_hal_i2c_read_buffer_polling+0xe0>
 2001644:	e3 ff ff f8 	bi 2001624 <EE_hal_i2c_read_buffer_polling+0xec>
				/* begin reading data */
		   		for (i = 0; i < len; i++)
		   		{
		       		/* read data; send ACK on all reads except the last one */
		       		if( i == (len - 1) )
		           		i2cc->StatusCommand = (OCI2CM_CMD_READ|OCI2CM_CMD_NACK);
 2001648:	58 c9 00 10 	sw (r6+16),r9
 200164c:	e3 ff ff e6 	bi 20015e4 <EE_hal_i2c_read_buffer_polling+0xac>

02001650 <EE_hal_i2c_config>:
}
															
#ifndef __USE_I2C_IRQ__

int EE_hal_i2c_config(OCI2CMDev_t* i2cc, int baudrate, int settings)
{
 2001650:	37 9c ff f4 	addi sp,sp,-12
 2001654:	5b 8b 00 0c 	sw (sp+12),r11
 2001658:	5b 8c 00 08 	sw (sp+8),r12
 200165c:	5b 9d 00 04 	sw (sp+4),ra
 2001660:	b8 20 58 00 	mv r11,r1
 2001664:	b8 40 28 00 	mv r5,r2
}

/* This function is used to send a stop condition on the bus */
int EE_hal_i2c_stop(OCI2CMDev_t* i2cc)		//note: stop condition manual or not???
{
	EE_i2c_pend_for_TIP_done(i2cc->StatusCommand);
 2001668:	29 61 00 10 	lw r1,(r11+16)
 200166c:	20 2c 00 02 	andi r12,r1,0x2
 2001670:	5d 80 ff fe 	bne r12,r0,2001668 <EE_hal_i2c_config+0x18>

    i2cc->StatusCommand = OCI2CM_CMD_STOP;
 2001674:	34 01 00 40 	mvi r1,64
 2001678:	59 61 00 10 	sw (r11+16),r1
	   command, or when the command register has the STO bit set. When halted during a
	   transfer, the core can hang the I2C bus.  
	*/	
	EE_hal_i2c_stop(i2cc);
	
	i2cc->Control &= ~OCI2CM_CTL_CORE_ENABLE; 
 200167c:	29 63 00 08 	lw r3,(r11+8)
 2001680:	34 01 ff 7f 	mvi r1,-129
{
	int prescale;
	
	EE_hal_i2c_disable(i2cc);		 
	EE_hal_i2c_disable_IRQ(i2cc);                       
	prescale = ((MICO32_CPU_CLOCK_MHZ/(5*baudrate)-1));
 2001684:	3c a2 00 02 	sli r2,r5,2
	   command, or when the command register has the STO bit set. When halted during a
	   transfer, the core can hang the I2C bus.  
	*/	
	EE_hal_i2c_stop(i2cc);
	
	i2cc->Control &= ~OCI2CM_CTL_CORE_ENABLE; 
 2001688:	a0 61 18 00 	and r3,r3,r1
 200168c:	59 63 00 08 	sw (r11+8),r3
		Return values:
			- the return values can be:	EE_I2C_OK 	
*/													
__INLINE__ int __ALWAYS_INLINE__ EE_hal_i2c_disable_IRQ(OCI2CMDev_t* i2cc)
{
	i2cc->Control &= ~OCI2CM_CTL_INT_ENABLE;
 2001690:	29 64 00 08 	lw r4,(r11+8)
 2001694:	34 03 ff bf 	mvi r3,-65
{
	int prescale;
	
	EE_hal_i2c_disable(i2cc);		 
	EE_hal_i2c_disable_IRQ(i2cc);                       
	prescale = ((MICO32_CPU_CLOCK_MHZ/(5*baudrate)-1));
 2001698:	78 01 02 06 	mvhi r1,0x206
 200169c:	a0 83 20 00 	and r4,r4,r3
 20016a0:	b4 45 10 00 	add r2,r2,r5
 20016a4:	59 64 00 08 	sw (r11+8),r4
 20016a8:	38 21 cc 80 	ori r1,r1,0xcc80
 20016ac:	f8 00 20 02 	calli 20096b4 <__divsi3>
 20016b0:	34 21 ff ff 	addi r1,r1,-1
	i2cc->PrescaleLo = prescale & 0xff;                               
    i2cc->PrescaleHi = prescale >> 8;                                          
 20016b4:	14 22 00 08 	sri r2,r1,8
	int prescale;
	
	EE_hal_i2c_disable(i2cc);		 
	EE_hal_i2c_disable_IRQ(i2cc);                       
	prescale = ((MICO32_CPU_CLOCK_MHZ/(5*baudrate)-1));
	i2cc->PrescaleLo = prescale & 0xff;                               
 20016b8:	20 21 00 ff 	andi r1,r1,0xff
 20016bc:	59 61 00 00 	sw (r11+0),r1
    i2cc->PrescaleHi = prescale >> 8;                                          
 20016c0:	59 62 00 04 	sw (r11+4),r2
    i2cc->Data = 0;                                               
 20016c4:	59 6c 00 0c 	sw (r11+12),r12
    i2cc->StatusCommand = 0;   
 20016c8:	59 6c 00 10 	sw (r11+16),r12
		Return values:
			- the return values can be:	EE_I2C_OK 	
*/														
__INLINE__ int __ALWAYS_INLINE__ EE_hal_i2c_enable(OCI2CMDev_t* i2cc)
{
	i2cc->Control |= OCI2CM_CTL_CORE_ENABLE;  
 20016cc:	29 62 00 08 	lw r2,(r11+8)
	EE_hal_i2c_enable(i2cc);	
	
	// All done!!!
	return EE_I2C_OK;

}
 20016d0:	b9 80 08 00 	mv r1,r12
 20016d4:	38 42 00 80 	ori r2,r2,0x80
 20016d8:	59 62 00 08 	sw (r11+8),r2
 20016dc:	2b 9d 00 04 	lw ra,(sp+4)
 20016e0:	2b 8b 00 0c 	lw r11,(sp+12)
 20016e4:	2b 8c 00 08 	lw r12,(sp+8)
 20016e8:	37 9c 00 0c 	addi sp,sp,12
 20016ec:	c3 a0 00 00 	ret

020016f0 <EE_buffer_isempty>:
  	// All done!!!
  	return EE_BUF_OK;	  	
}

int EE_buffer_isempty(EE_buffer *buf)
{
 20016f0:	b8 20 18 00 	mv r3,r1
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 20016f4:	90 00 20 00 	rcsr r4,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 20016f8:	34 01 ff fe 	mvi r1,-2
 20016fc:	a0 81 08 00 	and r1,r4,r1
 2001700:	d0 01 00 00 	wcsr IE,r1
	int retvalue;
	unsigned int intst;
	
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==0))
 2001704:	28 62 00 00 	lw r2,(r3+0)
 2001708:	28 61 00 04 	lw r1,(r3+4)
 200170c:	34 05 00 00 	mvi r5,0
 2001710:	44 41 00 08 	be r2,r1,2001730 <EE_buffer_isempty+0x40>
		retvalue = 1;
	else
		retvalue = 0; 	
	if (EE_mico32_are_IRQs_enabled(intst))		//EE_hal_enableIRQ();
 2001714:	20 81 00 01 	andi r1,r4,0x1
 2001718:	44 20 00 04 	be r1,r0,2001728 <EE_buffer_isempty+0x38>
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_enableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 200171c:	90 00 08 00 	rcsr r1,IE
    newie = oldie | (0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2001720:	38 21 00 01 	ori r1,r1,0x1
 2001724:	d0 01 00 00 	wcsr IE,r1
        EE_mico32_enableIRQ();
	
	return retvalue;	
}
 2001728:	b8 a0 08 00 	mv r1,r5
 200172c:	c3 a0 00 00 	ret
{
	int retvalue;
	unsigned int intst;
	
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==0))
 2001730:	28 61 00 08 	lw r1,(r3+8)
 2001734:	64 25 00 00 	cmpei r5,r1,0
 2001738:	e3 ff ff f7 	bi 2001714 <EE_buffer_isempty+0x24>

0200173c <EE_buffer_putmsg>:
		
	return retvalue;	
}

int EE_buffer_putmsg(EE_buffer *buf, EE_UINT8* msg)
{
 200173c:	b8 40 30 00 	mv r6,r2
 2001740:	b8 20 28 00 	mv r5,r1
	int retvalue;
	int i=0;
	unsigned int intst;
	
	if(msg==NULL)
 2001744:	34 04 ff fc 	mvi r4,-4
 2001748:	44 40 00 25 	be r2,r0,20017dc <EE_buffer_putmsg+0xa0>
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 200174c:	90 00 38 00 	rcsr r7,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2001750:	34 01 ff fe 	mvi r1,-2
 2001754:	a0 e1 08 00 	and r1,r7,r1
 2001758:	d0 01 00 00 	wcsr IE,r1
		return EE_BUF_ERR_NULL;
	
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==buf->buf_size))
 200175c:	28 a3 00 04 	lw r3,(r5+4)
 2001760:	28 a1 00 00 	lw r1,(r5+0)
 2001764:	44 23 00 20 	be r1,r3,20017e4 <EE_buffer_putmsg+0xa8>
		retvalue = EE_BUF_ERR_FULL;
	else
	{ 	
		for(i=0;i<(buf->msg_size);i++)	
 2001768:	28 a2 00 0c 	lw r2,(r5+12)
 200176c:	4c 02 00 0f 	bge r0,r2,20017a8 <EE_buffer_putmsg+0x6c>
 2001770:	34 04 00 00 	mvi r4,0
    		buf(buf->p,i) = msg[i];				//buf->data[buf->p][i] = msg[i];
 2001774:	28 a1 00 14 	lw r1,(r5+20)
 2001778:	88 43 10 00 	mul r2,r2,r3
 200177c:	b4 c4 18 00 	add r3,r6,r4
 2001780:	40 63 00 00 	lbu r3,(r3+0)
 2001784:	b4 24 08 00 	add r1,r1,r4
 2001788:	b4 22 08 00 	add r1,r1,r2
 200178c:	30 23 00 00 	sb (r1+0),r3
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==buf->buf_size))
		retvalue = EE_BUF_ERR_FULL;
	else
	{ 	
		for(i=0;i<(buf->msg_size);i++)	
 2001790:	28 a2 00 0c 	lw r2,(r5+12)
 2001794:	34 84 00 01 	addi r4,r4,1
 2001798:	4c 82 00 03 	bge r4,r2,20017a4 <EE_buffer_putmsg+0x68>
 200179c:	28 a3 00 04 	lw r3,(r5+4)
 20017a0:	e3 ff ff f5 	bi 2001774 <EE_buffer_putmsg+0x38>
 20017a4:	28 a3 00 04 	lw r3,(r5+4)
    		buf(buf->p,i) = msg[i];				//buf->data[buf->p][i] = msg[i];
    	buf->p++;
    	if(buf->p == buf->buf_size)
 20017a8:	28 a2 00 10 	lw r2,(r5+16)
		retvalue = EE_BUF_ERR_FULL;
	else
	{ 	
		for(i=0;i<(buf->msg_size);i++)	
    		buf(buf->p,i) = msg[i];				//buf->data[buf->p][i] = msg[i];
    	buf->p++;
 20017ac:	34 61 00 01 	addi r1,r3,1
 20017b0:	58 a1 00 04 	sw (r5+4),r1
    	if(buf->p == buf->buf_size)
 20017b4:	44 22 00 11 	be r1,r2,20017f8 <EE_buffer_putmsg+0xbc>
    		buf->p = 0;							//buf->p = (buf->p % (buf->buf_size));
    	buf->counter++;
 20017b8:	28 a1 00 08 	lw r1,(r5+8)
 20017bc:	34 04 00 00 	mvi r4,0
 20017c0:	34 21 00 01 	addi r1,r1,1
 20017c4:	58 a1 00 08 	sw (r5+8),r1
    	retvalue = EE_BUF_OK;
	}
    if (EE_mico32_are_IRQs_enabled(intst))		//EE_hal_enableIRQ();
 20017c8:	20 e1 00 01 	andi r1,r7,0x1
 20017cc:	44 20 00 04 	be r1,r0,20017dc <EE_buffer_putmsg+0xa0>
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_enableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 20017d0:	90 00 08 00 	rcsr r1,IE
    newie = oldie | (0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 20017d4:	38 21 00 01 	ori r1,r1,0x1
 20017d8:	d0 01 00 00 	wcsr IE,r1
        EE_mico32_enableIRQ();
    
  	return retvalue;
}
 20017dc:	b8 80 08 00 	mv r1,r4
 20017e0:	c3 a0 00 00 	ret
	
	if(msg==NULL)
		return EE_BUF_ERR_NULL;
	
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==buf->buf_size))
 20017e4:	28 a2 00 08 	lw r2,(r5+8)
 20017e8:	28 a1 00 10 	lw r1,(r5+16)
 20017ec:	34 04 ff fe 	mvi r4,-2
 20017f0:	5c 41 ff de 	bne r2,r1,2001768 <EE_buffer_putmsg+0x2c>
 20017f4:	e3 ff ff f5 	bi 20017c8 <EE_buffer_putmsg+0x8c>
	{ 	
		for(i=0;i<(buf->msg_size);i++)	
    		buf(buf->p,i) = msg[i];				//buf->data[buf->p][i] = msg[i];
    	buf->p++;
    	if(buf->p == buf->buf_size)
    		buf->p = 0;							//buf->p = (buf->p % (buf->buf_size));
 20017f8:	34 01 00 00 	mvi r1,0
 20017fc:	58 a1 00 04 	sw (r5+4),r1
 2001800:	e3 ff ff ee 	bi 20017b8 <EE_buffer_putmsg+0x7c>

02001804 <EE_buffer_getmsg>:
    
  	return retvalue;
}

int EE_buffer_getmsg(EE_buffer *buf, EE_UINT8* msg)
{
 2001804:	b8 40 30 00 	mv r6,r2
 2001808:	b8 20 28 00 	mv r5,r1
	int retvalue;
	int i=0;
	unsigned int intst;
	
	if(msg==NULL)
 200180c:	34 02 ff fc 	mvi r2,-4
 2001810:	44 c0 00 25 	be r6,r0,20018a4 <EE_buffer_getmsg+0xa0>
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2001814:	90 00 38 00 	rcsr r7,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 2001818:	34 01 ff fe 	mvi r1,-2
 200181c:	a0 e1 08 00 	and r1,r7,r1
 2001820:	d0 01 00 00 	wcsr IE,r1
		return EE_BUF_ERR_NULL;
	
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==0)) 
 2001824:	28 a3 00 00 	lw r3,(r5+0)
 2001828:	28 a1 00 04 	lw r1,(r5+4)
 200182c:	44 61 00 20 	be r3,r1,20018ac <EE_buffer_getmsg+0xa8>
		retvalue = EE_BUF_ERR_EMPTY; 
	else
	{	
  		for(i=0;i<(buf->msg_size);i++)	
 2001830:	28 a2 00 0c 	lw r2,(r5+12)
 2001834:	4c 02 00 0f 	bge r0,r2,2001870 <EE_buffer_getmsg+0x6c>
 2001838:	34 04 00 00 	mvi r4,0
    		msg[i] = buf(buf->g,i);				//buf->data[buf->g][i];
 200183c:	28 a1 00 14 	lw r1,(r5+20)
 2001840:	88 62 10 00 	mul r2,r3,r2
 2001844:	b4 c4 18 00 	add r3,r6,r4
 2001848:	b4 24 08 00 	add r1,r1,r4
 200184c:	b4 22 08 00 	add r1,r1,r2
 2001850:	40 21 00 00 	lbu r1,(r1+0)
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==0)) 
		retvalue = EE_BUF_ERR_EMPTY; 
	else
	{	
  		for(i=0;i<(buf->msg_size);i++)	
 2001854:	34 84 00 01 	addi r4,r4,1
    		msg[i] = buf(buf->g,i);				//buf->data[buf->g][i];
 2001858:	30 61 00 00 	sb (r3+0),r1
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==0)) 
		retvalue = EE_BUF_ERR_EMPTY; 
	else
	{	
  		for(i=0;i<(buf->msg_size);i++)	
 200185c:	28 a2 00 0c 	lw r2,(r5+12)
 2001860:	4c 82 00 03 	bge r4,r2,200186c <EE_buffer_getmsg+0x68>
 2001864:	28 a3 00 00 	lw r3,(r5+0)
 2001868:	e3 ff ff f5 	bi 200183c <EE_buffer_getmsg+0x38>
 200186c:	28 a3 00 00 	lw r3,(r5+0)
    		msg[i] = buf(buf->g,i);				//buf->data[buf->g][i];
  		buf->g++;
  		if(buf->g == buf->buf_size)
 2001870:	28 a2 00 10 	lw r2,(r5+16)
		retvalue = EE_BUF_ERR_EMPTY; 
	else
	{	
  		for(i=0;i<(buf->msg_size);i++)	
    		msg[i] = buf(buf->g,i);				//buf->data[buf->g][i];
  		buf->g++;
 2001874:	34 61 00 01 	addi r1,r3,1
 2001878:	58 a1 00 00 	sw (r5+0),r1
  		if(buf->g == buf->buf_size)
 200187c:	44 22 00 10 	be r1,r2,20018bc <EE_buffer_getmsg+0xb8>
  			buf->g = 0;							//buf->g = (buf->g % (buf->buf_size));
  		buf->counter--;
 2001880:	28 a1 00 08 	lw r1,(r5+8)
 2001884:	34 02 00 00 	mvi r2,0
 2001888:	34 21 ff ff 	addi r1,r1,-1
 200188c:	58 a1 00 08 	sw (r5+8),r1
  		retvalue = EE_BUF_OK;
	}
  	if (EE_mico32_are_IRQs_enabled(intst))		//EE_hal_enableIRQ();
 2001890:	20 e1 00 01 	andi r1,r7,0x1
 2001894:	44 20 00 04 	be r1,r0,20018a4 <EE_buffer_getmsg+0xa0>
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_enableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 2001898:	90 00 08 00 	rcsr r1,IE
    newie = oldie | (0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 200189c:	38 21 00 01 	ori r1,r1,0x1
 20018a0:	d0 01 00 00 	wcsr IE,r1
        EE_mico32_enableIRQ();
  	
  	return retvalue;
}
 20018a4:	b8 40 08 00 	mv r1,r2
 20018a8:	c3 a0 00 00 	ret
	
	if(msg==NULL)
		return EE_BUF_ERR_NULL;
	
	intst = EE_mico32_disableIRQ();				//EE_hal_disableIRQ();
	if((buf->g == buf->p) && (buf->counter==0)) 
 20018ac:	28 a1 00 08 	lw r1,(r5+8)
 20018b0:	34 02 ff fd 	mvi r2,-3
 20018b4:	44 20 ff f7 	be r1,r0,2001890 <EE_buffer_getmsg+0x8c>
 20018b8:	e3 ff ff de 	bi 2001830 <EE_buffer_getmsg+0x2c>
	{	
  		for(i=0;i<(buf->msg_size);i++)	
    		msg[i] = buf(buf->g,i);				//buf->data[buf->g][i];
  		buf->g++;
  		if(buf->g == buf->buf_size)
  			buf->g = 0;							//buf->g = (buf->g % (buf->buf_size));
 20018bc:	34 01 00 00 	mvi r1,0
 20018c0:	58 a1 00 00 	sw (r5+0),r1
 20018c4:	e3 ff ff ef 	bi 2001880 <EE_buffer_getmsg+0x7c>

020018c8 <EE_std_run_task_code>:

/* This version should work for both the monostack and multistack versions of
 * the kernel, thanks to the macros defined in cpu/commmon/inc/ee_context.h.
 * In the mono version, all the stack-related stuff is ignored. */
EE_TID EE_std_run_task_code(EE_TID tid)
{
 20018c8:	37 9c ff fc 	addi sp,sp,-4
 20018cc:	5b 9d 00 04 	sw (sp+4),ra
 * Enable interrupts
 */
__INLINE__ void __ALWAYS_INLINE__ EE_mico32_enableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 20018d0:	90 00 10 00 	rcsr r2,IE
    newie = oldie | (0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 20018d4:	38 42 00 01 	ori r2,r2,0x1
 20018d8:	d0 02 00 00 	wcsr IE,r2
    EE_hal_enableIRQ();
    EE_call_task_body(tid); /* Call the task body */
 20018dc:	78 02 02 00 	mvhi r2,0x200
 20018e0:	3c 21 00 02 	sli r1,r1,2
 20018e4:	38 42 a2 5c 	ori r2,r2,0xa25c
 20018e8:	b4 41 10 00 	add r2,r2,r1
 20018ec:	28 43 00 00 	lw r3,(r2+0)
 20018f0:	d8 60 00 00 	call r3
 * Disable interrupts
 */
__INLINE__ EE_FREG __ALWAYS_INLINE__ EE_mico32_disableIRQ(void)
{
    EE_FREG oldie, newie;
    asm volatile ("rcsr %0,ie":"=r"(oldie));
 20018f4:	90 00 08 00 	rcsr r1,IE
    newie = oldie & (~0x1);
    asm volatile ("wcsr ie, %0"::"r"(newie));
 20018f8:	34 02 ff fe 	mvi r2,-2
 20018fc:	a0 22 08 00 	and r1,r1,r2
 2001900:	d0 01 00 00 	wcsr IE,r1
    EE_hal_disableIRQ();
    EE_thread_end_instance(); /* Call the scheduler */
 2001904:	f8 00 00 30 	calli 20019c4 <EE_thread_end_instance>
 2001908:	78 02 02 00 	mvhi r2,0x200
 200190c:	38 42 b5 b8 	ori r2,r2,0xb5b8
    return EE_std_endcycle_next_tid;
}
 2001910:	28 41 00 00 	lw r1,(r2+0)
 2001914:	2b 9d 00 04 	lw ra,(sp+4)
 2001918:	37 9c 00 04 	addi sp,sp,4
 200191c:	c3 a0 00 00 	ret

02001920 <EE_rq_insert>:
#include "ee_internal.h"

#ifndef __PRIVATE_RQ_INSERT__
// this function inserts a task into the ready queue
void EE_rq_insert(EE_TID t)
{
 2001920:	37 9c ff fc 	addi sp,sp,-4
 2001924:	5b 8b 00 04 	sw (sp+4),r11
  EE_TYPEPRIO prio;
  EE_TID p,q;

  p = EE_NIL;
  q = EE_rqfirst;
 2001928:	78 03 02 00 	mvhi r3,0x200
 200192c:	38 63 a8 2c 	ori r3,r3,0xa82c
  prio = EE_th_ready_prio[t];
 2001930:	78 06 02 00 	mvhi r6,0x200
 2001934:	3c 2b 00 02 	sli r11,r1,2
{
  EE_TYPEPRIO prio;
  EE_TID p,q;

  p = EE_NIL;
  q = EE_rqfirst;
 2001938:	28 67 00 00 	lw r7,(r3+0)
  prio = EE_th_ready_prio[t];
 200193c:	38 c6 a2 60 	ori r6,r6,0xa260
#include "ee_internal.h"

#ifndef __PRIVATE_RQ_INSERT__
// this function inserts a task into the ready queue
void EE_rq_insert(EE_TID t)
{
 2001940:	b8 20 50 00 	mv r10,r1

  p = EE_NIL;
  q = EE_rqfirst;
  prio = EE_th_ready_prio[t];

  while ((q != EE_NIL) && (prio <= EE_th_ready_prio[q])) {
 2001944:	34 09 ff ff 	mvi r9,-1
  EE_TYPEPRIO prio;
  EE_TID p,q;

  p = EE_NIL;
  q = EE_rqfirst;
  prio = EE_th_ready_prio[t];
 2001948:	b4 cb 08 00 	add r1,r6,r11
 200194c:	28 28 00 00 	lw r8,(r1+0)

  while ((q != EE_NIL) && (prio <= EE_th_ready_prio[q])) {
 2001950:	44 e9 00 19 	be r7,r9,20019b4 <EE_rq_insert+0x94>
 2001954:	3c e4 00 02 	sli r4,r7,2
 2001958:	b4 c4 08 00 	add r1,r6,r4
 200195c:	28 22 00 00 	lw r2,(r1+0)
 2001960:	55 02 00 15 	bgu r8,r2,20019b4 <EE_rq_insert+0x94>
 2001964:	78 05 02 00 	mvhi r5,0x200
 2001968:	38 a5 a8 24 	ori r5,r5,0xa824
 200196c:	e0 00 00 05 	bi 2001980 <EE_rq_insert+0x60>
 2001970:	b4 c4 08 00 	add r1,r6,r4
 2001974:	28 22 00 00 	lw r2,(r1+0)
 2001978:	55 02 00 06 	bgu r8,r2,2001990 <EE_rq_insert+0x70>
 200197c:	b8 60 38 00 	mv r7,r3
    p = q;
    q = EE_th_next[q];
 2001980:	b4 a4 08 00 	add r1,r5,r4
 2001984:	28 23 00 00 	lw r3,(r1+0)

  p = EE_NIL;
  q = EE_rqfirst;
  prio = EE_th_ready_prio[t];

  while ((q != EE_NIL) && (prio <= EE_th_ready_prio[q])) {
 2001988:	3c 64 00 02 	sli r4,r3,2
 200198c:	5c 69 ff f9 	bne r3,r9,2001970 <EE_rq_insert+0x50>
    p = q;
    q = EE_th_next[q];
  }

  if (p != EE_NIL)
    EE_th_next[p] = t;
 2001990:	3c e1 00 02 	sli r1,r7,2

  p = EE_NIL;
  q = EE_rqfirst;
  prio = EE_th_ready_prio[t];

  while ((q != EE_NIL) && (prio <= EE_th_ready_prio[q])) {
 2001994:	b8 60 38 00 	mv r7,r3
    p = q;
    q = EE_th_next[q];
  }

  if (p != EE_NIL)
    EE_th_next[p] = t;
 2001998:	b4 a1 08 00 	add r1,r5,r1
 200199c:	58 2a 00 00 	sw (r1+0),r10
  else
    EE_rqfirst = t;

  EE_th_next[t] = q;
 20019a0:	b4 ab 08 00 	add r1,r5,r11
 20019a4:	58 27 00 00 	sw (r1+0),r7
}
 20019a8:	2b 8b 00 04 	lw r11,(sp+4)
 20019ac:	37 9c 00 04 	addi sp,sp,4
 20019b0:	c3 a0 00 00 	ret
 20019b4:	78 05 02 00 	mvhi r5,0x200
  }

  if (p != EE_NIL)
    EE_th_next[p] = t;
  else
    EE_rqfirst = t;
 20019b8:	58 6a 00 00 	sw (r3+0),r10
 20019bc:	38 a5 a8 24 	ori r5,r5,0xa824
 20019c0:	e3 ff ff f8 	bi 20019a0 <EE_rq_insert+0x80>

020019c4 <EE_thread_end_instance>:

#include "ee_internal.h"

#ifndef __PRIVATE_THREAD_END_INSTANCE__
void EE_thread_end_instance(void)
{
 20019c4:	37 9c ff ec 	addi sp,sp,-20
 20019c8:	5b 8b 00 14 	sw (sp+20),r11
 20019cc:	5b 8c 00 10 	sw (sp+16),r12
 20019d0:	5b 8d 00 0c 	sw (sp+12),r13
 20019d4:	5b 8e 00 08 	sw (sp+8),r14
 20019d8:	5b 9d 00 04 	sw (sp+4),ra

/* return the first stacked task (the running task) without extracting it */
#ifndef __PRIVATE_STK_QUERYFIRST__
__INLINE__ EE_TID __ALWAYS_INLINE__ EE_stk_queryfirst(void)
{
    return EE_stkfirst;  
 20019dc:	78 0d 02 00 	mvhi r13,0x200
 20019e0:	39 ad a8 28 	ori r13,r13,0xa828
 20019e4:	29 a7 00 00 	lw r7,(r13+0)
   * suspended!!! */
  EE_th_status[current] = EE_READY;
#endif
  
  /* reset the task priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
 20019e8:	78 0e 02 00 	mvhi r14,0x200
 20019ec:	39 ce a2 64 	ori r14,r14,0xa264
  EE_TID current;
  
  current = EE_stk_queryfirst();
  
  /* decrease the pending activations... ready or stacked => (nact>0) */
  EE_th_nact[current]--;
 20019f0:	3c e3 00 02 	sli r3,r7,2
 20019f4:	78 04 02 00 	mvhi r4,0x200
   * suspended!!! */
  EE_th_status[current] = EE_READY;
#endif
  
  /* reset the task priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
 20019f8:	b5 c3 08 00 	add r1,r14,r3
 20019fc:	28 22 00 00 	lw r2,(r1+0)

/* extract the running task from the stack */
#ifndef __PRIVATE_STK_GETFIRST__
__INLINE__ void __ALWAYS_INLINE__ EE_stk_getfirst(void)
{
    EE_stkfirst = EE_th_next[EE_stkfirst];
 2001a00:	78 01 02 00 	mvhi r1,0x200
  EE_TID current;
  
  current = EE_stk_queryfirst();
  
  /* decrease the pending activations... ready or stacked => (nact>0) */
  EE_th_nact[current]--;
 2001a04:	38 84 b5 28 	ori r4,r4,0xb528
   * suspended!!! */
  EE_th_status[current] = EE_READY;
#endif
  
  /* reset the task priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
 2001a08:	78 0c 02 00 	mvhi r12,0x200
 2001a0c:	38 21 a8 24 	ori r1,r1,0xa824
  EE_TID current;
  
  current = EE_stk_queryfirst();
  
  /* decrease the pending activations... ready or stacked => (nact>0) */
  EE_th_nact[current]--;
 2001a10:	b4 83 20 00 	add r4,r4,r3
   * suspended!!! */
  EE_th_status[current] = EE_READY;
#endif
  
  /* reset the task priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
 2001a14:	39 8c b3 14 	ori r12,r12,0xb314
 2001a18:	b4 23 08 00 	add r1,r1,r3
  EE_TID current;
  
  current = EE_stk_queryfirst();
  
  /* decrease the pending activations... ready or stacked => (nact>0) */
  EE_th_nact[current]--;
 2001a1c:	28 85 00 00 	lw r5,(r4+0)
   * suspended!!! */
  EE_th_status[current] = EE_READY;
#endif
  
  /* reset the task priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
 2001a20:	29 86 00 00 	lw r6,(r12+0)
 2001a24:	28 21 00 00 	lw r1,(r1+0)
  
#if defined(__MULTI__) || defined(__WITH_STATUS__)
  /* The task state switches from STACKED TO READY because it ends its
   * instance. Note that status=READY and nact=0 ==>> the task is
   * suspended!!! */
  EE_th_status[current] = EE_READY;
 2001a28:	78 0b 02 00 	mvhi r11,0x200
 2001a2c:	39 6b a8 20 	ori r11,r11,0xa820
#endif
  
  /* reset the task priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
 2001a30:	a4 40 10 00 	not r2,r2
 2001a34:	a0 46 10 00 	and r2,r2,r6
 2001a38:	59 a1 00 00 	sw (r13+0),r1
  EE_TID current;
  
  current = EE_stk_queryfirst();
  
  /* decrease the pending activations... ready or stacked => (nact>0) */
  EE_th_nact[current]--;
 2001a3c:	34 a5 ff ff 	addi r5,r5,-1
  
#if defined(__MULTI__) || defined(__WITH_STATUS__)
  /* The task state switches from STACKED TO READY because it ends its
   * instance. Note that status=READY and nact=0 ==>> the task is
   * suspended!!! */
  EE_th_status[current] = EE_READY;
 2001a40:	b5 63 18 00 	add r3,r11,r3
 2001a44:	34 01 00 01 	mvi r1,1
 2001a48:	58 61 00 00 	sw (r3+0),r1
  EE_TID current;
  
  current = EE_stk_queryfirst();
  
  /* decrease the pending activations... ready or stacked => (nact>0) */
  EE_th_nact[current]--;
 2001a4c:	58 85 00 00 	sw (r4+0),r5
   * suspended!!! */
  EE_th_status[current] = EE_READY;
#endif
  
  /* reset the task priority bit in the system_ceiling */
  EE_sys_ceiling &= ~EE_th_dispatch_prio[current];
 2001a50:	59 82 00 00 	sw (r12+0),r2
  
  /* extract the task from the stk data structure */
  EE_stk_getfirst();
  
  if (EE_th_nact[current] > 0) {
 2001a54:	5c a0 00 30 	bne r5,r0,2001b14 <EE_thread_end_instance+0x150>

/* return the first ready task without extracting it */
#ifndef __PRIVATE_RQ_QUERYFIRST__
__INLINE__ EE_TID __ALWAYS_INLINE__ EE_rq_queryfirst(void)
{
    return EE_rqfirst;  
 2001a58:	78 01 02 00 	mvhi r1,0x200
 2001a5c:	38 21 a8 2c 	ori r1,r1,0xa82c
 2001a60:	28 21 00 00 	lw r1,(r1+0)
    EE_rq_insert(current);
  }
  
  /* check if there is to schedule a ready task pop a preempted
   * task   */
  if (EE_rq_queryfirst() == EE_NIL ||
 2001a64:	34 02 ff ff 	mvi r2,-1
 2001a68:	44 22 00 08 	be r1,r2,2001a88 <EE_thread_end_instance+0xc4>
 2001a6c:	3c 23 00 02 	sli r3,r1,2
 2001a70:	78 01 02 00 	mvhi r1,0x200
 2001a74:	38 21 a2 60 	ori r1,r1,0xa260
 2001a78:	b4 23 08 00 	add r1,r1,r3
 2001a7c:	28 22 00 00 	lw r2,(r1+0)
 2001a80:	29 85 00 00 	lw r5,(r12+0)
 2001a84:	54 45 00 0f 	bgu r2,r5,2001ac0 <EE_thread_end_instance+0xfc>
}


__INLINE__ void __ALWAYS_INLINE__ EE_hal_endcycle_stacked(EE_TID tid)
{
    EE_std_endcycle_next_tid = EE_std_mark_tid_stacked(tid);
 2001a88:	29 a1 00 00 	lw r1,(r13+0)
      EE_hal_endcycle_ready(EE_rq2stk_exchange());
#else
    EE_hal_endcycle_ready(EE_rq2stk_exchange());
#endif
  }
}  
 2001a8c:	78 02 80 00 	mvhi r2,0x8000
 2001a90:	38 42 00 00 	ori r2,r2,0x0
 2001a94:	78 03 02 00 	mvhi r3,0x200
 2001a98:	b8 22 08 00 	or r1,r1,r2
 2001a9c:	38 63 b5 b8 	ori r3,r3,0xb5b8
 2001aa0:	58 61 00 00 	sw (r3+0),r1
 2001aa4:	2b 9d 00 04 	lw ra,(sp+4)
 2001aa8:	2b 8b 00 14 	lw r11,(sp+20)
 2001aac:	2b 8c 00 10 	lw r12,(sp+16)
 2001ab0:	2b 8d 00 0c 	lw r13,(sp+12)
 2001ab4:	2b 8e 00 08 	lw r14,(sp+8)
 2001ab8:	37 9c 00 14 	addi sp,sp,20
 2001abc:	c3 a0 00 00 	ret
    
#if defined(__MULTI__) || defined(__WITH_STATUS__)
    EE_th_status[EE_rq_queryfirst()] = EE_STACKED;
#endif

    EE_sys_ceiling |= EE_th_dispatch_prio[EE_rq_queryfirst()];
 2001ac0:	b5 c3 08 00 	add r1,r14,r3
  else { 
    /* we have to schedule a ready task */
#if defined(__MULTI__)
    register int flag;
    
    flag = EE_th_status[EE_rq_queryfirst()] & EE_WASSTACKED;
 2001ac4:	b5 63 20 00 	add r4,r11,r3
    
#if defined(__MULTI__) || defined(__WITH_STATUS__)
    EE_th_status[EE_rq_queryfirst()] = EE_STACKED;
#endif

    EE_sys_ceiling |= EE_th_dispatch_prio[EE_rq_queryfirst()];
 2001ac8:	28 22 00 00 	lw r2,(r1+0)
  else { 
    /* we have to schedule a ready task */
#if defined(__MULTI__)
    register int flag;
    
    flag = EE_th_status[EE_rq_queryfirst()] & EE_WASSTACKED;
 2001acc:	28 83 00 00 	lw r3,(r4+0)
#endif
    
#if defined(__MULTI__) || defined(__WITH_STATUS__)
    EE_th_status[EE_rq_queryfirst()] = EE_STACKED;
 2001ad0:	34 01 00 02 	mvi r1,2
#endif

    EE_sys_ceiling |= EE_th_dispatch_prio[EE_rq_queryfirst()];
 2001ad4:	b8 45 10 00 	or r2,r2,r5
    
    flag = EE_th_status[EE_rq_queryfirst()] & EE_WASSTACKED;
#endif
    
#if defined(__MULTI__) || defined(__WITH_STATUS__)
    EE_th_status[EE_rq_queryfirst()] = EE_STACKED;
 2001ad8:	58 81 00 00 	sw (r4+0),r1
#endif

    EE_sys_ceiling |= EE_th_dispatch_prio[EE_rq_queryfirst()];
 2001adc:	59 82 00 00 	sw (r12+0),r2
  else { 
    /* we have to schedule a ready task */
#if defined(__MULTI__)
    register int flag;
    
    flag = EE_th_status[EE_rq_queryfirst()] & EE_WASSTACKED;
 2001ae0:	20 63 00 08 	andi r3,r3,0x8
#endif

    EE_sys_ceiling |= EE_th_dispatch_prio[EE_rq_queryfirst()];

#if defined(__MULTI__)
    if (flag)
 2001ae4:	5c 60 00 0f 	bne r3,r0,2001b20 <EE_thread_end_instance+0x15c>
      EE_hal_endcycle_stacked(EE_rq2stk_exchange());
    else
      EE_hal_endcycle_ready(EE_rq2stk_exchange());
 2001ae8:	fb ff fc a5 	calli 2000d7c <EE_rq2stk_exchange>
}


__INLINE__ void __ALWAYS_INLINE__ EE_hal_endcycle_ready(EE_TID tid)
{
    EE_std_endcycle_next_tid = tid;
 2001aec:	78 02 02 00 	mvhi r2,0x200
 2001af0:	38 42 b5 b8 	ori r2,r2,0xb5b8
 2001af4:	58 41 00 00 	sw (r2+0),r1
#else
    EE_hal_endcycle_ready(EE_rq2stk_exchange());
#endif
  }
}  
 2001af8:	2b 9d 00 04 	lw ra,(sp+4)
 2001afc:	2b 8b 00 14 	lw r11,(sp+20)
 2001b00:	2b 8c 00 10 	lw r12,(sp+16)
 2001b04:	2b 8d 00 0c 	lw r13,(sp+12)
 2001b08:	2b 8e 00 08 	lw r14,(sp+8)
 2001b0c:	37 9c 00 14 	addi sp,sp,20
 2001b10:	c3 a0 00 00 	ret
  
  if (EE_th_nact[current] > 0) {
    /* there are pending activations...  */
    /* we have to reinsert the task into the ready queue before
     * rescheduling!!! */
    EE_rq_insert(current);
 2001b14:	b8 e0 08 00 	mv r1,r7
 2001b18:	fb ff ff 82 	calli 2001920 <EE_rq_insert>
 2001b1c:	e3 ff ff cf 	bi 2001a58 <EE_thread_end_instance+0x94>

    EE_sys_ceiling |= EE_th_dispatch_prio[EE_rq_queryfirst()];

#if defined(__MULTI__)
    if (flag)
      EE_hal_endcycle_stacked(EE_rq2stk_exchange());
 2001b20:	fb ff fc 97 	calli 2000d7c <EE_rq2stk_exchange>
 2001b24:	e3 ff ff da 	bi 2001a8c <EE_thread_end_instance+0xc8>

02001b28 <_exit>:
 2001b28:	34 08 00 01 	mvi r8,1
 2001b2c:	ac 00 00 07 	scall

02001b30 <memcpy>:
 2001b30:	b8 40 38 00 	mv r7,r2
 2001b34:	34 04 00 0f 	mvi r4,15
 2001b38:	b8 60 10 00 	mv r2,r3
 2001b3c:	b8 20 40 00 	mv r8,r1
 2001b40:	b8 20 30 00 	mv r6,r1
 2001b44:	b8 e0 28 00 	mv r5,r7
 2001b48:	50 82 00 04 	bgeu r4,r2,2001b58 <memcpy+0x28>
 2001b4c:	b8 e1 08 00 	or r1,r7,r1
 2001b50:	20 21 00 03 	andi r1,r1,0x3
 2001b54:	44 20 00 0b 	be r1,r0,2001b80 <memcpy+0x50>
 2001b58:	44 60 00 08 	be r3,r0,2001b78 <memcpy+0x48>
 2001b5c:	34 04 00 00 	mvi r4,0
 2001b60:	b4 a4 08 00 	add r1,r5,r4
 2001b64:	40 21 00 00 	lbu r1,(r1+0)
 2001b68:	b4 c4 10 00 	add r2,r6,r4
 2001b6c:	34 84 00 01 	addi r4,r4,1
 2001b70:	30 41 00 00 	sb (r2+0),r1
 2001b74:	5c 83 ff fb 	bne r4,r3,2001b60 <memcpy+0x30>
 2001b78:	b9 00 08 00 	mv r1,r8
 2001b7c:	c3 a0 00 00 	ret
 2001b80:	b8 80 18 00 	mv r3,r4
 2001b84:	b8 e0 08 00 	mv r1,r7
 2001b88:	b9 00 20 00 	mv r4,r8
 2001b8c:	b8 40 28 00 	mv r5,r2
 2001b90:	28 26 00 00 	lw r6,(r1+0)
 2001b94:	34 a5 ff f0 	addi r5,r5,-16
 2001b98:	58 86 00 00 	sw (r4+0),r6
 2001b9c:	28 26 00 04 	lw r6,(r1+4)
 2001ba0:	58 86 00 04 	sw (r4+4),r6
 2001ba4:	28 26 00 08 	lw r6,(r1+8)
 2001ba8:	58 86 00 08 	sw (r4+8),r6
 2001bac:	28 26 00 0c 	lw r6,(r1+12)
 2001bb0:	34 21 00 10 	addi r1,r1,16
 2001bb4:	58 86 00 0c 	sw (r4+12),r6
 2001bb8:	34 84 00 10 	addi r4,r4,16
 2001bbc:	54 a3 ff f5 	bgu r5,r3,2001b90 <memcpy+0x60>
 2001bc0:	34 42 ff f0 	addi r2,r2,-16
 2001bc4:	00 41 00 04 	srui r1,r2,4
 2001bc8:	20 43 00 0f 	andi r3,r2,0xf
 2001bcc:	34 21 00 01 	addi r1,r1,1
 2001bd0:	3c 21 00 04 	sli r1,r1,4
 2001bd4:	34 02 00 03 	mvi r2,3
 2001bd8:	b4 e1 38 00 	add r7,r7,r1
 2001bdc:	b5 01 28 00 	add r5,r8,r1
 2001be0:	50 43 00 11 	bgeu r2,r3,2001c24 <memcpy+0xf4>
 2001be4:	b8 40 30 00 	mv r6,r2
 2001be8:	34 04 00 00 	mvi r4,0
 2001bec:	b4 e4 10 00 	add r2,r7,r4
 2001bf0:	28 42 00 00 	lw r2,(r2+0)
 2001bf4:	b4 a4 08 00 	add r1,r5,r4
 2001bf8:	34 84 00 04 	addi r4,r4,4
 2001bfc:	58 22 00 00 	sw (r1+0),r2
 2001c00:	c8 64 08 00 	sub r1,r3,r4
 2001c04:	54 26 ff fa 	bgu r1,r6,2001bec <memcpy+0xbc>
 2001c08:	34 62 ff fc 	addi r2,r3,-4
 2001c0c:	00 41 00 02 	srui r1,r2,2
 2001c10:	20 43 00 03 	andi r3,r2,0x3
 2001c14:	34 21 00 01 	addi r1,r1,1
 2001c18:	3c 21 00 02 	sli r1,r1,2
 2001c1c:	b4 a1 28 00 	add r5,r5,r1
 2001c20:	b4 e1 38 00 	add r7,r7,r1
 2001c24:	b8 a0 30 00 	mv r6,r5
 2001c28:	b8 e0 28 00 	mv r5,r7
 2001c2c:	e3 ff ff cb 	bi 2001b58 <memcpy+0x28>

02001c30 <sprintf>:
 2001c30:	37 9c ff 7c 	addi sp,sp,-132
 2001c34:	5b 8b 00 0c 	sw (sp+12),r11
 2001c38:	5b 8c 00 08 	sw (sp+8),r12
 2001c3c:	5b 9d 00 04 	sw (sp+4),ra
 2001c40:	78 09 02 00 	mvhi r9,0x200
 2001c44:	39 29 aa e8 	ori r9,r9,0xaae8
 2001c48:	b8 20 60 00 	mv r12,r1
 2001c4c:	29 21 00 00 	lw r1,(r9+0)
 2001c50:	78 09 7f ff 	mvhi r9,0x7fff
 2001c54:	39 29 ff ff 	ori r9,r9,0xffff
 2001c58:	5b 83 00 70 	sw (sp+112),r3
 2001c5c:	5b 84 00 74 	sw (sp+116),r4
 2001c60:	5b 82 00 6c 	sw (sp+108),r2
 2001c64:	b8 40 18 00 	mv r3,r2
 2001c68:	34 0a ff ff 	mvi r10,-1
 2001c6c:	37 82 00 10 	addi r2,sp,16
 2001c70:	34 0b 02 08 	mvi r11,520
 2001c74:	37 84 00 70 	addi r4,sp,112
 2001c78:	5b 85 00 78 	sw (sp+120),r5
 2001c7c:	5b 86 00 7c 	sw (sp+124),r6
 2001c80:	5b 87 00 80 	sw (sp+128),r7
 2001c84:	5b 88 00 84 	sw (sp+132),r8
 2001c88:	0f 8b 00 1c 	sh (sp+28),r11
 2001c8c:	5b 8c 00 20 	sw (sp+32),r12
 2001c90:	5b 89 00 24 	sw (sp+36),r9
 2001c94:	0f 8a 00 1e 	sh (sp+30),r10
 2001c98:	5b 8c 00 10 	sw (sp+16),r12
 2001c9c:	5b 89 00 18 	sw (sp+24),r9
 2001ca0:	f8 00 00 8b 	calli 2001ecc <_vfprintf_r>
 2001ca4:	2b 82 00 10 	lw r2,(sp+16)
 2001ca8:	34 03 00 00 	mvi r3,0
 2001cac:	30 43 00 00 	sb (r2+0),r3
 2001cb0:	2b 9d 00 04 	lw ra,(sp+4)
 2001cb4:	2b 8b 00 0c 	lw r11,(sp+12)
 2001cb8:	2b 8c 00 08 	lw r12,(sp+8)
 2001cbc:	37 9c 00 84 	addi sp,sp,132
 2001cc0:	c3 a0 00 00 	ret

02001cc4 <strcat>:
 2001cc4:	37 9c ff f8 	addi sp,sp,-8
 2001cc8:	5b 8b 00 08 	sw (sp+8),r11
 2001ccc:	5b 9d 00 04 	sw (sp+4),ra
 2001cd0:	20 26 00 03 	andi r6,r1,0x3
 2001cd4:	b8 40 38 00 	mv r7,r2
 2001cd8:	b8 20 58 00 	mv r11,r1
 2001cdc:	b8 20 10 00 	mv r2,r1
 2001ce0:	5c c0 00 17 	bne r6,r0,2001d3c <strcat+0x78>
 2001ce4:	28 21 00 00 	lw r1,(r1+0)
 2001ce8:	78 05 fe fe 	mvhi r5,0xfefe
 2001cec:	38 a5 fe ff 	ori r5,r5,0xfeff
 2001cf0:	a4 20 10 00 	not r2,r1
 2001cf4:	78 04 80 80 	mvhi r4,0x8080
 2001cf8:	b4 25 08 00 	add r1,r1,r5
 2001cfc:	a0 22 08 00 	and r1,r1,r2
 2001d00:	38 84 80 80 	ori r4,r4,0x8080
 2001d04:	a0 24 08 00 	and r1,r1,r4
 2001d08:	b9 60 18 00 	mv r3,r11
 2001d0c:	5c 26 00 08 	bne r1,r6,2001d2c <strcat+0x68>
 2001d10:	34 63 00 04 	addi r3,r3,4
 2001d14:	28 61 00 00 	lw r1,(r3+0)
 2001d18:	a4 20 10 00 	not r2,r1
 2001d1c:	b4 25 08 00 	add r1,r1,r5
 2001d20:	a0 22 08 00 	and r1,r1,r2
 2001d24:	a0 24 08 00 	and r1,r1,r4
 2001d28:	44 20 ff fa 	be r1,r0,2001d10 <strcat+0x4c>
 2001d2c:	b8 60 10 00 	mv r2,r3
 2001d30:	40 41 00 00 	lbu r1,(r2+0)
 2001d34:	44 20 00 04 	be r1,r0,2001d44 <strcat+0x80>
 2001d38:	34 42 00 01 	addi r2,r2,1
 2001d3c:	40 41 00 00 	lbu r1,(r2+0)
 2001d40:	5c 20 ff fe 	bne r1,r0,2001d38 <strcat+0x74>
 2001d44:	b8 40 08 00 	mv r1,r2
 2001d48:	b8 e0 10 00 	mv r2,r7
 2001d4c:	f8 00 00 06 	calli 2001d64 <strcpy>
 2001d50:	b9 60 08 00 	mv r1,r11
 2001d54:	2b 9d 00 04 	lw ra,(sp+4)
 2001d58:	2b 8b 00 08 	lw r11,(sp+8)
 2001d5c:	37 9c 00 08 	addi sp,sp,8
 2001d60:	c3 a0 00 00 	ret

02001d64 <strcpy>:
 2001d64:	b8 20 40 00 	mv r8,r1
 2001d68:	b8 41 08 00 	or r1,r2,r1
 2001d6c:	20 29 00 03 	andi r9,r1,0x3
 2001d70:	b9 00 30 00 	mv r6,r8
 2001d74:	b8 40 28 00 	mv r5,r2
 2001d78:	5d 20 00 17 	bne r9,r0,2001dd4 <strcpy+0x70>
 2001d7c:	28 44 00 00 	lw r4,(r2+0)
 2001d80:	78 07 fe fe 	mvhi r7,0xfefe
 2001d84:	38 e7 fe ff 	ori r7,r7,0xfeff
 2001d88:	b8 40 28 00 	mv r5,r2
 2001d8c:	a4 80 08 00 	not r1,r4
 2001d90:	b4 87 10 00 	add r2,r4,r7
 2001d94:	78 06 80 80 	mvhi r6,0x8080
 2001d98:	a0 22 08 00 	and r1,r1,r2
 2001d9c:	38 c6 80 80 	ori r6,r6,0x8080
 2001da0:	a0 26 08 00 	and r1,r1,r6
 2001da4:	b9 00 18 00 	mv r3,r8
 2001da8:	5c 29 00 0a 	bne r1,r9,2001dd0 <strcpy+0x6c>
 2001dac:	58 64 00 00 	sw (r3+0),r4
 2001db0:	34 a5 00 04 	addi r5,r5,4
 2001db4:	28 a4 00 00 	lw r4,(r5+0)
 2001db8:	34 63 00 04 	addi r3,r3,4
 2001dbc:	a4 80 08 00 	not r1,r4
 2001dc0:	b4 87 10 00 	add r2,r4,r7
 2001dc4:	a0 22 08 00 	and r1,r1,r2
 2001dc8:	a0 26 08 00 	and r1,r1,r6
 2001dcc:	44 20 ff f8 	be r1,r0,2001dac <strcpy+0x48>
 2001dd0:	b8 60 30 00 	mv r6,r3
 2001dd4:	34 04 00 00 	mvi r4,0
 2001dd8:	b4 a4 08 00 	add r1,r5,r4
 2001ddc:	40 23 00 00 	lbu r3,(r1+0)
 2001de0:	b4 c4 10 00 	add r2,r6,r4
 2001de4:	34 84 00 01 	addi r4,r4,1
 2001de8:	30 43 00 00 	sb (r2+0),r3
 2001dec:	5c 60 ff fb 	bne r3,r0,2001dd8 <strcpy+0x74>
 2001df0:	b9 00 08 00 	mv r1,r8
 2001df4:	c3 a0 00 00 	ret

02001df8 <strlen>:
 2001df8:	20 27 00 03 	andi r7,r1,0x3
 2001dfc:	b8 20 30 00 	mv r6,r1
 2001e00:	b8 20 10 00 	mv r2,r1
 2001e04:	5c e0 00 17 	bne r7,r0,2001e60 <strlen+0x68>
 2001e08:	28 21 00 00 	lw r1,(r1+0)
 2001e0c:	78 05 fe fe 	mvhi r5,0xfefe
 2001e10:	38 a5 fe ff 	ori r5,r5,0xfeff
 2001e14:	a4 20 10 00 	not r2,r1
 2001e18:	78 04 80 80 	mvhi r4,0x8080
 2001e1c:	b4 25 08 00 	add r1,r1,r5
 2001e20:	a0 22 08 00 	and r1,r1,r2
 2001e24:	38 84 80 80 	ori r4,r4,0x8080
 2001e28:	a0 24 08 00 	and r1,r1,r4
 2001e2c:	b8 c0 18 00 	mv r3,r6
 2001e30:	5c 27 00 08 	bne r1,r7,2001e50 <strlen+0x58>
 2001e34:	34 63 00 04 	addi r3,r3,4
 2001e38:	28 61 00 00 	lw r1,(r3+0)
 2001e3c:	a4 20 10 00 	not r2,r1
 2001e40:	b4 25 08 00 	add r1,r1,r5
 2001e44:	a0 22 08 00 	and r1,r1,r2
 2001e48:	a0 24 08 00 	and r1,r1,r4
 2001e4c:	44 20 ff fa 	be r1,r0,2001e34 <strlen+0x3c>
 2001e50:	b8 60 10 00 	mv r2,r3
 2001e54:	40 41 00 00 	lbu r1,(r2+0)
 2001e58:	44 20 00 04 	be r1,r0,2001e68 <strlen+0x70>
 2001e5c:	34 42 00 01 	addi r2,r2,1
 2001e60:	40 41 00 00 	lbu r1,(r2+0)
 2001e64:	5c 20 ff fe 	bne r1,r0,2001e5c <strlen+0x64>
 2001e68:	c8 46 08 00 	sub r1,r2,r6
 2001e6c:	c3 a0 00 00 	ret

02001e70 <__sprint>:
 2001e70:	37 9c ff f4 	addi sp,sp,-12
 2001e74:	5b 8b 00 0c 	sw (sp+12),r11
 2001e78:	5b 8c 00 08 	sw (sp+8),r12
 2001e7c:	5b 9d 00 04 	sw (sp+4),ra
 2001e80:	28 43 00 08 	lw r3,(r2+8)
 2001e84:	34 0c 00 00 	mvi r12,0
 2001e88:	b8 40 58 00 	mv r11,r2
 2001e8c:	5c 6c 00 08 	bne r3,r12,2001eac <__sprint+0x3c>
 2001e90:	b8 60 08 00 	mv r1,r3
 2001e94:	58 43 00 04 	sw (r2+4),r3
 2001e98:	2b 9d 00 04 	lw ra,(sp+4)
 2001e9c:	2b 8b 00 0c 	lw r11,(sp+12)
 2001ea0:	2b 8c 00 08 	lw r12,(sp+8)
 2001ea4:	37 9c 00 0c 	addi sp,sp,12
 2001ea8:	c3 a0 00 00 	ret
 2001eac:	f8 00 0f ca 	calli 2005dd4 <__sfvwrite>
 2001eb0:	59 6c 00 04 	sw (r11+4),r12
 2001eb4:	59 6c 00 08 	sw (r11+8),r12
 2001eb8:	2b 9d 00 04 	lw ra,(sp+4)
 2001ebc:	2b 8b 00 0c 	lw r11,(sp+12)
 2001ec0:	2b 8c 00 08 	lw r12,(sp+8)
 2001ec4:	37 9c 00 0c 	addi sp,sp,12
 2001ec8:	c3 a0 00 00 	ret

02001ecc <_vfprintf_r>:
 2001ecc:	37 9c f9 14 	addi sp,sp,-1772
 2001ed0:	5b 8b 00 44 	sw (sp+68),r11
 2001ed4:	5b 8c 00 40 	sw (sp+64),r12
 2001ed8:	5b 8d 00 3c 	sw (sp+60),r13
 2001edc:	5b 8e 00 38 	sw (sp+56),r14
 2001ee0:	5b 8f 00 34 	sw (sp+52),r15
 2001ee4:	5b 90 00 30 	sw (sp+48),r16
 2001ee8:	5b 91 00 2c 	sw (sp+44),r17
 2001eec:	5b 92 00 28 	sw (sp+40),r18
 2001ef0:	5b 93 00 24 	sw (sp+36),r19
 2001ef4:	5b 94 00 20 	sw (sp+32),r20
 2001ef8:	5b 95 00 1c 	sw (sp+28),r21
 2001efc:	5b 96 00 18 	sw (sp+24),r22
 2001f00:	5b 97 00 14 	sw (sp+20),r23
 2001f04:	5b 98 00 10 	sw (sp+16),r24
 2001f08:	5b 99 00 0c 	sw (sp+12),r25
 2001f0c:	5b 9b 00 08 	sw (sp+8),fp
 2001f10:	5b 9d 00 04 	sw (sp+4),ra
 2001f14:	b8 40 c8 00 	mv r25,r2
 2001f18:	5b 81 00 70 	sw (sp+112),r1
 2001f1c:	b8 60 58 00 	mv r11,r3
 2001f20:	5b 84 00 6c 	sw (sp+108),r4
 2001f24:	f8 00 10 cd 	calli 2006258 <localeconv>
 2001f28:	78 02 02 00 	mvhi r2,0x200
 2001f2c:	38 42 aa e8 	ori r2,r2,0xaae8
 2001f30:	28 21 00 00 	lw r1,(r1+0)
 2001f34:	28 42 00 00 	lw r2,(r2+0)
 2001f38:	5b 81 00 7c 	sw (sp+124),r1
 2001f3c:	44 40 00 03 	be r2,r0,2001f48 <_vfprintf_r+0x7c>
 2001f40:	28 41 00 38 	lw r1,(r2+56)
 2001f44:	44 20 02 cb 	be r1,r0,2002a70 <_vfprintf_r+0xba4>
 2001f48:	1f 23 00 0c 	lh r3,(r25+12)
 2001f4c:	20 62 ff ff 	andi r2,r3,0xffff
 2001f50:	20 41 00 08 	andi r1,r2,0x8
 2001f54:	44 20 04 39 	be r1,r0,2003038 <_vfprintf_r+0x116c>
 2001f58:	2b 21 00 10 	lw r1,(r25+16)
 2001f5c:	44 20 04 37 	be r1,r0,2003038 <_vfprintf_r+0x116c>
 2001f60:	20 42 00 1a 	andi r2,r2,0x1a
 2001f64:	34 01 00 0a 	mvi r1,10
 2001f68:	44 41 02 97 	be r2,r1,20029c4 <_vfprintf_r+0xaf8>
 2001f6c:	78 02 02 00 	mvhi r2,0x200
 2001f70:	5b 82 00 68 	sw (sp+104),r2
 2001f74:	78 02 02 00 	mvhi r2,0x200
 2001f78:	5b 82 00 60 	sw (sp+96),r2
 2001f7c:	78 02 80 00 	mvhi r2,0x8000
 2001f80:	5b 82 00 58 	sw (sp+88),r2
 2001f84:	78 02 02 00 	mvhi r2,0x200
 2001f88:	5b 82 00 50 	sw (sp+80),r2
 2001f8c:	78 05 02 00 	mvhi r5,0x200
 2001f90:	78 02 02 00 	mvhi r2,0x200
 2001f94:	5b 85 00 64 	sw (sp+100),r5
 2001f98:	5b 82 00 48 	sw (sp+72),r2
 2001f9c:	78 05 02 00 	mvhi r5,0x200
 2001fa0:	2b 82 00 68 	lw r2,(sp+104)
 2001fa4:	5b 85 00 5c 	sw (sp+92),r5
 2001fa8:	78 05 02 00 	mvhi r5,0x200
 2001fac:	5b 85 00 54 	sw (sp+84),r5
 2001fb0:	78 05 02 00 	mvhi r5,0x200
 2001fb4:	5b 85 00 4c 	sw (sp+76),r5
 2001fb8:	38 42 a2 cc 	ori r2,r2,0xa2cc
 2001fbc:	37 85 06 50 	addi r5,sp,1616
 2001fc0:	5b 85 06 b8 	sw (sp+1720),r5
 2001fc4:	5b 82 00 68 	sw (sp+104),r2
 2001fc8:	2b 85 00 64 	lw r5,(sp+100)
 2001fcc:	2b 82 00 60 	lw r2,(sp+96)
 2001fd0:	34 01 00 00 	mvi r1,0
 2001fd4:	38 a5 a2 88 	ori r5,r5,0xa288
 2001fd8:	38 42 a2 c4 	ori r2,r2,0xa2c4
 2001fdc:	5b 85 00 64 	sw (sp+100),r5
 2001fe0:	5b 82 00 60 	sw (sp+96),r2
 2001fe4:	2b 85 00 5c 	lw r5,(sp+92)
 2001fe8:	2b 82 00 58 	lw r2,(sp+88)
 2001fec:	5b 81 00 74 	sw (sp+116),r1
 2001ff0:	38 a5 a2 b8 	ori r5,r5,0xa2b8
 2001ff4:	38 42 00 00 	ori r2,r2,0x0
 2001ff8:	5b 85 00 5c 	sw (sp+92),r5
 2001ffc:	5b 82 00 58 	sw (sp+88),r2
 2002000:	2b 85 00 54 	lw r5,(sp+84)
 2002004:	2b 82 00 50 	lw r2,(sp+80)
 2002008:	5b 81 00 8c 	sw (sp+140),r1
 200200c:	38 a5 a2 84 	ori r5,r5,0xa284
 2002010:	38 42 a2 70 	ori r2,r2,0xa270
 2002014:	5b 85 00 54 	sw (sp+84),r5
 2002018:	5b 82 00 50 	sw (sp+80),r2
 200201c:	2b 85 00 4c 	lw r5,(sp+76)
 2002020:	2b 82 00 48 	lw r2,(sp+72)
 2002024:	78 14 02 00 	mvhi r20,0x200
 2002028:	38 a5 a4 40 	ori r5,r5,0xa440
 200202c:	38 42 a2 c0 	ori r2,r2,0xa2c0
 2002030:	5b 81 06 c0 	sw (sp+1728),r1
 2002034:	5b 81 06 bc 	sw (sp+1724),r1
 2002038:	5b 85 00 4c 	sw (sp+76),r5
 200203c:	5b 82 00 48 	sw (sp+72),r2
 2002040:	5b 81 00 90 	sw (sp+144),r1
 2002044:	5b 81 00 80 	sw (sp+128),r1
 2002048:	b9 60 88 00 	mv r17,r11
 200204c:	3a 94 a4 30 	ori r20,r20,0xa430
 2002050:	37 8d 06 50 	addi r13,sp,1616
 2002054:	5b 81 00 88 	sw (sp+136),r1
 2002058:	42 23 00 00 	lbu r3,(r17+0)
 200205c:	7c 61 00 00 	cmpnei r1,r3,0
 2002060:	7c 62 00 25 	cmpnei r2,r3,37
 2002064:	a0 22 08 00 	and r1,r1,r2
 2002068:	44 20 00 1a 	be r1,r0,20020d0 <_vfprintf_r+0x204>
 200206c:	ba 20 58 00 	mv r11,r17
 2002070:	35 6b 00 01 	addi r11,r11,1
 2002074:	41 63 00 00 	lbu r3,(r11+0)
 2002078:	7c 62 00 00 	cmpnei r2,r3,0
 200207c:	7c 61 00 25 	cmpnei r1,r3,37
 2002080:	a0 41 10 00 	and r2,r2,r1
 2002084:	5c 40 ff fb 	bne r2,r0,2002070 <_vfprintf_r+0x1a4>
 2002088:	c9 71 60 00 	sub r12,r11,r17
 200208c:	45 82 00 27 	be r12,r2,2002128 <_vfprintf_r+0x25c>
 2002090:	59 ac 00 04 	sw (r13+4),r12
 2002094:	2b 81 06 c0 	lw r1,(sp+1728)
 2002098:	2b 82 06 bc 	lw r2,(sp+1724)
 200209c:	59 b1 00 00 	sw (r13+0),r17
 20020a0:	b4 2c 08 00 	add r1,r1,r12
 20020a4:	34 42 00 01 	addi r2,r2,1
 20020a8:	5b 81 06 c0 	sw (sp+1728),r1
 20020ac:	5b 82 06 bc 	sw (sp+1724),r2
 20020b0:	34 01 00 07 	mvi r1,7
 20020b4:	48 41 02 3e 	bg r2,r1,20029ac <_vfprintf_r+0xae0>
 20020b8:	35 ad 00 08 	addi r13,r13,8
 20020bc:	2b 81 00 74 	lw r1,(sp+116)
 20020c0:	41 63 00 00 	lbu r3,(r11+0)
 20020c4:	b9 60 88 00 	mv r17,r11
 20020c8:	b4 2c 08 00 	add r1,r1,r12
 20020cc:	5b 81 00 74 	sw (sp+116),r1
 20020d0:	34 01 00 00 	mvi r1,0
 20020d4:	44 61 05 5c 	be r3,r1,2003644 <_vfprintf_r+0x1778>
 20020d8:	2b 8c 00 6c 	lw r12,(sp+108)
 20020dc:	b8 20 c0 00 	mv r24,r1
 20020e0:	36 31 00 01 	addi r17,r17,1
 20020e4:	33 81 06 ef 	sb (sp+1775),r1
 20020e8:	42 21 00 00 	lbu r1,(r17+0)
 20020ec:	34 12 ff ff 	mvi r18,-1
 20020f0:	5b 98 00 78 	sw (sp+120),r24
 20020f4:	34 06 00 58 	mvi r6,88
 20020f8:	34 05 00 09 	mvi r5,9
 20020fc:	34 07 00 2a 	mvi r7,42
 2002100:	34 08 00 6c 	mvi r8,108
 2002104:	b8 20 98 00 	mv r19,r1
 2002108:	36 31 00 01 	addi r17,r17,1
 200210c:	36 61 ff e0 	addi r1,r19,-32
 2002110:	54 26 01 13 	bgu r1,r6,200255c <_vfprintf_r+0x690>
 2002114:	2b 82 00 68 	lw r2,(sp+104)
 2002118:	3c 21 00 02 	sli r1,r1,2
 200211c:	b4 41 08 00 	add r1,r2,r1
 2002120:	28 22 00 00 	lw r2,(r1+0)
 2002124:	c0 40 00 00 	b r2
 2002128:	b9 60 88 00 	mv r17,r11
 200212c:	e3 ff ff e9 	bi 20020d0 <_vfprintf_r+0x204>
 2002130:	3b 18 00 10 	ori r24,r24,0x10
 2002134:	23 02 00 10 	andi r2,r24,0x10
 2002138:	44 40 02 9d 	be r2,r0,2002bac <_vfprintf_r+0xce0>
 200213c:	29 8b 00 00 	lw r11,(r12+0)
 2002140:	35 96 00 04 	addi r22,r12,4
 2002144:	34 04 00 01 	mvi r4,1
 2002148:	34 01 00 00 	mvi r1,0
 200214c:	33 81 06 ef 	sb (sp+1775),r1
 2002150:	48 12 01 8f 	bg r0,r18,200278c <_vfprintf_r+0x8c0>
 2002154:	7d 61 00 00 	cmpnei r1,r11,0
 2002158:	7e 42 00 00 	cmpnei r2,r18,0
 200215c:	34 03 ff 7f 	mvi r3,-129
 2002160:	b8 22 08 00 	or r1,r1,r2
 2002164:	a3 03 c0 00 	and r24,r24,r3
 2002168:	37 8e 05 f4 	addi r14,sp,1524
 200216c:	5c 20 01 89 	bne r1,r0,2002790 <_vfprintf_r+0x8c4>
 2002170:	5c 81 00 03 	bne r4,r1,200217c <_vfprintf_r+0x2b0>
 2002174:	23 01 00 01 	andi r1,r24,0x1
 2002178:	5c 24 02 88 	bne r1,r4,2002b98 <_vfprintf_r+0xccc>
 200217c:	b9 c0 a8 00 	mv r21,r14
 2002180:	34 10 00 00 	mvi r16,0
 2002184:	ba 00 d8 00 	mv fp,r16
 2002188:	4e 12 00 02 	bge r16,r18,2002190 <_vfprintf_r+0x2c4>
 200218c:	ba 40 d8 00 	mv fp,r18
 2002190:	34 01 00 00 	mvi r1,0
 2002194:	ba c0 60 00 	mv r12,r22
 2002198:	5b 81 00 94 	sw (sp+148),r1
 200219c:	ba 40 b0 00 	mv r22,r18
 20021a0:	43 81 06 ef 	lbu r1,(sp+1775)
 20021a4:	44 20 00 f7 	be r1,r0,2002580 <_vfprintf_r+0x6b4>
 20021a8:	37 7b 00 01 	addi fp,fp,1
 20021ac:	5b 8c 00 6c 	sw (sp+108),r12
 20021b0:	23 0f 00 84 	andi r15,r24,0x84
 20021b4:	5d e0 00 22 	bne r15,r0,200223c <_vfprintf_r+0x370>
 20021b8:	2b 82 00 78 	lw r2,(sp+120)
 20021bc:	c8 5b 58 00 	sub r11,r2,fp
 20021c0:	4d eb 00 1f 	bge r15,r11,200223c <_vfprintf_r+0x370>
 20021c4:	34 01 00 10 	mvi r1,16
 20021c8:	4c 2b 05 2a 	bge r1,r11,2003670 <_vfprintf_r+0x17a4>
 20021cc:	2b 97 00 4c 	lw r23,(sp+76)
 20021d0:	b8 20 60 00 	mv r12,r1
 20021d4:	34 0e 00 07 	mvi r14,7
 20021d8:	37 92 06 b8 	addi r18,sp,1720
 20021dc:	59 ac 00 04 	sw (r13+4),r12
 20021e0:	2b 82 06 c0 	lw r2,(sp+1728)
 20021e4:	2b 81 06 bc 	lw r1,(sp+1724)
 20021e8:	2b 85 00 4c 	lw r5,(sp+76)
 20021ec:	34 42 00 10 	addi r2,r2,16
 20021f0:	34 21 00 01 	addi r1,r1,1
 20021f4:	59 a5 00 00 	sw (r13+0),r5
 20021f8:	5b 82 06 c0 	sw (sp+1728),r2
 20021fc:	5b 81 06 bc 	sw (sp+1724),r1
 2002200:	48 2e 00 cb 	bg r1,r14,200252c <_vfprintf_r+0x660>
 2002204:	35 ad 00 08 	addi r13,r13,8
 2002208:	35 6b ff f0 	addi r11,r11,-16
 200220c:	49 6c ff f4 	bg r11,r12,20021dc <_vfprintf_r+0x310>
 2002210:	59 ab 00 04 	sw (r13+4),r11
 2002214:	2b 81 06 c0 	lw r1,(sp+1728)
 2002218:	2b 82 06 bc 	lw r2,(sp+1724)
 200221c:	59 b7 00 00 	sw (r13+0),r23
 2002220:	b4 2b 08 00 	add r1,r1,r11
 2002224:	34 42 00 01 	addi r2,r2,1
 2002228:	5b 81 06 c0 	sw (sp+1728),r1
 200222c:	5b 82 06 bc 	sw (sp+1724),r2
 2002230:	34 01 00 07 	mvi r1,7
 2002234:	48 41 03 87 	bg r2,r1,2003050 <_vfprintf_r+0x1184>
 2002238:	35 ad 00 08 	addi r13,r13,8
 200223c:	43 82 06 ef 	lbu r2,(sp+1775)
 2002240:	44 40 00 d6 	be r2,r0,2002598 <_vfprintf_r+0x6cc>
 2002244:	34 01 00 01 	mvi r1,1
 2002248:	59 a1 00 04 	sw (r13+4),r1
 200224c:	2b 83 06 c0 	lw r3,(sp+1728)
 2002250:	2b 82 06 bc 	lw r2,(sp+1724)
 2002254:	b4 61 18 00 	add r3,r3,r1
 2002258:	b4 41 10 00 	add r2,r2,r1
 200225c:	37 81 06 ef 	addi r1,sp,1775
 2002260:	59 a1 00 00 	sw (r13+0),r1
 2002264:	5b 83 06 c0 	sw (sp+1728),r3
 2002268:	5b 82 06 bc 	sw (sp+1724),r2
 200226c:	34 01 00 07 	mvi r1,7
 2002270:	48 41 00 68 	bg r2,r1,2002410 <_vfprintf_r+0x544>
 2002274:	35 ad 00 08 	addi r13,r13,8
 2002278:	34 01 00 80 	mvi r1,128
 200227c:	45 e1 00 6c 	be r15,r1,200242c <_vfprintf_r+0x560>
 2002280:	ca d0 58 00 	sub r11,r22,r16
 2002284:	4c 0b 00 1e 	bge r0,r11,20022fc <_vfprintf_r+0x430>
 2002288:	34 01 00 10 	mvi r1,16
 200228c:	4c 2b 04 4b 	bge r1,r11,20033b8 <_vfprintf_r+0x14ec>
 2002290:	b8 20 60 00 	mv r12,r1
 2002294:	ba 80 90 00 	mv r18,r20
 2002298:	34 0e 00 07 	mvi r14,7
 200229c:	37 8f 06 b8 	addi r15,sp,1720
 20022a0:	59 ac 00 04 	sw (r13+4),r12
 20022a4:	2b 82 06 c0 	lw r2,(sp+1728)
 20022a8:	2b 81 06 bc 	lw r1,(sp+1724)
 20022ac:	59 b4 00 00 	sw (r13+0),r20
 20022b0:	34 42 00 10 	addi r2,r2,16
 20022b4:	34 21 00 01 	addi r1,r1,1
 20022b8:	5b 82 06 c0 	sw (sp+1728),r2
 20022bc:	5b 81 06 bc 	sw (sp+1724),r1
 20022c0:	48 2e 00 95 	bg r1,r14,2002514 <_vfprintf_r+0x648>
 20022c4:	35 ad 00 08 	addi r13,r13,8
 20022c8:	35 6b ff f0 	addi r11,r11,-16
 20022cc:	49 6c ff f5 	bg r11,r12,20022a0 <_vfprintf_r+0x3d4>
 20022d0:	59 ab 00 04 	sw (r13+4),r11
 20022d4:	2b 81 06 c0 	lw r1,(sp+1728)
 20022d8:	2b 82 06 bc 	lw r2,(sp+1724)
 20022dc:	59 b2 00 00 	sw (r13+0),r18
 20022e0:	b4 2b 08 00 	add r1,r1,r11
 20022e4:	34 42 00 01 	addi r2,r2,1
 20022e8:	5b 81 06 c0 	sw (sp+1728),r1
 20022ec:	5b 82 06 bc 	sw (sp+1724),r2
 20022f0:	34 01 00 07 	mvi r1,7
 20022f4:	48 41 01 d9 	bg r2,r1,2002a58 <_vfprintf_r+0xb8c>
 20022f8:	35 ad 00 08 	addi r13,r13,8
 20022fc:	23 01 01 00 	andi r1,r24,0x100
 2002300:	5c 20 00 da 	bne r1,r0,2002668 <_vfprintf_r+0x79c>
 2002304:	59 b0 00 04 	sw (r13+4),r16
 2002308:	2b 85 06 c0 	lw r5,(sp+1728)
 200230c:	2b 82 06 bc 	lw r2,(sp+1724)
 2002310:	59 b5 00 00 	sw (r13+0),r21
 2002314:	b4 b0 08 00 	add r1,r5,r16
 2002318:	34 42 00 01 	addi r2,r2,1
 200231c:	5b 81 06 c0 	sw (sp+1728),r1
 2002320:	5b 82 06 bc 	sw (sp+1724),r2
 2002324:	34 01 00 07 	mvi r1,7
 2002328:	48 41 01 44 	bg r2,r1,2002838 <_vfprintf_r+0x96c>
 200232c:	35 a4 00 08 	addi r4,r13,8
 2002330:	23 01 00 04 	andi r1,r24,0x4
 2002334:	44 20 00 25 	be r1,r0,20023c8 <_vfprintf_r+0x4fc>
 2002338:	2b 82 00 78 	lw r2,(sp+120)
 200233c:	c8 5b 58 00 	sub r11,r2,fp
 2002340:	4c 0b 00 22 	bge r0,r11,20023c8 <_vfprintf_r+0x4fc>
 2002344:	34 01 00 10 	mvi r1,16
 2002348:	4c 2b 04 d4 	bge r1,r11,2003698 <_vfprintf_r+0x17cc>
 200234c:	2b 97 00 4c 	lw r23,(sp+76)
 2002350:	b8 20 60 00 	mv r12,r1
 2002354:	34 0d 00 07 	mvi r13,7
 2002358:	37 8e 06 b8 	addi r14,sp,1720
 200235c:	58 8c 00 04 	sw (r4+4),r12
 2002360:	2b 82 06 c0 	lw r2,(sp+1728)
 2002364:	2b 81 06 bc 	lw r1,(sp+1724)
 2002368:	2b 85 00 4c 	lw r5,(sp+76)
 200236c:	34 42 00 10 	addi r2,r2,16
 2002370:	34 21 00 01 	addi r1,r1,1
 2002374:	58 85 00 00 	sw (r4+0),r5
 2002378:	5b 82 06 c0 	sw (sp+1728),r2
 200237c:	5b 81 06 bc 	sw (sp+1724),r1
 2002380:	48 2d 00 71 	bg r1,r13,2002544 <_vfprintf_r+0x678>
 2002384:	34 84 00 08 	addi r4,r4,8
 2002388:	35 6b ff f0 	addi r11,r11,-16
 200238c:	49 6c ff f4 	bg r11,r12,200235c <_vfprintf_r+0x490>
 2002390:	58 8b 00 04 	sw (r4+4),r11
 2002394:	2b 85 06 c0 	lw r5,(sp+1728)
 2002398:	2b 81 06 bc 	lw r1,(sp+1724)
 200239c:	58 97 00 00 	sw (r4+0),r23
 20023a0:	b4 ab 28 00 	add r5,r5,r11
 20023a4:	34 21 00 01 	addi r1,r1,1
 20023a8:	5b 85 06 c0 	sw (sp+1728),r5
 20023ac:	5b 81 06 bc 	sw (sp+1724),r1
 20023b0:	34 02 00 07 	mvi r2,7
 20023b4:	4c 41 00 06 	bge r2,r1,20023cc <_vfprintf_r+0x500>
 20023b8:	bb 20 08 00 	mv r1,r25
 20023bc:	37 82 06 b8 	addi r2,sp,1720
 20023c0:	fb ff fe ac 	calli 2001e70 <__sprint>
 20023c4:	5c 20 00 8b 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 20023c8:	2b 85 06 c0 	lw r5,(sp+1728)
 20023cc:	2b 81 00 78 	lw r1,(sp+120)
 20023d0:	4c 3b 00 02 	bge r1,fp,20023d8 <_vfprintf_r+0x50c>
 20023d4:	bb 60 08 00 	mv r1,fp
 20023d8:	2b 82 00 74 	lw r2,(sp+116)
 20023dc:	b4 41 10 00 	add r2,r2,r1
 20023e0:	5b 82 00 74 	sw (sp+116),r2
 20023e4:	5c a0 00 7f 	bne r5,r0,20025e0 <_vfprintf_r+0x714>
 20023e8:	2b 85 00 94 	lw r5,(sp+148)
 20023ec:	34 01 00 00 	mvi r1,0
 20023f0:	5b 81 06 bc 	sw (sp+1724),r1
 20023f4:	37 8d 06 50 	addi r13,sp,1616
 20023f8:	44 a1 ff 18 	be r5,r1,2002058 <_vfprintf_r+0x18c>
 20023fc:	2b 81 00 70 	lw r1,(sp+112)
 2002400:	b8 a0 10 00 	mv r2,r5
 2002404:	37 8d 06 50 	addi r13,sp,1616
 2002408:	f8 00 0d cd 	calli 2005b3c <_free_r>
 200240c:	e3 ff ff 13 	bi 2002058 <_vfprintf_r+0x18c>
 2002410:	bb 20 08 00 	mv r1,r25
 2002414:	37 82 06 b8 	addi r2,sp,1720
 2002418:	fb ff fe 96 	calli 2001e70 <__sprint>
 200241c:	5c 20 00 75 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002420:	34 01 00 80 	mvi r1,128
 2002424:	37 8d 06 50 	addi r13,sp,1616
 2002428:	5d e1 ff 96 	bne r15,r1,2002280 <_vfprintf_r+0x3b4>
 200242c:	2b 82 00 78 	lw r2,(sp+120)
 2002430:	c8 5b 58 00 	sub r11,r2,fp
 2002434:	4c 0b ff 93 	bge r0,r11,2002280 <_vfprintf_r+0x3b4>
 2002438:	34 01 00 10 	mvi r1,16
 200243c:	4c 2b 04 b6 	bge r1,r11,2003714 <_vfprintf_r+0x1848>
 2002440:	b8 20 60 00 	mv r12,r1
 2002444:	ba 80 90 00 	mv r18,r20
 2002448:	34 0e 00 07 	mvi r14,7
 200244c:	37 8f 06 b8 	addi r15,sp,1720
 2002450:	59 ac 00 04 	sw (r13+4),r12
 2002454:	2b 82 06 c0 	lw r2,(sp+1728)
 2002458:	2b 81 06 bc 	lw r1,(sp+1724)
 200245c:	59 b4 00 00 	sw (r13+0),r20
 2002460:	34 42 00 10 	addi r2,r2,16
 2002464:	34 21 00 01 	addi r1,r1,1
 2002468:	5b 82 06 c0 	sw (sp+1728),r2
 200246c:	5b 81 06 bc 	sw (sp+1724),r1
 2002470:	48 2e 00 ec 	bg r1,r14,2002820 <_vfprintf_r+0x954>
 2002474:	35 ad 00 08 	addi r13,r13,8
 2002478:	35 6b ff f0 	addi r11,r11,-16
 200247c:	49 6c ff f5 	bg r11,r12,2002450 <_vfprintf_r+0x584>
 2002480:	59 ab 00 04 	sw (r13+4),r11
 2002484:	2b 81 06 c0 	lw r1,(sp+1728)
 2002488:	2b 82 06 bc 	lw r2,(sp+1724)
 200248c:	59 b2 00 00 	sw (r13+0),r18
 2002490:	b4 2b 08 00 	add r1,r1,r11
 2002494:	34 42 00 01 	addi r2,r2,1
 2002498:	5b 81 06 c0 	sw (sp+1728),r1
 200249c:	5b 82 06 bc 	sw (sp+1724),r2
 20024a0:	34 01 00 07 	mvi r1,7
 20024a4:	48 41 03 36 	bg r2,r1,200317c <_vfprintf_r+0x12b0>
 20024a8:	35 ad 00 08 	addi r13,r13,8
 20024ac:	e3 ff ff 75 	bi 2002280 <_vfprintf_r+0x3b4>
 20024b0:	3b 18 00 10 	ori r24,r24,0x10
 20024b4:	23 02 00 10 	andi r2,r24,0x10
 20024b8:	5c 40 01 c4 	bne r2,r0,2002bc8 <_vfprintf_r+0xcfc>
 20024bc:	23 01 00 40 	andi r1,r24,0x40
 20024c0:	44 22 03 49 	be r1,r2,20031e4 <_vfprintf_r+0x1318>
 20024c4:	29 81 00 00 	lw r1,(r12+0)
 20024c8:	b8 40 20 00 	mv r4,r2
 20024cc:	35 96 00 04 	addi r22,r12,4
 20024d0:	20 2b ff ff 	andi r11,r1,0xffff
 20024d4:	e3 ff ff 1d 	bi 2002148 <_vfprintf_r+0x27c>
 20024d8:	3b 18 00 10 	ori r24,r24,0x10
 20024dc:	23 02 00 10 	andi r2,r24,0x10
 20024e0:	5c 40 00 09 	bne r2,r0,2002504 <_vfprintf_r+0x638>
 20024e4:	23 01 00 40 	andi r1,r24,0x40
 20024e8:	44 22 00 07 	be r1,r2,2002504 <_vfprintf_r+0x638>
 20024ec:	29 81 00 00 	lw r1,(r12+0)
 20024f0:	35 96 00 04 	addi r22,r12,4
 20024f4:	dc 20 58 00 	sexth r11,r1
 20024f8:	48 0b 01 c6 	bg r0,r11,2002c10 <_vfprintf_r+0xd44>
 20024fc:	34 04 00 01 	mvi r4,1
 2002500:	e3 ff ff 14 	bi 2002150 <_vfprintf_r+0x284>
 2002504:	29 8b 00 00 	lw r11,(r12+0)
 2002508:	35 96 00 04 	addi r22,r12,4
 200250c:	48 0b 01 c1 	bg r0,r11,2002c10 <_vfprintf_r+0xd44>
 2002510:	e3 ff ff fb 	bi 20024fc <_vfprintf_r+0x630>
 2002514:	bb 20 08 00 	mv r1,r25
 2002518:	b9 e0 10 00 	mv r2,r15
 200251c:	fb ff fe 55 	calli 2001e70 <__sprint>
 2002520:	5c 20 00 34 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002524:	37 8d 06 50 	addi r13,sp,1616
 2002528:	e3 ff ff 68 	bi 20022c8 <_vfprintf_r+0x3fc>
 200252c:	bb 20 08 00 	mv r1,r25
 2002530:	ba 40 10 00 	mv r2,r18
 2002534:	fb ff fe 4f 	calli 2001e70 <__sprint>
 2002538:	5c 20 00 2e 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 200253c:	37 8d 06 50 	addi r13,sp,1616
 2002540:	e3 ff ff 32 	bi 2002208 <_vfprintf_r+0x33c>
 2002544:	bb 20 08 00 	mv r1,r25
 2002548:	b9 c0 10 00 	mv r2,r14
 200254c:	fb ff fe 49 	calli 2001e70 <__sprint>
 2002550:	5c 20 00 28 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002554:	37 84 06 50 	addi r4,sp,1616
 2002558:	e3 ff ff 8c 	bi 2002388 <_vfprintf_r+0x4bc>
 200255c:	46 60 04 3a 	be r19,r0,2003644 <_vfprintf_r+0x1778>
 2002560:	34 10 00 01 	mvi r16,1
 2002564:	34 01 00 00 	mvi r1,0
 2002568:	33 81 06 ef 	sb (sp+1775),r1
 200256c:	33 93 04 98 	sb (sp+1176),r19
 2002570:	37 95 04 98 	addi r21,sp,1176
 2002574:	ba 00 d8 00 	mv fp,r16
 2002578:	34 16 00 00 	mvi r22,0
 200257c:	5b 96 00 94 	sw (sp+148),r22
 2002580:	23 01 00 02 	andi r1,r24,0x2
 2002584:	5b 8c 00 6c 	sw (sp+108),r12
 2002588:	44 20 ff 0a 	be r1,r0,20021b0 <_vfprintf_r+0x2e4>
 200258c:	37 7b 00 02 	addi fp,fp,2
 2002590:	5b 8c 00 6c 	sw (sp+108),r12
 2002594:	e3 ff ff 07 	bi 20021b0 <_vfprintf_r+0x2e4>
 2002598:	23 01 00 02 	andi r1,r24,0x2
 200259c:	44 22 ff 37 	be r1,r2,2002278 <_vfprintf_r+0x3ac>
 20025a0:	34 01 00 30 	mvi r1,48
 20025a4:	33 81 06 ec 	sb (sp+1772),r1
 20025a8:	33 93 06 ed 	sb (sp+1773),r19
 20025ac:	34 01 00 02 	mvi r1,2
 20025b0:	59 a1 00 04 	sw (r13+4),r1
 20025b4:	37 81 06 ec 	addi r1,sp,1772
 20025b8:	2b 82 06 bc 	lw r2,(sp+1724)
 20025bc:	59 a1 00 00 	sw (r13+0),r1
 20025c0:	2b 81 06 c0 	lw r1,(sp+1728)
 20025c4:	34 42 00 01 	addi r2,r2,1
 20025c8:	5b 82 06 bc 	sw (sp+1724),r2
 20025cc:	34 21 00 02 	addi r1,r1,2
 20025d0:	5b 81 06 c0 	sw (sp+1728),r1
 20025d4:	34 01 00 07 	mvi r1,7
 20025d8:	48 41 ff 8e 	bg r2,r1,2002410 <_vfprintf_r+0x544>
 20025dc:	e3 ff ff 26 	bi 2002274 <_vfprintf_r+0x3a8>
 20025e0:	bb 20 08 00 	mv r1,r25
 20025e4:	37 82 06 b8 	addi r2,sp,1720
 20025e8:	fb ff fe 22 	calli 2001e70 <__sprint>
 20025ec:	44 20 ff 7f 	be r1,r0,20023e8 <_vfprintf_r+0x51c>
 20025f0:	2b 81 00 94 	lw r1,(sp+148)
 20025f4:	44 20 00 04 	be r1,r0,2002604 <_vfprintf_r+0x738>
 20025f8:	2b 81 00 70 	lw r1,(sp+112)
 20025fc:	2b 82 00 94 	lw r2,(sp+148)
 2002600:	f8 00 0d 4f 	calli 2005b3c <_free_r>
 2002604:	2f 21 00 0c 	lhu r1,(r25+12)
 2002608:	20 21 00 40 	andi r1,r1,0x40
 200260c:	44 20 00 03 	be r1,r0,2002618 <_vfprintf_r+0x74c>
 2002610:	34 02 ff ff 	mvi r2,-1
 2002614:	5b 82 00 74 	sw (sp+116),r2
 2002618:	2b 81 00 74 	lw r1,(sp+116)
 200261c:	2b 9d 00 04 	lw ra,(sp+4)
 2002620:	2b 8b 00 44 	lw r11,(sp+68)
 2002624:	2b 8c 00 40 	lw r12,(sp+64)
 2002628:	2b 8d 00 3c 	lw r13,(sp+60)
 200262c:	2b 8e 00 38 	lw r14,(sp+56)
 2002630:	2b 8f 00 34 	lw r15,(sp+52)
 2002634:	2b 90 00 30 	lw r16,(sp+48)
 2002638:	2b 91 00 2c 	lw r17,(sp+44)
 200263c:	2b 92 00 28 	lw r18,(sp+40)
 2002640:	2b 93 00 24 	lw r19,(sp+36)
 2002644:	2b 94 00 20 	lw r20,(sp+32)
 2002648:	2b 95 00 1c 	lw r21,(sp+28)
 200264c:	2b 96 00 18 	lw r22,(sp+24)
 2002650:	2b 97 00 14 	lw r23,(sp+20)
 2002654:	2b 98 00 10 	lw r24,(sp+16)
 2002658:	2b 99 00 0c 	lw r25,(sp+12)
 200265c:	2b 9b 00 08 	lw fp,(sp+8)
 2002660:	37 9c 06 ec 	addi sp,sp,1772
 2002664:	c3 a0 00 00 	ret
 2002668:	34 01 00 65 	mvi r1,101
 200266c:	4c 33 00 79 	bge r1,r19,2002850 <_vfprintf_r+0x984>
 2002670:	2b 81 00 8c 	lw r1,(sp+140)
 2002674:	2b 82 00 90 	lw r2,(sp+144)
 2002678:	34 03 00 00 	mvi r3,0
 200267c:	b8 60 20 00 	mv r4,r3
 2002680:	f8 00 1a b7 	calli 200915c <__eqdf2>
 2002684:	5c 20 00 fe 	bne r1,r0,2002a7c <_vfprintf_r+0xbb0>
 2002688:	34 01 00 01 	mvi r1,1
 200268c:	59 a1 00 04 	sw (r13+4),r1
 2002690:	2b 85 06 c0 	lw r5,(sp+1728)
 2002694:	2b 82 06 bc 	lw r2,(sp+1724)
 2002698:	78 01 02 00 	mvhi r1,0x200
 200269c:	38 21 a2 bc 	ori r1,r1,0xa2bc
 20026a0:	34 a3 00 01 	addi r3,r5,1
 20026a4:	34 42 00 01 	addi r2,r2,1
 20026a8:	59 a1 00 00 	sw (r13+0),r1
 20026ac:	5b 83 06 c0 	sw (sp+1728),r3
 20026b0:	5b 82 06 bc 	sw (sp+1724),r2
 20026b4:	34 01 00 07 	mvi r1,7
 20026b8:	48 41 03 3a 	bg r2,r1,20033a0 <_vfprintf_r+0x14d4>
 20026bc:	35 a4 00 08 	addi r4,r13,8
 20026c0:	2b 81 06 e8 	lw r1,(sp+1768)
 20026c4:	2b 85 00 84 	lw r5,(sp+132)
 20026c8:	48 a1 00 03 	bg r5,r1,20026d4 <_vfprintf_r+0x808>
 20026cc:	23 01 00 01 	andi r1,r24,0x1
 20026d0:	44 20 ff 18 	be r1,r0,2002330 <_vfprintf_r+0x464>
 20026d4:	34 01 00 01 	mvi r1,1
 20026d8:	58 81 00 04 	sw (r4+4),r1
 20026dc:	2b 81 00 7c 	lw r1,(sp+124)
 20026e0:	2b 85 06 c0 	lw r5,(sp+1728)
 20026e4:	58 81 00 00 	sw (r4+0),r1
 20026e8:	2b 81 06 bc 	lw r1,(sp+1724)
 20026ec:	34 a2 00 01 	addi r2,r5,1
 20026f0:	5b 82 06 c0 	sw (sp+1728),r2
 20026f4:	34 21 00 01 	addi r1,r1,1
 20026f8:	5b 81 06 bc 	sw (sp+1724),r1
 20026fc:	34 02 00 07 	mvi r2,7
 2002700:	48 22 03 d6 	bg r1,r2,2003658 <_vfprintf_r+0x178c>
 2002704:	34 84 00 08 	addi r4,r4,8
 2002708:	2b 82 00 84 	lw r2,(sp+132)
 200270c:	34 4b ff ff 	addi r11,r2,-1
 2002710:	4c 0b ff 08 	bge r0,r11,2002330 <_vfprintf_r+0x464>
 2002714:	34 01 00 10 	mvi r1,16
 2002718:	4c 2b 04 6e 	bge r1,r11,20038d0 <_vfprintf_r+0x1a04>
 200271c:	b8 20 60 00 	mv r12,r1
 2002720:	ba 80 90 00 	mv r18,r20
 2002724:	34 0d 00 07 	mvi r13,7
 2002728:	37 8e 06 b8 	addi r14,sp,1720
 200272c:	58 8c 00 04 	sw (r4+4),r12
 2002730:	2b 82 06 c0 	lw r2,(sp+1728)
 2002734:	2b 81 06 bc 	lw r1,(sp+1724)
 2002738:	58 94 00 00 	sw (r4+0),r20
 200273c:	34 42 00 10 	addi r2,r2,16
 2002740:	34 21 00 01 	addi r1,r1,1
 2002744:	5b 82 06 c0 	sw (sp+1728),r2
 2002748:	5b 81 06 bc 	sw (sp+1724),r1
 200274c:	48 2d 02 1c 	bg r1,r13,2002fbc <_vfprintf_r+0x10f0>
 2002750:	34 84 00 08 	addi r4,r4,8
 2002754:	35 6b ff f0 	addi r11,r11,-16
 2002758:	49 6c ff f5 	bg r11,r12,200272c <_vfprintf_r+0x860>
 200275c:	58 8b 00 04 	sw (r4+4),r11
 2002760:	2b 85 06 c0 	lw r5,(sp+1728)
 2002764:	58 92 00 00 	sw (r4+0),r18
 2002768:	b4 ab 08 00 	add r1,r5,r11
 200276c:	2b 82 06 bc 	lw r2,(sp+1724)
 2002770:	5b 81 06 c0 	sw (sp+1728),r1
 2002774:	34 01 00 07 	mvi r1,7
 2002778:	34 42 00 01 	addi r2,r2,1
 200277c:	5b 82 06 bc 	sw (sp+1724),r2
 2002780:	48 41 00 2e 	bg r2,r1,2002838 <_vfprintf_r+0x96c>
 2002784:	34 84 00 08 	addi r4,r4,8
 2002788:	e3 ff fe ea 	bi 2002330 <_vfprintf_r+0x464>
 200278c:	37 8e 05 f4 	addi r14,sp,1524
 2002790:	34 01 00 01 	mvi r1,1
 2002794:	44 81 02 10 	be r4,r1,2002fd4 <_vfprintf_r+0x1108>
 2002798:	b9 c0 a8 00 	mv r21,r14
 200279c:	44 80 00 11 	be r4,r0,20027e0 <_vfprintf_r+0x914>
 20027a0:	34 01 00 02 	mvi r1,2
 20027a4:	44 81 01 e9 	be r4,r1,2002f48 <_vfprintf_r+0x107c>
 20027a8:	78 01 02 00 	mvhi r1,0x200
 20027ac:	38 21 a2 9c 	ori r1,r1,0xa29c
 20027b0:	fb ff fd 92 	calli 2001df8 <strlen>
 20027b4:	b8 20 80 00 	mv r16,r1
 20027b8:	b8 20 d8 00 	mv fp,r1
 20027bc:	4c 32 00 02 	bge r1,r18,20027c4 <_vfprintf_r+0x8f8>
 20027c0:	ba 40 d8 00 	mv fp,r18
 20027c4:	78 15 02 00 	mvhi r21,0x200
 20027c8:	34 05 00 00 	mvi r5,0
 20027cc:	ba c0 60 00 	mv r12,r22
 20027d0:	3a b5 a2 9c 	ori r21,r21,0xa29c
 20027d4:	ba 40 b0 00 	mv r22,r18
 20027d8:	5b 85 00 94 	sw (sp+148),r5
 20027dc:	e3 ff fe 71 	bi 20021a0 <_vfprintf_r+0x2d4>
 20027e0:	21 61 00 07 	andi r1,r11,0x7
 20027e4:	36 b5 ff ff 	addi r21,r21,-1
 20027e8:	34 22 00 30 	addi r2,r1,48
 20027ec:	01 6b 00 03 	srui r11,r11,3
 20027f0:	32 a2 00 00 	sb (r21+0),r2
 20027f4:	5d 60 ff fb 	bne r11,r0,20027e0 <_vfprintf_r+0x914>
 20027f8:	23 01 00 01 	andi r1,r24,0x1
 20027fc:	c9 d5 80 00 	sub r16,r14,r21
 2002800:	44 2b fe 61 	be r1,r11,2002184 <_vfprintf_r+0x2b8>
 2002804:	34 01 00 30 	mvi r1,48
 2002808:	c9 d5 80 00 	sub r16,r14,r21
 200280c:	44 41 fe 5e 	be r2,r1,2002184 <_vfprintf_r+0x2b8>
 2002810:	36 b5 ff ff 	addi r21,r21,-1
 2002814:	32 a1 00 00 	sb (r21+0),r1
 2002818:	c9 d5 80 00 	sub r16,r14,r21
 200281c:	e3 ff fe 5a 	bi 2002184 <_vfprintf_r+0x2b8>
 2002820:	bb 20 08 00 	mv r1,r25
 2002824:	b9 e0 10 00 	mv r2,r15
 2002828:	fb ff fd 92 	calli 2001e70 <__sprint>
 200282c:	5c 20 ff 71 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002830:	37 8d 06 50 	addi r13,sp,1616
 2002834:	e3 ff ff 11 	bi 2002478 <_vfprintf_r+0x5ac>
 2002838:	bb 20 08 00 	mv r1,r25
 200283c:	37 82 06 b8 	addi r2,sp,1720
 2002840:	fb ff fd 8c 	calli 2001e70 <__sprint>
 2002844:	5c 20 ff 6b 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002848:	37 84 06 50 	addi r4,sp,1616
 200284c:	e3 ff fe b9 	bi 2002330 <_vfprintf_r+0x464>
 2002850:	2b 85 00 84 	lw r5,(sp+132)
 2002854:	34 02 00 01 	mvi r2,1
 2002858:	48 a2 00 0f 	bg r5,r2,2002894 <_vfprintf_r+0x9c8>
 200285c:	a3 02 08 00 	and r1,r24,r2
 2002860:	5c 20 00 0d 	bne r1,r0,2002894 <_vfprintf_r+0x9c8>
 2002864:	59 a2 00 04 	sw (r13+4),r2
 2002868:	2b 81 06 c0 	lw r1,(sp+1728)
 200286c:	2b 82 06 bc 	lw r2,(sp+1724)
 2002870:	59 b5 00 00 	sw (r13+0),r21
 2002874:	34 21 00 01 	addi r1,r1,1
 2002878:	34 42 00 01 	addi r2,r2,1
 200287c:	5b 81 06 c0 	sw (sp+1728),r1
 2002880:	5b 82 06 bc 	sw (sp+1724),r2
 2002884:	34 01 00 07 	mvi r1,7
 2002888:	48 41 01 bb 	bg r2,r1,2002f74 <_vfprintf_r+0x10a8>
 200288c:	35 ac 00 08 	addi r12,r13,8
 2002890:	e0 00 00 38 	bi 2002970 <_vfprintf_r+0xaa4>
 2002894:	42 a1 00 00 	lbu r1,(r21+0)
 2002898:	34 02 00 02 	mvi r2,2
 200289c:	33 81 06 ec 	sb (sp+1772),r1
 20028a0:	34 01 00 2e 	mvi r1,46
 20028a4:	33 81 06 ed 	sb (sp+1773),r1
 20028a8:	59 a2 00 04 	sw (r13+4),r2
 20028ac:	37 82 06 ec 	addi r2,sp,1772
 20028b0:	2b 81 06 c0 	lw r1,(sp+1728)
 20028b4:	59 a2 00 00 	sw (r13+0),r2
 20028b8:	2b 82 06 bc 	lw r2,(sp+1724)
 20028bc:	34 21 00 02 	addi r1,r1,2
 20028c0:	5b 81 06 c0 	sw (sp+1728),r1
 20028c4:	34 42 00 01 	addi r2,r2,1
 20028c8:	5b 82 06 bc 	sw (sp+1724),r2
 20028cc:	34 01 00 07 	mvi r1,7
 20028d0:	48 41 02 25 	bg r2,r1,2003164 <_vfprintf_r+0x1298>
 20028d4:	35 ac 00 08 	addi r12,r13,8
 20028d8:	2b 81 00 8c 	lw r1,(sp+140)
 20028dc:	2b 82 00 90 	lw r2,(sp+144)
 20028e0:	34 03 00 00 	mvi r3,0
 20028e4:	b8 60 20 00 	mv r4,r3
 20028e8:	f8 00 1a 40 	calli 20091e8 <__nedf2>
 20028ec:	5c 20 00 bb 	bne r1,r0,2002bd8 <_vfprintf_r+0xd0c>
 20028f0:	2b 82 00 84 	lw r2,(sp+132)
 20028f4:	34 4b ff ff 	addi r11,r2,-1
 20028f8:	4c 2b 00 1e 	bge r1,r11,2002970 <_vfprintf_r+0xaa4>
 20028fc:	34 01 00 10 	mvi r1,16
 2002900:	4c 2b 03 f6 	bge r1,r11,20038d8 <_vfprintf_r+0x1a0c>
 2002904:	b8 20 68 00 	mv r13,r1
 2002908:	ba 80 90 00 	mv r18,r20
 200290c:	34 0e 00 07 	mvi r14,7
 2002910:	37 8f 06 b8 	addi r15,sp,1720
 2002914:	59 8d 00 04 	sw (r12+4),r13
 2002918:	2b 82 06 c0 	lw r2,(sp+1728)
 200291c:	2b 81 06 bc 	lw r1,(sp+1724)
 2002920:	59 94 00 00 	sw (r12+0),r20
 2002924:	34 42 00 10 	addi r2,r2,16
 2002928:	34 21 00 01 	addi r1,r1,1
 200292c:	5b 82 06 c0 	sw (sp+1728),r2
 2002930:	5b 81 06 bc 	sw (sp+1724),r1
 2002934:	48 2e 01 9c 	bg r1,r14,2002fa4 <_vfprintf_r+0x10d8>
 2002938:	35 8c 00 08 	addi r12,r12,8
 200293c:	35 6b ff f0 	addi r11,r11,-16
 2002940:	49 6d ff f5 	bg r11,r13,2002914 <_vfprintf_r+0xa48>
 2002944:	59 8b 00 04 	sw (r12+4),r11
 2002948:	2b 81 06 c0 	lw r1,(sp+1728)
 200294c:	2b 82 06 bc 	lw r2,(sp+1724)
 2002950:	59 92 00 00 	sw (r12+0),r18
 2002954:	b4 2b 08 00 	add r1,r1,r11
 2002958:	34 42 00 01 	addi r2,r2,1
 200295c:	5b 81 06 c0 	sw (sp+1728),r1
 2002960:	5b 82 06 bc 	sw (sp+1724),r2
 2002964:	34 01 00 07 	mvi r1,7
 2002968:	48 41 01 83 	bg r2,r1,2002f74 <_vfprintf_r+0x10a8>
 200296c:	35 8c 00 08 	addi r12,r12,8
 2002970:	2b 85 00 80 	lw r5,(sp+128)
 2002974:	2b 81 00 80 	lw r1,(sp+128)
 2002978:	59 85 00 04 	sw (r12+4),r5
 200297c:	2b 85 06 c0 	lw r5,(sp+1728)
 2002980:	2b 82 06 bc 	lw r2,(sp+1724)
 2002984:	b4 a1 18 00 	add r3,r5,r1
 2002988:	34 42 00 01 	addi r2,r2,1
 200298c:	37 81 06 d4 	addi r1,sp,1748
 2002990:	59 81 00 00 	sw (r12+0),r1
 2002994:	5b 83 06 c0 	sw (sp+1728),r3
 2002998:	5b 82 06 bc 	sw (sp+1724),r2
 200299c:	34 01 00 07 	mvi r1,7
 20029a0:	48 41 ff a6 	bg r2,r1,2002838 <_vfprintf_r+0x96c>
 20029a4:	35 84 00 08 	addi r4,r12,8
 20029a8:	e3 ff fe 62 	bi 2002330 <_vfprintf_r+0x464>
 20029ac:	bb 20 08 00 	mv r1,r25
 20029b0:	37 82 06 b8 	addi r2,sp,1720
 20029b4:	fb ff fd 2f 	calli 2001e70 <__sprint>
 20029b8:	5c 20 ff 13 	bne r1,r0,2002604 <_vfprintf_r+0x738>
 20029bc:	37 8d 06 50 	addi r13,sp,1616
 20029c0:	e3 ff fd bf 	bi 20020bc <_vfprintf_r+0x1f0>
 20029c4:	1f 21 00 0e 	lh r1,(r25+14)
 20029c8:	2f 28 00 0e 	lhu r8,(r25+14)
 20029cc:	48 01 fd 68 	bg r0,r1,2001f6c <_vfprintf_r+0xa0>
 20029d0:	34 05 ff fd 	mvi r5,-3
 20029d4:	a0 65 28 00 	and r5,r3,r5
 20029d8:	0f 85 06 00 	sh (sp+1536),r5
 20029dc:	34 05 00 00 	mvi r5,0
 20029e0:	5b 85 06 0c 	sw (sp+1548),r5
 20029e4:	2b 25 00 1c 	lw r5,(r25+28)
 20029e8:	2b 81 00 70 	lw r1,(sp+112)
 20029ec:	2b 84 00 6c 	lw r4,(sp+108)
 20029f0:	5b 85 06 10 	sw (sp+1552),r5
 20029f4:	2b 25 00 24 	lw r5,(r25+36)
 20029f8:	37 8c 05 f4 	addi r12,sp,1524
 20029fc:	37 86 00 98 	addi r6,sp,152
 2002a00:	34 07 04 00 	mvi r7,1024
 2002a04:	b9 60 18 00 	mv r3,r11
 2002a08:	b9 80 10 00 	mv r2,r12
 2002a0c:	0f 88 06 02 	sh (sp+1538),r8
 2002a10:	5b 86 06 04 	sw (sp+1540),r6
 2002a14:	5b 87 06 08 	sw (sp+1544),r7
 2002a18:	5b 85 06 18 	sw (sp+1560),r5
 2002a1c:	5b 86 05 f4 	sw (sp+1524),r6
 2002a20:	5b 87 05 fc 	sw (sp+1532),r7
 2002a24:	fb ff fd 2a 	calli 2001ecc <_vfprintf_r>
 2002a28:	5b 81 00 74 	sw (sp+116),r1
 2002a2c:	48 01 00 04 	bg r0,r1,2002a3c <_vfprintf_r+0xb70>
 2002a30:	b9 80 08 00 	mv r1,r12
 2002a34:	f8 00 0b 65 	calli 20057c8 <fflush>
 2002a38:	5c 20 03 aa 	bne r1,r0,20038e0 <_vfprintf_r+0x1a14>
 2002a3c:	2f 81 06 00 	lhu r1,(sp+1536)
 2002a40:	20 21 00 40 	andi r1,r1,0x40
 2002a44:	44 20 fe f5 	be r1,r0,2002618 <_vfprintf_r+0x74c>
 2002a48:	2f 21 00 0c 	lhu r1,(r25+12)
 2002a4c:	38 21 00 40 	ori r1,r1,0x40
 2002a50:	0f 21 00 0c 	sh (r25+12),r1
 2002a54:	e3 ff fe f1 	bi 2002618 <_vfprintf_r+0x74c>
 2002a58:	bb 20 08 00 	mv r1,r25
 2002a5c:	37 82 06 b8 	addi r2,sp,1720
 2002a60:	fb ff fd 04 	calli 2001e70 <__sprint>
 2002a64:	5c 20 fe e3 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002a68:	37 8d 06 50 	addi r13,sp,1616
 2002a6c:	e3 ff fe 24 	bi 20022fc <_vfprintf_r+0x430>
 2002a70:	b8 40 08 00 	mv r1,r2
 2002a74:	f8 00 0b 96 	calli 20058cc <__sinit>
 2002a78:	e3 ff fd 34 	bi 2001f48 <_vfprintf_r+0x7c>
 2002a7c:	2b 82 06 e8 	lw r2,(sp+1768)
 2002a80:	48 40 01 7a 	bg r2,r0,2003068 <_vfprintf_r+0x119c>
 2002a84:	34 01 00 01 	mvi r1,1
 2002a88:	59 a1 00 04 	sw (r13+4),r1
 2002a8c:	2b 85 06 c0 	lw r5,(sp+1728)
 2002a90:	2b 82 06 bc 	lw r2,(sp+1724)
 2002a94:	78 01 02 00 	mvhi r1,0x200
 2002a98:	38 21 a2 bc 	ori r1,r1,0xa2bc
 2002a9c:	34 a3 00 01 	addi r3,r5,1
 2002aa0:	34 42 00 01 	addi r2,r2,1
 2002aa4:	59 a1 00 00 	sw (r13+0),r1
 2002aa8:	5b 83 06 c0 	sw (sp+1728),r3
 2002aac:	5b 82 06 bc 	sw (sp+1724),r2
 2002ab0:	34 01 00 07 	mvi r1,7
 2002ab4:	48 41 02 cc 	bg r2,r1,20035e4 <_vfprintf_r+0x1718>
 2002ab8:	35 a4 00 08 	addi r4,r13,8
 2002abc:	2b 81 06 e8 	lw r1,(sp+1768)
 2002ac0:	5c 20 00 03 	bne r1,r0,2002acc <_vfprintf_r+0xc00>
 2002ac4:	2b 85 00 84 	lw r5,(sp+132)
 2002ac8:	44 a1 fe 1a 	be r5,r1,2002330 <_vfprintf_r+0x464>
 2002acc:	34 01 00 01 	mvi r1,1
 2002ad0:	58 81 00 04 	sw (r4+4),r1
 2002ad4:	2b 81 00 7c 	lw r1,(sp+124)
 2002ad8:	2b 82 06 bc 	lw r2,(sp+1724)
 2002adc:	58 81 00 00 	sw (r4+0),r1
 2002ae0:	2b 81 06 c0 	lw r1,(sp+1728)
 2002ae4:	34 42 00 01 	addi r2,r2,1
 2002ae8:	5b 82 06 bc 	sw (sp+1724),r2
 2002aec:	34 21 00 01 	addi r1,r1,1
 2002af0:	5b 81 06 c0 	sw (sp+1728),r1
 2002af4:	34 01 00 07 	mvi r1,7
 2002af8:	48 41 03 2c 	bg r2,r1,20037a8 <_vfprintf_r+0x18dc>
 2002afc:	34 84 00 08 	addi r4,r4,8
 2002b00:	2b 81 06 e8 	lw r1,(sp+1768)
 2002b04:	c8 01 58 00 	sub r11,r0,r1
 2002b08:	4c 0b 00 1e 	bge r0,r11,2002b80 <_vfprintf_r+0xcb4>
 2002b0c:	34 01 00 10 	mvi r1,16
 2002b10:	4c 2b 03 8b 	bge r1,r11,200393c <_vfprintf_r+0x1a70>
 2002b14:	b8 20 60 00 	mv r12,r1
 2002b18:	ba 80 90 00 	mv r18,r20
 2002b1c:	34 0d 00 07 	mvi r13,7
 2002b20:	37 8e 06 b8 	addi r14,sp,1720
 2002b24:	58 8c 00 04 	sw (r4+4),r12
 2002b28:	2b 82 06 c0 	lw r2,(sp+1728)
 2002b2c:	2b 81 06 bc 	lw r1,(sp+1724)
 2002b30:	58 94 00 00 	sw (r4+0),r20
 2002b34:	34 42 00 10 	addi r2,r2,16
 2002b38:	34 21 00 01 	addi r1,r1,1
 2002b3c:	5b 82 06 c0 	sw (sp+1728),r2
 2002b40:	5b 81 06 bc 	sw (sp+1724),r1
 2002b44:	48 2d 02 ba 	bg r1,r13,200362c <_vfprintf_r+0x1760>
 2002b48:	34 84 00 08 	addi r4,r4,8
 2002b4c:	35 6b ff f0 	addi r11,r11,-16
 2002b50:	49 6c ff f5 	bg r11,r12,2002b24 <_vfprintf_r+0xc58>
 2002b54:	58 8b 00 04 	sw (r4+4),r11
 2002b58:	2b 81 06 c0 	lw r1,(sp+1728)
 2002b5c:	2b 82 06 bc 	lw r2,(sp+1724)
 2002b60:	58 92 00 00 	sw (r4+0),r18
 2002b64:	b4 2b 08 00 	add r1,r1,r11
 2002b68:	34 42 00 01 	addi r2,r2,1
 2002b6c:	5b 81 06 c0 	sw (sp+1728),r1
 2002b70:	5b 82 06 bc 	sw (sp+1724),r2
 2002b74:	34 01 00 07 	mvi r1,7
 2002b78:	48 41 03 28 	bg r2,r1,2003818 <_vfprintf_r+0x194c>
 2002b7c:	34 84 00 08 	addi r4,r4,8
 2002b80:	2b 82 00 84 	lw r2,(sp+132)
 2002b84:	58 95 00 00 	sw (r4+0),r21
 2002b88:	58 82 00 04 	sw (r4+4),r2
 2002b8c:	2b 85 06 c0 	lw r5,(sp+1728)
 2002b90:	b4 a2 08 00 	add r1,r5,r2
 2002b94:	e3 ff fe f6 	bi 200276c <_vfprintf_r+0x8a0>
 2002b98:	34 01 00 30 	mvi r1,48
 2002b9c:	33 81 05 f3 	sb (sp+1523),r1
 2002ba0:	37 95 05 f3 	addi r21,sp,1523
 2002ba4:	34 10 00 01 	mvi r16,1
 2002ba8:	e3 ff fd 77 	bi 2002184 <_vfprintf_r+0x2b8>
 2002bac:	23 01 00 40 	andi r1,r24,0x40
 2002bb0:	44 22 fd 63 	be r1,r2,200213c <_vfprintf_r+0x270>
 2002bb4:	29 81 00 00 	lw r1,(r12+0)
 2002bb8:	35 96 00 04 	addi r22,r12,4
 2002bbc:	34 04 00 01 	mvi r4,1
 2002bc0:	20 2b ff ff 	andi r11,r1,0xffff
 2002bc4:	e3 ff fd 61 	bi 2002148 <_vfprintf_r+0x27c>
 2002bc8:	29 8b 00 00 	lw r11,(r12+0)
 2002bcc:	35 96 00 04 	addi r22,r12,4
 2002bd0:	34 04 00 00 	mvi r4,0
 2002bd4:	e3 ff fd 5d 	bi 2002148 <_vfprintf_r+0x27c>
 2002bd8:	2b 85 00 84 	lw r5,(sp+132)
 2002bdc:	36 a4 00 01 	addi r4,r21,1
 2002be0:	59 84 00 00 	sw (r12+0),r4
 2002be4:	34 a3 ff ff 	addi r3,r5,-1
 2002be8:	59 83 00 04 	sw (r12+4),r3
 2002bec:	2b 81 06 c0 	lw r1,(sp+1728)
 2002bf0:	2b 82 06 bc 	lw r2,(sp+1724)
 2002bf4:	b4 23 08 00 	add r1,r1,r3
 2002bf8:	34 42 00 01 	addi r2,r2,1
 2002bfc:	5b 81 06 c0 	sw (sp+1728),r1
 2002c00:	5b 82 06 bc 	sw (sp+1724),r2
 2002c04:	34 01 00 07 	mvi r1,7
 2002c08:	48 41 00 db 	bg r2,r1,2002f74 <_vfprintf_r+0x10a8>
 2002c0c:	e3 ff ff 58 	bi 200296c <_vfprintf_r+0xaa0>
 2002c10:	34 01 00 2d 	mvi r1,45
 2002c14:	33 81 06 ef 	sb (sp+1775),r1
 2002c18:	c8 0b 58 00 	sub r11,r0,r11
 2002c1c:	34 04 00 01 	mvi r4,1
 2002c20:	e3 ff fd 4c 	bi 2002150 <_vfprintf_r+0x284>
 2002c24:	b9 80 10 00 	mv r2,r12
 2002c28:	3b 18 00 10 	ori r24,r24,0x10
 2002c2c:	42 21 00 00 	lbu r1,(r17+0)
 2002c30:	b8 40 60 00 	mv r12,r2
 2002c34:	e3 ff fd 34 	bi 2002104 <_vfprintf_r+0x238>
 2002c38:	34 01 ff ff 	mvi r1,-1
 2002c3c:	46 41 01 e7 	be r18,r1,20033d8 <_vfprintf_r+0x150c>
 2002c40:	66 61 00 67 	cmpei r1,r19,103
 2002c44:	66 62 00 47 	cmpei r2,r19,71
 2002c48:	b8 22 08 00 	or r1,r1,r2
 2002c4c:	44 20 00 02 	be r1,r0,2002c54 <_vfprintf_r+0xd88>
 2002c50:	46 40 02 4a 	be r18,r0,2003578 <_vfprintf_r+0x16ac>
 2002c54:	23 01 00 08 	andi r1,r24,0x8
 2002c58:	44 20 01 a0 	be r1,r0,20032d8 <_vfprintf_r+0x140c>
 2002c5c:	29 82 00 00 	lw r2,(r12+0)
 2002c60:	35 85 00 08 	addi r5,r12,8
 2002c64:	5b 85 00 6c 	sw (sp+108),r5
 2002c68:	5b 82 00 8c 	sw (sp+140),r2
 2002c6c:	29 8c 00 04 	lw r12,(r12+4)
 2002c70:	5b 8c 00 90 	sw (sp+144),r12
 2002c74:	2b 81 00 8c 	lw r1,(sp+140)
 2002c78:	2b 82 00 90 	lw r2,(sp+144)
 2002c7c:	f8 00 14 c5 	calli 2007f90 <isinf>
 2002c80:	b8 20 58 00 	mv r11,r1
 2002c84:	44 20 01 d7 	be r1,r0,20033e0 <_vfprintf_r+0x1514>
 2002c88:	2b 81 00 8c 	lw r1,(sp+140)
 2002c8c:	2b 82 00 90 	lw r2,(sp+144)
 2002c90:	34 03 00 00 	mvi r3,0
 2002c94:	b8 60 20 00 	mv r4,r3
 2002c98:	f8 00 19 b5 	calli 200936c <__ltdf2>
 2002c9c:	48 01 02 77 	bg r0,r1,2003678 <_vfprintf_r+0x17ac>
 2002ca0:	34 16 00 00 	mvi r22,0
 2002ca4:	34 10 00 03 	mvi r16,3
 2002ca8:	2b 8c 00 6c 	lw r12,(sp+108)
 2002cac:	2b 95 00 54 	lw r21,(sp+84)
 2002cb0:	5b 96 00 94 	sw (sp+148),r22
 2002cb4:	ba 00 d8 00 	mv fp,r16
 2002cb8:	e3 ff fd 3a 	bi 20021a0 <_vfprintf_r+0x2d4>
 2002cbc:	b9 80 10 00 	mv r2,r12
 2002cc0:	3b 18 00 08 	ori r24,r24,0x8
 2002cc4:	42 21 00 00 	lbu r1,(r17+0)
 2002cc8:	b8 40 60 00 	mv r12,r2
 2002ccc:	e3 ff fd 0e 	bi 2002104 <_vfprintf_r+0x238>
 2002cd0:	34 01 00 00 	mvi r1,0
 2002cd4:	33 81 06 ef 	sb (sp+1775),r1
 2002cd8:	29 95 00 00 	lw r21,(r12+0)
 2002cdc:	35 8c 00 04 	addi r12,r12,4
 2002ce0:	46 a1 02 70 	be r21,r1,20036a0 <_vfprintf_r+0x17d4>
 2002ce4:	34 01 00 53 	mvi r1,83
 2002ce8:	46 61 01 43 	be r19,r1,20031f4 <_vfprintf_r+0x1328>
 2002cec:	23 0b 00 10 	andi r11,r24,0x10
 2002cf0:	5d 60 01 41 	bne r11,r0,20031f4 <_vfprintf_r+0x1328>
 2002cf4:	49 72 02 42 	bg r11,r18,20035fc <_vfprintf_r+0x1730>
 2002cf8:	ba a0 08 00 	mv r1,r21
 2002cfc:	b9 60 10 00 	mv r2,r11
 2002d00:	ba 40 18 00 	mv r3,r18
 2002d04:	f8 00 0f 8d 	calli 2006b38 <memchr>
 2002d08:	44 20 02 ee 	be r1,r0,20038c0 <_vfprintf_r+0x19f4>
 2002d0c:	c8 35 80 00 	sub r16,r1,r21
 2002d10:	4a 12 02 83 	bg r16,r18,200371c <_vfprintf_r+0x1850>
 2002d14:	ba 00 d8 00 	mv fp,r16
 2002d18:	4e 00 00 02 	bge r16,r0,2002d20 <_vfprintf_r+0xe54>
 2002d1c:	b9 60 d8 00 	mv fp,r11
 2002d20:	34 16 00 00 	mvi r22,0
 2002d24:	5b 96 00 94 	sw (sp+148),r22
 2002d28:	e3 ff fd 1e 	bi 20021a0 <_vfprintf_r+0x2d4>
 2002d2c:	2b 85 00 50 	lw r5,(sp+80)
 2002d30:	23 02 00 10 	andi r2,r24,0x10
 2002d34:	5b 85 00 88 	sw (sp+136),r5
 2002d38:	5c 40 00 44 	bne r2,r0,2002e48 <_vfprintf_r+0xf7c>
 2002d3c:	23 01 00 40 	andi r1,r24,0x40
 2002d40:	44 22 00 42 	be r1,r2,2002e48 <_vfprintf_r+0xf7c>
 2002d44:	29 81 00 00 	lw r1,(r12+0)
 2002d48:	35 96 00 04 	addi r22,r12,4
 2002d4c:	20 2b ff ff 	andi r11,r1,0xffff
 2002d50:	7d 61 00 00 	cmpnei r1,r11,0
 2002d54:	34 04 00 02 	mvi r4,2
 2002d58:	a3 01 08 00 	and r1,r24,r1
 2002d5c:	44 20 fc fb 	be r1,r0,2002148 <_vfprintf_r+0x27c>
 2002d60:	3b 18 00 02 	ori r24,r24,0x2
 2002d64:	34 04 00 02 	mvi r4,2
 2002d68:	e3 ff fc f8 	bi 2002148 <_vfprintf_r+0x27c>
 2002d6c:	42 33 00 00 	lbu r19,(r17+0)
 2002d70:	36 31 00 01 	addi r17,r17,1
 2002d74:	46 67 02 eb 	be r19,r7,2003920 <_vfprintf_r+0x1a54>
 2002d78:	36 64 ff d0 	addi r4,r19,-48
 2002d7c:	34 03 00 00 	mvi r3,0
 2002d80:	50 a4 00 03 	bgeu r5,r4,2002d8c <_vfprintf_r+0xec0>
 2002d84:	b8 60 90 00 	mv r18,r3
 2002d88:	e3 ff fc e1 	bi 200210c <_vfprintf_r+0x240>
 2002d8c:	3c 62 00 03 	sli r2,r3,3
 2002d90:	42 33 00 00 	lbu r19,(r17+0)
 2002d94:	b4 63 08 00 	add r1,r3,r3
 2002d98:	b4 22 08 00 	add r1,r1,r2
 2002d9c:	b4 24 18 00 	add r3,r1,r4
 2002da0:	36 64 ff d0 	addi r4,r19,-48
 2002da4:	36 31 00 01 	addi r17,r17,1
 2002da8:	50 a4 ff f9 	bgeu r5,r4,2002d8c <_vfprintf_r+0xec0>
 2002dac:	b8 60 90 00 	mv r18,r3
 2002db0:	4c 60 fc d7 	bge r3,r0,200210c <_vfprintf_r+0x240>
 2002db4:	34 12 ff ff 	mvi r18,-1
 2002db8:	e3 ff fc d5 	bi 200210c <_vfprintf_r+0x240>
 2002dbc:	b9 80 10 00 	mv r2,r12
 2002dc0:	3b 18 00 01 	ori r24,r24,0x1
 2002dc4:	42 21 00 00 	lbu r1,(r17+0)
 2002dc8:	b8 40 60 00 	mv r12,r2
 2002dcc:	e3 ff fc ce 	bi 2002104 <_vfprintf_r+0x238>
 2002dd0:	29 81 00 00 	lw r1,(r12+0)
 2002dd4:	35 82 00 04 	addi r2,r12,4
 2002dd8:	5b 81 00 78 	sw (sp+120),r1
 2002ddc:	48 01 01 e3 	bg r0,r1,2003568 <_vfprintf_r+0x169c>
 2002de0:	42 21 00 00 	lbu r1,(r17+0)
 2002de4:	b8 40 60 00 	mv r12,r2
 2002de8:	e3 ff fc c7 	bi 2002104 <_vfprintf_r+0x238>
 2002dec:	34 01 00 2b 	mvi r1,43
 2002df0:	33 81 06 ef 	sb (sp+1775),r1
 2002df4:	b9 80 10 00 	mv r2,r12
 2002df8:	42 21 00 00 	lbu r1,(r17+0)
 2002dfc:	b8 40 60 00 	mv r12,r2
 2002e00:	e3 ff fc c1 	bi 2002104 <_vfprintf_r+0x238>
 2002e04:	b9 80 10 00 	mv r2,r12
 2002e08:	3b 18 00 04 	ori r24,r24,0x4
 2002e0c:	42 21 00 00 	lbu r1,(r17+0)
 2002e10:	b8 40 60 00 	mv r12,r2
 2002e14:	e3 ff fc bc 	bi 2002104 <_vfprintf_r+0x238>
 2002e18:	43 81 06 ef 	lbu r1,(sp+1775)
 2002e1c:	5c 20 00 ee 	bne r1,r0,20031d4 <_vfprintf_r+0x1308>
 2002e20:	34 01 00 20 	mvi r1,32
 2002e24:	33 81 06 ef 	sb (sp+1775),r1
 2002e28:	b9 80 10 00 	mv r2,r12
 2002e2c:	42 21 00 00 	lbu r1,(r17+0)
 2002e30:	b8 40 60 00 	mv r12,r2
 2002e34:	e3 ff fc b4 	bi 2002104 <_vfprintf_r+0x238>
 2002e38:	2b 85 00 64 	lw r5,(sp+100)
 2002e3c:	23 02 00 10 	andi r2,r24,0x10
 2002e40:	5b 85 00 88 	sw (sp+136),r5
 2002e44:	44 40 ff be 	be r2,r0,2002d3c <_vfprintf_r+0xe70>
 2002e48:	29 8b 00 00 	lw r11,(r12+0)
 2002e4c:	35 96 00 04 	addi r22,r12,4
 2002e50:	e3 ff ff c0 	bi 2002d50 <_vfprintf_r+0xe84>
 2002e54:	23 02 00 10 	andi r2,r24,0x10
 2002e58:	5c 40 00 4d 	bne r2,r0,2002f8c <_vfprintf_r+0x10c0>
 2002e5c:	23 01 00 40 	andi r1,r24,0x40
 2002e60:	44 22 00 4b 	be r1,r2,2002f8c <_vfprintf_r+0x10c0>
 2002e64:	29 81 00 00 	lw r1,(r12+0)
 2002e68:	2f 82 00 76 	lhu r2,(sp+118)
 2002e6c:	35 8c 00 04 	addi r12,r12,4
 2002e70:	5b 8c 00 6c 	sw (sp+108),r12
 2002e74:	0c 22 00 00 	sh (r1+0),r2
 2002e78:	e3 ff fc 78 	bi 2002058 <_vfprintf_r+0x18c>
 2002e7c:	3b 18 00 40 	ori r24,r24,0x40
 2002e80:	b9 80 10 00 	mv r2,r12
 2002e84:	42 21 00 00 	lbu r1,(r17+0)
 2002e88:	e3 ff ff d7 	bi 2002de4 <_vfprintf_r+0xf18>
 2002e8c:	36 64 ff d0 	addi r4,r19,-48
 2002e90:	34 01 00 00 	mvi r1,0
 2002e94:	3c 22 00 03 	sli r2,r1,3
 2002e98:	42 33 00 00 	lbu r19,(r17+0)
 2002e9c:	b4 21 08 00 	add r1,r1,r1
 2002ea0:	b4 22 08 00 	add r1,r1,r2
 2002ea4:	b4 81 08 00 	add r1,r4,r1
 2002ea8:	36 64 ff d0 	addi r4,r19,-48
 2002eac:	36 31 00 01 	addi r17,r17,1
 2002eb0:	50 a4 ff f9 	bgeu r5,r4,2002e94 <_vfprintf_r+0xfc8>
 2002eb4:	5b 81 00 78 	sw (sp+120),r1
 2002eb8:	e3 ff fc 95 	bi 200210c <_vfprintf_r+0x240>
 2002ebc:	34 01 00 43 	mvi r1,67
 2002ec0:	46 61 00 b5 	be r19,r1,2003194 <_vfprintf_r+0x12c8>
 2002ec4:	23 01 00 10 	andi r1,r24,0x10
 2002ec8:	5c 20 00 b3 	bne r1,r0,2003194 <_vfprintf_r+0x12c8>
 2002ecc:	29 81 00 00 	lw r1,(r12+0)
 2002ed0:	34 10 00 01 	mvi r16,1
 2002ed4:	35 8c 00 04 	addi r12,r12,4
 2002ed8:	33 81 04 98 	sb (sp+1176),r1
 2002edc:	37 8e 04 98 	addi r14,sp,1176
 2002ee0:	34 01 00 00 	mvi r1,0
 2002ee4:	33 81 06 ef 	sb (sp+1775),r1
 2002ee8:	ba 00 d8 00 	mv fp,r16
 2002eec:	4e 01 00 02 	bge r16,r1,2002ef4 <_vfprintf_r+0x1028>
 2002ef0:	b8 20 d8 00 	mv fp,r1
 2002ef4:	b9 c0 a8 00 	mv r21,r14
 2002ef8:	e3 ff fd a0 	bi 2002578 <_vfprintf_r+0x6ac>
 2002efc:	b9 80 10 00 	mv r2,r12
 2002f00:	3b 18 00 80 	ori r24,r24,0x80
 2002f04:	42 21 00 00 	lbu r1,(r17+0)
 2002f08:	b8 40 60 00 	mv r12,r2
 2002f0c:	e3 ff fc 7e 	bi 2002104 <_vfprintf_r+0x238>
 2002f10:	42 21 00 00 	lbu r1,(r17+0)
 2002f14:	44 28 01 2b 	be r1,r8,20033c0 <_vfprintf_r+0x14f4>
 2002f18:	b9 80 10 00 	mv r2,r12
 2002f1c:	3b 18 00 10 	ori r24,r24,0x10
 2002f20:	b8 40 60 00 	mv r12,r2
 2002f24:	e3 ff fc 78 	bi 2002104 <_vfprintf_r+0x238>
 2002f28:	2b 81 00 64 	lw r1,(sp+100)
 2002f2c:	29 8b 00 00 	lw r11,(r12+0)
 2002f30:	3b 18 00 02 	ori r24,r24,0x2
 2002f34:	35 96 00 04 	addi r22,r12,4
 2002f38:	34 13 00 78 	mvi r19,120
 2002f3c:	34 04 00 02 	mvi r4,2
 2002f40:	5b 81 00 88 	sw (sp+136),r1
 2002f44:	e3 ff fc 81 	bi 2002148 <_vfprintf_r+0x27c>
 2002f48:	b9 c0 a8 00 	mv r21,r14
 2002f4c:	2b 82 00 88 	lw r2,(sp+136)
 2002f50:	21 61 00 0f 	andi r1,r11,0xf
 2002f54:	36 b5 ff ff 	addi r21,r21,-1
 2002f58:	b4 41 08 00 	add r1,r2,r1
 2002f5c:	40 21 00 00 	lbu r1,(r1+0)
 2002f60:	01 6b 00 04 	srui r11,r11,4
 2002f64:	32 a1 00 00 	sb (r21+0),r1
 2002f68:	5d 60 ff f9 	bne r11,r0,2002f4c <_vfprintf_r+0x1080>
 2002f6c:	c9 d5 80 00 	sub r16,r14,r21
 2002f70:	e3 ff fc 85 	bi 2002184 <_vfprintf_r+0x2b8>
 2002f74:	bb 20 08 00 	mv r1,r25
 2002f78:	37 82 06 b8 	addi r2,sp,1720
 2002f7c:	fb ff fb bd 	calli 2001e70 <__sprint>
 2002f80:	5c 20 fd 9c 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002f84:	37 8c 06 50 	addi r12,sp,1616
 2002f88:	e3 ff fe 7a 	bi 2002970 <_vfprintf_r+0xaa4>
 2002f8c:	29 81 00 00 	lw r1,(r12+0)
 2002f90:	2b 85 00 74 	lw r5,(sp+116)
 2002f94:	35 8c 00 04 	addi r12,r12,4
 2002f98:	5b 8c 00 6c 	sw (sp+108),r12
 2002f9c:	58 25 00 00 	sw (r1+0),r5
 2002fa0:	e3 ff fc 2e 	bi 2002058 <_vfprintf_r+0x18c>
 2002fa4:	bb 20 08 00 	mv r1,r25
 2002fa8:	b9 e0 10 00 	mv r2,r15
 2002fac:	fb ff fb b1 	calli 2001e70 <__sprint>
 2002fb0:	5c 20 fd 90 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002fb4:	37 8c 06 50 	addi r12,sp,1616
 2002fb8:	e3 ff fe 61 	bi 200293c <_vfprintf_r+0xa70>
 2002fbc:	bb 20 08 00 	mv r1,r25
 2002fc0:	b9 c0 10 00 	mv r2,r14
 2002fc4:	fb ff fb ab 	calli 2001e70 <__sprint>
 2002fc8:	5c 20 fd 8a 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2002fcc:	37 84 06 50 	addi r4,sp,1616
 2002fd0:	e3 ff fd e1 	bi 2002754 <_vfprintf_r+0x888>
 2002fd4:	34 01 00 09 	mvi r1,9
 2002fd8:	b9 c0 60 00 	mv r12,r14
 2002fdc:	b8 20 78 00 	mv r15,r1
 2002fe0:	55 61 00 06 	bgu r11,r1,2002ff8 <_vfprintf_r+0x112c>
 2002fe4:	35 61 00 30 	addi r1,r11,48
 2002fe8:	35 95 ff ff 	addi r21,r12,-1
 2002fec:	31 81 ff ff 	sb (r12+-1),r1
 2002ff0:	c9 d5 80 00 	sub r16,r14,r21
 2002ff4:	e3 ff fc 64 	bi 2002184 <_vfprintf_r+0x2b8>
 2002ff8:	b9 60 08 00 	mv r1,r11
 2002ffc:	34 02 00 0a 	mvi r2,10
 2003000:	f8 00 1a 16 	calli 2009858 <__umodsi3>
 2003004:	34 21 00 30 	addi r1,r1,48
 2003008:	35 8c ff ff 	addi r12,r12,-1
 200300c:	31 81 00 00 	sb (r12+0),r1
 2003010:	34 02 00 0a 	mvi r2,10
 2003014:	b9 60 08 00 	mv r1,r11
 2003018:	f8 00 19 fc 	calli 2009808 <__udivsi3>
 200301c:	b8 20 58 00 	mv r11,r1
 2003020:	54 2f ff f6 	bgu r1,r15,2002ff8 <_vfprintf_r+0x112c>
 2003024:	35 61 00 30 	addi r1,r11,48
 2003028:	35 95 ff ff 	addi r21,r12,-1
 200302c:	31 81 ff ff 	sb (r12+-1),r1
 2003030:	c9 d5 80 00 	sub r16,r14,r21
 2003034:	e3 ff fc 54 	bi 2002184 <_vfprintf_r+0x2b8>
 2003038:	bb 20 08 00 	mv r1,r25
 200303c:	f8 00 03 f9 	calli 2004020 <__swsetup>
 2003040:	5c 20 fd 74 	bne r1,r0,2002610 <_vfprintf_r+0x744>
 2003044:	1f 23 00 0c 	lh r3,(r25+12)
 2003048:	20 62 ff ff 	andi r2,r3,0xffff
 200304c:	e3 ff fb c5 	bi 2001f60 <_vfprintf_r+0x94>
 2003050:	bb 20 08 00 	mv r1,r25
 2003054:	37 82 06 b8 	addi r2,sp,1720
 2003058:	fb ff fb 86 	calli 2001e70 <__sprint>
 200305c:	5c 20 fd 65 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2003060:	37 8d 06 50 	addi r13,sp,1616
 2003064:	e3 ff fc 76 	bi 200223c <_vfprintf_r+0x370>
 2003068:	2b 85 00 84 	lw r5,(sp+132)
 200306c:	48 a2 00 a2 	bg r5,r2,20032f4 <_vfprintf_r+0x1428>
 2003070:	59 a5 00 04 	sw (r13+4),r5
 2003074:	2b 85 06 c0 	lw r5,(sp+1728)
 2003078:	2b 82 00 84 	lw r2,(sp+132)
 200307c:	59 b5 00 00 	sw (r13+0),r21
 2003080:	b4 a2 08 00 	add r1,r5,r2
 2003084:	2b 82 06 bc 	lw r2,(sp+1724)
 2003088:	5b 81 06 c0 	sw (sp+1728),r1
 200308c:	34 01 00 07 	mvi r1,7
 2003090:	34 42 00 01 	addi r2,r2,1
 2003094:	5b 82 06 bc 	sw (sp+1724),r2
 2003098:	48 41 01 4d 	bg r2,r1,20035cc <_vfprintf_r+0x1700>
 200309c:	35 a4 00 08 	addi r4,r13,8
 20030a0:	2b 81 06 e8 	lw r1,(sp+1768)
 20030a4:	2b 85 00 84 	lw r5,(sp+132)
 20030a8:	c8 25 58 00 	sub r11,r1,r5
 20030ac:	4c 0b 00 1e 	bge r0,r11,2003124 <_vfprintf_r+0x1258>
 20030b0:	34 01 00 10 	mvi r1,16
 20030b4:	4c 2b 02 20 	bge r1,r11,2003934 <_vfprintf_r+0x1a68>
 20030b8:	b8 20 60 00 	mv r12,r1
 20030bc:	ba 80 90 00 	mv r18,r20
 20030c0:	34 0d 00 07 	mvi r13,7
 20030c4:	37 8e 06 b8 	addi r14,sp,1720
 20030c8:	58 8c 00 04 	sw (r4+4),r12
 20030cc:	2b 82 06 c0 	lw r2,(sp+1728)
 20030d0:	2b 81 06 bc 	lw r1,(sp+1724)
 20030d4:	58 94 00 00 	sw (r4+0),r20
 20030d8:	34 42 00 10 	addi r2,r2,16
 20030dc:	34 21 00 01 	addi r1,r1,1
 20030e0:	5b 82 06 c0 	sw (sp+1728),r2
 20030e4:	5b 81 06 bc 	sw (sp+1724),r1
 20030e8:	48 2d 01 4b 	bg r1,r13,2003614 <_vfprintf_r+0x1748>
 20030ec:	34 84 00 08 	addi r4,r4,8
 20030f0:	35 6b ff f0 	addi r11,r11,-16
 20030f4:	49 6c ff f5 	bg r11,r12,20030c8 <_vfprintf_r+0x11fc>
 20030f8:	58 8b 00 04 	sw (r4+4),r11
 20030fc:	2b 85 06 c0 	lw r5,(sp+1728)
 2003100:	2b 82 06 bc 	lw r2,(sp+1724)
 2003104:	58 92 00 00 	sw (r4+0),r18
 2003108:	b4 ab 08 00 	add r1,r5,r11
 200310c:	34 42 00 01 	addi r2,r2,1
 2003110:	5b 81 06 c0 	sw (sp+1728),r1
 2003114:	5b 82 06 bc 	sw (sp+1724),r2
 2003118:	34 01 00 07 	mvi r1,7
 200311c:	48 41 01 b9 	bg r2,r1,2003800 <_vfprintf_r+0x1934>
 2003120:	34 84 00 08 	addi r4,r4,8
 2003124:	23 01 00 01 	andi r1,r24,0x1
 2003128:	44 20 fc 82 	be r1,r0,2002330 <_vfprintf_r+0x464>
 200312c:	34 01 00 01 	mvi r1,1
 2003130:	58 81 00 04 	sw (r4+4),r1
 2003134:	2b 81 00 48 	lw r1,(sp+72)
 2003138:	2b 85 06 c0 	lw r5,(sp+1728)
 200313c:	58 81 00 00 	sw (r4+0),r1
 2003140:	2b 81 06 bc 	lw r1,(sp+1724)
 2003144:	34 a2 00 01 	addi r2,r5,1
 2003148:	5b 82 06 c0 	sw (sp+1728),r2
 200314c:	34 21 00 01 	addi r1,r1,1
 2003150:	5b 81 06 bc 	sw (sp+1724),r1
 2003154:	34 02 00 07 	mvi r2,7
 2003158:	48 22 fd b8 	bg r1,r2,2002838 <_vfprintf_r+0x96c>
 200315c:	34 84 00 08 	addi r4,r4,8
 2003160:	e3 ff fc 74 	bi 2002330 <_vfprintf_r+0x464>
 2003164:	bb 20 08 00 	mv r1,r25
 2003168:	37 82 06 b8 	addi r2,sp,1720
 200316c:	fb ff fb 41 	calli 2001e70 <__sprint>
 2003170:	5c 20 fd 20 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2003174:	37 8c 06 50 	addi r12,sp,1616
 2003178:	e3 ff fd d8 	bi 20028d8 <_vfprintf_r+0xa0c>
 200317c:	bb 20 08 00 	mv r1,r25
 2003180:	37 82 06 b8 	addi r2,sp,1720
 2003184:	fb ff fb 3b 	calli 2001e70 <__sprint>
 2003188:	5c 20 fd 1a 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 200318c:	37 8d 06 50 	addi r13,sp,1616
 2003190:	e3 ff fc 3c 	bi 2002280 <_vfprintf_r+0x3b4>
 2003194:	37 8b 06 cc 	addi r11,sp,1740
 2003198:	34 02 00 00 	mvi r2,0
 200319c:	34 03 00 08 	mvi r3,8
 20031a0:	b9 60 08 00 	mv r1,r11
 20031a4:	f8 00 0e ea 	calli 2006d4c <memset>
 20031a8:	29 83 00 00 	lw r3,(r12+0)
 20031ac:	2b 81 00 70 	lw r1,(sp+112)
 20031b0:	37 8e 04 98 	addi r14,sp,1176
 20031b4:	b9 60 20 00 	mv r4,r11
 20031b8:	b9 c0 10 00 	mv r2,r14
 20031bc:	f8 00 01 f0 	calli 200397c <_wcrtomb_r>
 20031c0:	b8 20 80 00 	mv r16,r1
 20031c4:	34 01 ff ff 	mvi r1,-1
 20031c8:	46 01 01 81 	be r16,r1,20037cc <_vfprintf_r+0x1900>
 20031cc:	35 8c 00 04 	addi r12,r12,4
 20031d0:	e3 ff ff 44 	bi 2002ee0 <_vfprintf_r+0x1014>
 20031d4:	b9 80 10 00 	mv r2,r12
 20031d8:	42 21 00 00 	lbu r1,(r17+0)
 20031dc:	b8 40 60 00 	mv r12,r2
 20031e0:	e3 ff fb c9 	bi 2002104 <_vfprintf_r+0x238>
 20031e4:	29 8b 00 00 	lw r11,(r12+0)
 20031e8:	b8 20 20 00 	mv r4,r1
 20031ec:	35 96 00 04 	addi r22,r12,4
 20031f0:	e3 ff fb d6 	bi 2002148 <_vfprintf_r+0x27c>
 20031f4:	37 8f 06 c4 	addi r15,sp,1732
 20031f8:	b9 e0 08 00 	mv r1,r15
 20031fc:	34 02 00 00 	mvi r2,0
 2003200:	34 03 00 08 	mvi r3,8
 2003204:	5b 95 06 e4 	sw (sp+1764),r21
 2003208:	f8 00 0e d1 	calli 2006d4c <memset>
 200320c:	48 12 01 5c 	bg r0,r18,200377c <_vfprintf_r+0x18b0>
 2003210:	34 10 00 00 	mvi r16,0
 2003214:	ba 00 58 00 	mv r11,r16
 2003218:	37 96 04 98 	addi r22,sp,1176
 200321c:	34 0e ff ff 	mvi r14,-1
 2003220:	e0 00 00 02 	bi 2003228 <_vfprintf_r+0x135c>
 2003224:	b8 20 80 00 	mv r16,r1
 2003228:	2b 81 06 e4 	lw r1,(sp+1764)
 200322c:	b4 2b 08 00 	add r1,r1,r11
 2003230:	28 23 00 00 	lw r3,(r1+0)
 2003234:	44 60 00 0b 	be r3,r0,2003260 <_vfprintf_r+0x1394>
 2003238:	2b 81 00 70 	lw r1,(sp+112)
 200323c:	ba c0 10 00 	mv r2,r22
 2003240:	b9 e0 20 00 	mv r4,r15
 2003244:	f8 00 01 ce 	calli 200397c <_wcrtomb_r>
 2003248:	44 2e 01 61 	be r1,r14,20037cc <_vfprintf_r+0x1900>
 200324c:	b4 30 08 00 	add r1,r1,r16
 2003250:	48 32 00 04 	bg r1,r18,2003260 <_vfprintf_r+0x1394>
 2003254:	35 6b 00 04 	addi r11,r11,4
 2003258:	5e 41 ff f3 	bne r18,r1,2003224 <_vfprintf_r+0x1358>
 200325c:	ba 40 80 00 	mv r16,r18
 2003260:	34 0b 00 00 	mvi r11,0
 2003264:	5b 90 00 94 	sw (sp+148),r16
 2003268:	ba 00 b0 00 	mv r22,r16
 200326c:	ba 00 d8 00 	mv fp,r16
 2003270:	46 0b fb cc 	be r16,r11,20021a0 <_vfprintf_r+0x2d4>
 2003274:	2b 81 00 70 	lw r1,(sp+112)
 2003278:	36 02 00 01 	addi r2,r16,1
 200327c:	f8 00 0c 57 	calli 20063d8 <_malloc_r>
 2003280:	5b 81 00 94 	sw (sp+148),r1
 2003284:	44 20 01 52 	be r1,r0,20037cc <_vfprintf_r+0x1900>
 2003288:	34 03 00 08 	mvi r3,8
 200328c:	b9 60 10 00 	mv r2,r11
 2003290:	b9 e0 08 00 	mv r1,r15
 2003294:	f8 00 0e ae 	calli 2006d4c <memset>
 2003298:	2b 81 00 70 	lw r1,(sp+112)
 200329c:	2b 82 00 94 	lw r2,(sp+148)
 20032a0:	b9 e0 28 00 	mv r5,r15
 20032a4:	37 83 06 e4 	addi r3,sp,1764
 20032a8:	ba 00 20 00 	mv r4,r16
 20032ac:	f8 00 01 cd 	calli 20039e0 <_wcsrtombs_r>
 20032b0:	5e 01 01 af 	bne r16,r1,200396c <_vfprintf_r+0x1aa0>
 20032b4:	2b 82 00 94 	lw r2,(sp+148)
 20032b8:	ba 00 d8 00 	mv fp,r16
 20032bc:	b4 50 08 00 	add r1,r2,r16
 20032c0:	30 2b 00 00 	sb (r1+0),r11
 20032c4:	4e 00 00 02 	bge r16,r0,20032cc <_vfprintf_r+0x1400>
 20032c8:	b9 60 d8 00 	mv fp,r11
 20032cc:	2b 95 00 94 	lw r21,(sp+148)
 20032d0:	34 16 00 00 	mvi r22,0
 20032d4:	e3 ff fb b3 	bi 20021a0 <_vfprintf_r+0x2d4>
 20032d8:	29 81 00 00 	lw r1,(r12+0)
 20032dc:	35 82 00 08 	addi r2,r12,8
 20032e0:	5b 82 00 6c 	sw (sp+108),r2
 20032e4:	5b 81 00 8c 	sw (sp+140),r1
 20032e8:	29 8c 00 04 	lw r12,(r12+4)
 20032ec:	5b 8c 00 90 	sw (sp+144),r12
 20032f0:	e3 ff fe 61 	bi 2002c74 <_vfprintf_r+0xda8>
 20032f4:	59 a2 00 04 	sw (r13+4),r2
 20032f8:	2b 81 06 c0 	lw r1,(sp+1728)
 20032fc:	59 b5 00 00 	sw (r13+0),r21
 2003300:	b4 22 08 00 	add r1,r1,r2
 2003304:	2b 82 06 bc 	lw r2,(sp+1724)
 2003308:	5b 81 06 c0 	sw (sp+1728),r1
 200330c:	34 01 00 07 	mvi r1,7
 2003310:	34 42 00 01 	addi r2,r2,1
 2003314:	5b 82 06 bc 	sw (sp+1724),r2
 2003318:	48 41 00 a7 	bg r2,r1,20035b4 <_vfprintf_r+0x16e8>
 200331c:	35 a3 00 08 	addi r3,r13,8
 2003320:	2b 82 00 48 	lw r2,(sp+72)
 2003324:	34 01 00 01 	mvi r1,1
 2003328:	2b 8b 06 e8 	lw r11,(sp+1768)
 200332c:	58 61 00 04 	sw (r3+4),r1
 2003330:	2b 81 06 c0 	lw r1,(sp+1728)
 2003334:	58 62 00 00 	sw (r3+0),r2
 2003338:	2b 82 06 bc 	lw r2,(sp+1724)
 200333c:	34 21 00 01 	addi r1,r1,1
 2003340:	5b 81 06 c0 	sw (sp+1728),r1
 2003344:	34 42 00 01 	addi r2,r2,1
 2003348:	5b 82 06 bc 	sw (sp+1724),r2
 200334c:	34 01 00 07 	mvi r1,7
 2003350:	48 41 00 d8 	bg r2,r1,20036b0 <_vfprintf_r+0x17e4>
 2003354:	34 64 00 08 	addi r4,r3,8
 2003358:	2b 83 06 e8 	lw r3,(sp+1768)
 200335c:	2b 85 00 84 	lw r5,(sp+132)
 2003360:	b6 ab 08 00 	add r1,r21,r11
 2003364:	58 81 00 00 	sw (r4+0),r1
 2003368:	c8 a3 10 00 	sub r2,r5,r3
 200336c:	58 82 00 04 	sw (r4+4),r2
 2003370:	2b 85 06 c0 	lw r5,(sp+1728)
 2003374:	2b 81 00 84 	lw r1,(sp+132)
 2003378:	34 02 00 07 	mvi r2,7
 200337c:	c8 a3 18 00 	sub r3,r5,r3
 2003380:	b4 61 18 00 	add r3,r3,r1
 2003384:	2b 81 06 bc 	lw r1,(sp+1724)
 2003388:	5b 83 06 c0 	sw (sp+1728),r3
 200338c:	34 21 00 01 	addi r1,r1,1
 2003390:	5b 81 06 bc 	sw (sp+1724),r1
 2003394:	48 22 fd 29 	bg r1,r2,2002838 <_vfprintf_r+0x96c>
 2003398:	34 84 00 08 	addi r4,r4,8
 200339c:	e3 ff fb e5 	bi 2002330 <_vfprintf_r+0x464>
 20033a0:	bb 20 08 00 	mv r1,r25
 20033a4:	37 82 06 b8 	addi r2,sp,1720
 20033a8:	fb ff fa b2 	calli 2001e70 <__sprint>
 20033ac:	5c 20 fc 91 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 20033b0:	37 84 06 50 	addi r4,sp,1616
 20033b4:	e3 ff fc c3 	bi 20026c0 <_vfprintf_r+0x7f4>
 20033b8:	ba 80 90 00 	mv r18,r20
 20033bc:	e3 ff fb c5 	bi 20022d0 <_vfprintf_r+0x404>
 20033c0:	36 31 00 01 	addi r17,r17,1
 20033c4:	b9 80 10 00 	mv r2,r12
 20033c8:	3b 18 00 10 	ori r24,r24,0x10
 20033cc:	42 21 00 00 	lbu r1,(r17+0)
 20033d0:	b8 40 60 00 	mv r12,r2
 20033d4:	e3 ff fb 4c 	bi 2002104 <_vfprintf_r+0x238>
 20033d8:	34 12 00 06 	mvi r18,6
 20033dc:	e3 ff fe 1e 	bi 2002c54 <_vfprintf_r+0xd88>
 20033e0:	2b 81 00 8c 	lw r1,(sp+140)
 20033e4:	2b 82 00 90 	lw r2,(sp+144)
 20033e8:	f8 00 12 f9 	calli 2007fcc <isnan>
 20033ec:	b8 20 18 00 	mv r3,r1
 20033f0:	5c 2b 00 6a 	bne r1,r11,2003598 <_vfprintf_r+0x16cc>
 20033f4:	34 01 00 66 	mvi r1,102
 20033f8:	3b 18 01 00 	ori r24,r24,0x100
 20033fc:	ba 40 60 00 	mv r12,r18
 2003400:	34 04 00 03 	mvi r4,3
 2003404:	46 61 00 08 	be r19,r1,2003424 <_vfprintf_r+0x1558>
 2003408:	66 61 00 65 	cmpei r1,r19,101
 200340c:	66 62 00 45 	cmpei r2,r19,69
 2003410:	36 4c 00 01 	addi r12,r18,1
 2003414:	b8 22 08 00 	or r1,r1,r2
 2003418:	34 04 00 02 	mvi r4,2
 200341c:	5c 23 00 02 	bne r1,r3,2003424 <_vfprintf_r+0x1558>
 2003420:	ba 40 60 00 	mv r12,r18
 2003424:	2b 81 00 8c 	lw r1,(sp+140)
 2003428:	48 01 01 02 	bg r0,r1,2003830 <_vfprintf_r+0x1964>
 200342c:	2b 8f 00 90 	lw r15,(sp+144)
 2003430:	b8 20 70 00 	mv r14,r1
 2003434:	34 16 00 00 	mvi r22,0
 2003438:	2b 81 00 70 	lw r1,(sp+112)
 200343c:	b9 c0 10 00 	mv r2,r14
 2003440:	b9 e0 18 00 	mv r3,r15
 2003444:	b9 80 28 00 	mv r5,r12
 2003448:	37 86 06 e8 	addi r6,sp,1768
 200344c:	37 87 06 e0 	addi r7,sp,1760
 2003450:	37 88 06 dc 	addi r8,sp,1756
 2003454:	f8 00 03 c2 	calli 200435c <_dtoa_r>
 2003458:	b8 20 a8 00 	mv r21,r1
 200345c:	7e 62 00 67 	cmpnei r2,r19,103
 2003460:	7e 61 00 47 	cmpnei r1,r19,71
 2003464:	a0 41 10 00 	and r2,r2,r1
 2003468:	5c 40 00 98 	bne r2,r0,20036c8 <_vfprintf_r+0x17fc>
 200346c:	23 01 00 01 	andi r1,r24,0x1
 2003470:	5c 22 00 96 	bne r1,r2,20036c8 <_vfprintf_r+0x17fc>
 2003474:	2b 82 06 dc 	lw r2,(sp+1756)
 2003478:	66 63 00 67 	cmpei r3,r19,103
 200347c:	66 61 00 47 	cmpei r1,r19,71
 2003480:	c8 55 10 00 	sub r2,r2,r21
 2003484:	5b 82 00 84 	sw (sp+132),r2
 2003488:	b8 61 08 00 	or r1,r3,r1
 200348c:	44 20 00 b7 	be r1,r0,2003768 <_vfprintf_r+0x189c>
 2003490:	2b 82 06 e8 	lw r2,(sp+1768)
 2003494:	34 01 ff fd 	mvi r1,-3
 2003498:	48 22 00 03 	bg r1,r2,20034a4 <_vfprintf_r+0x15d8>
 200349c:	34 13 00 67 	mvi r19,103
 20034a0:	4e 42 00 d2 	bge r18,r2,20037e8 <_vfprintf_r+0x191c>
 20034a4:	34 13 00 45 	mvi r19,69
 20034a8:	ba 60 08 00 	mv r1,r19
 20034ac:	5c 60 01 1a 	bne r3,r0,2003914 <_vfprintf_r+0x1a48>
 20034b0:	34 4b ff ff 	addi r11,r2,-1
 20034b4:	33 81 06 d4 	sb (sp+1748),r1
 20034b8:	5b 8b 06 e8 	sw (sp+1768),r11
 20034bc:	4d 60 00 e3 	bge r11,r0,2003848 <_vfprintf_r+0x197c>
 20034c0:	34 01 00 2d 	mvi r1,45
 20034c4:	33 81 06 d5 	sb (sp+1749),r1
 20034c8:	c8 0b 58 00 	sub r11,r0,r11
 20034cc:	34 01 00 09 	mvi r1,9
 20034d0:	4c 2b 00 e1 	bge r1,r11,2003854 <_vfprintf_r+0x1988>
 20034d4:	37 8e 06 b8 	addi r14,sp,1720
 20034d8:	b8 20 78 00 	mv r15,r1
 20034dc:	b9 c0 60 00 	mv r12,r14
 20034e0:	b9 60 08 00 	mv r1,r11
 20034e4:	34 02 00 0a 	mvi r2,10
 20034e8:	f8 00 18 a1 	calli 200976c <__modsi3>
 20034ec:	34 21 00 30 	addi r1,r1,48
 20034f0:	35 8c ff ff 	addi r12,r12,-1
 20034f4:	31 81 00 00 	sb (r12+0),r1
 20034f8:	34 02 00 0a 	mvi r2,10
 20034fc:	b9 60 08 00 	mv r1,r11
 2003500:	f8 00 18 6d 	calli 20096b4 <__divsi3>
 2003504:	b8 20 58 00 	mv r11,r1
 2003508:	48 2f ff f6 	bg r1,r15,20034e0 <_vfprintf_r+0x1614>
 200350c:	34 21 00 30 	addi r1,r1,48
 2003510:	20 21 00 ff 	andi r1,r1,0xff
 2003514:	31 81 ff ff 	sb (r12+-1),r1
 2003518:	35 83 ff ff 	addi r3,r12,-1
 200351c:	37 82 06 d6 	addi r2,sp,1750
 2003520:	55 c3 00 18 	bgu r14,r3,2003580 <_vfprintf_r+0x16b4>
 2003524:	37 81 06 d4 	addi r1,sp,1748
 2003528:	c8 41 08 00 	sub r1,r2,r1
 200352c:	2b 82 00 84 	lw r2,(sp+132)
 2003530:	5b 81 00 80 	sw (sp+128),r1
 2003534:	b4 22 80 00 	add r16,r1,r2
 2003538:	34 01 00 01 	mvi r1,1
 200353c:	48 41 00 34 	bg r2,r1,200360c <_vfprintf_r+0x1740>
 2003540:	a3 01 08 00 	and r1,r24,r1
 2003544:	5c 20 00 32 	bne r1,r0,200360c <_vfprintf_r+0x1740>
 2003548:	5e c0 00 81 	bne r22,r0,200374c <_vfprintf_r+0x1880>
 200354c:	ba 00 d8 00 	mv fp,r16
 2003550:	4e 16 00 02 	bge r16,r22,2003558 <_vfprintf_r+0x168c>
 2003554:	ba c0 d8 00 	mv fp,r22
 2003558:	34 16 00 00 	mvi r22,0
 200355c:	2b 8c 00 6c 	lw r12,(sp+108)
 2003560:	5b 96 00 94 	sw (sp+148),r22
 2003564:	e3 ff fb 0f 	bi 20021a0 <_vfprintf_r+0x2d4>
 2003568:	2b 81 00 78 	lw r1,(sp+120)
 200356c:	c8 01 08 00 	sub r1,r0,r1
 2003570:	5b 81 00 78 	sw (sp+120),r1
 2003574:	e3 ff fe 25 	bi 2002e08 <_vfprintf_r+0xf3c>
 2003578:	34 12 00 01 	mvi r18,1
 200357c:	e3 ff fd b6 	bi 2002c54 <_vfprintf_r+0xd88>
 2003580:	30 41 00 00 	sb (r2+0),r1
 2003584:	34 63 00 01 	addi r3,r3,1
 2003588:	34 42 00 01 	addi r2,r2,1
 200358c:	50 6e ff e6 	bgeu r3,r14,2003524 <_vfprintf_r+0x1658>
 2003590:	40 61 00 00 	lbu r1,(r3+0)
 2003594:	e3 ff ff fb 	bi 2003580 <_vfprintf_r+0x16b4>
 2003598:	34 10 00 03 	mvi r16,3
 200359c:	b9 60 b0 00 	mv r22,r11
 20035a0:	2b 8c 00 6c 	lw r12,(sp+108)
 20035a4:	2b 95 00 5c 	lw r21,(sp+92)
 20035a8:	5b 8b 00 94 	sw (sp+148),r11
 20035ac:	ba 00 d8 00 	mv fp,r16
 20035b0:	e3 ff fa fc 	bi 20021a0 <_vfprintf_r+0x2d4>
 20035b4:	bb 20 08 00 	mv r1,r25
 20035b8:	37 82 06 b8 	addi r2,sp,1720
 20035bc:	fb ff fa 2d 	calli 2001e70 <__sprint>
 20035c0:	5c 20 fc 0c 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 20035c4:	37 83 06 50 	addi r3,sp,1616
 20035c8:	e3 ff ff 56 	bi 2003320 <_vfprintf_r+0x1454>
 20035cc:	bb 20 08 00 	mv r1,r25
 20035d0:	37 82 06 b8 	addi r2,sp,1720
 20035d4:	fb ff fa 27 	calli 2001e70 <__sprint>
 20035d8:	5c 20 fc 06 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 20035dc:	37 84 06 50 	addi r4,sp,1616
 20035e0:	e3 ff fe b0 	bi 20030a0 <_vfprintf_r+0x11d4>
 20035e4:	bb 20 08 00 	mv r1,r25
 20035e8:	37 82 06 b8 	addi r2,sp,1720
 20035ec:	fb ff fa 21 	calli 2001e70 <__sprint>
 20035f0:	5c 20 fc 00 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 20035f4:	37 84 06 50 	addi r4,sp,1616
 20035f8:	e3 ff fd 31 	bi 2002abc <_vfprintf_r+0xbf0>
 20035fc:	ba a0 08 00 	mv r1,r21
 2003600:	fb ff f9 fe 	calli 2001df8 <strlen>
 2003604:	b8 20 80 00 	mv r16,r1
 2003608:	e3 ff fd c3 	bi 2002d14 <_vfprintf_r+0xe48>
 200360c:	36 10 00 01 	addi r16,r16,1
 2003610:	e3 ff ff ce 	bi 2003548 <_vfprintf_r+0x167c>
 2003614:	bb 20 08 00 	mv r1,r25
 2003618:	b9 c0 10 00 	mv r2,r14
 200361c:	fb ff fa 15 	calli 2001e70 <__sprint>
 2003620:	5c 20 fb f4 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2003624:	37 84 06 50 	addi r4,sp,1616
 2003628:	e3 ff fe b2 	bi 20030f0 <_vfprintf_r+0x1224>
 200362c:	bb 20 08 00 	mv r1,r25
 2003630:	b9 c0 10 00 	mv r2,r14
 2003634:	fb ff fa 0f 	calli 2001e70 <__sprint>
 2003638:	5c 20 fb ee 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 200363c:	37 84 06 50 	addi r4,sp,1616
 2003640:	e3 ff fd 43 	bi 2002b4c <_vfprintf_r+0xc80>
 2003644:	2b 81 06 c0 	lw r1,(sp+1728)
 2003648:	5c 20 00 3c 	bne r1,r0,2003738 <_vfprintf_r+0x186c>
 200364c:	34 01 00 00 	mvi r1,0
 2003650:	5b 81 06 bc 	sw (sp+1724),r1
 2003654:	e3 ff fb ec 	bi 2002604 <_vfprintf_r+0x738>
 2003658:	bb 20 08 00 	mv r1,r25
 200365c:	37 82 06 b8 	addi r2,sp,1720
 2003660:	fb ff fa 04 	calli 2001e70 <__sprint>
 2003664:	5c 20 fb e3 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2003668:	37 84 06 50 	addi r4,sp,1616
 200366c:	e3 ff fc 27 	bi 2002708 <_vfprintf_r+0x83c>
 2003670:	2b 97 00 4c 	lw r23,(sp+76)
 2003674:	e3 ff fa e7 	bi 2002210 <_vfprintf_r+0x344>
 2003678:	2b 95 00 54 	lw r21,(sp+84)
 200367c:	34 01 00 2d 	mvi r1,45
 2003680:	33 81 06 ef 	sb (sp+1775),r1
 2003684:	34 10 00 03 	mvi r16,3
 2003688:	34 1b 00 04 	mvi fp,4
 200368c:	34 16 00 00 	mvi r22,0
 2003690:	5b 96 00 94 	sw (sp+148),r22
 2003694:	e3 ff fa c7 	bi 20021b0 <_vfprintf_r+0x2e4>
 2003698:	2b 97 00 4c 	lw r23,(sp+76)
 200369c:	e3 ff fb 3d 	bi 2002390 <_vfprintf_r+0x4c4>
 20036a0:	34 10 00 06 	mvi r16,6
 20036a4:	2b 95 00 60 	lw r21,(sp+96)
 20036a8:	ba 00 d8 00 	mv fp,r16
 20036ac:	e3 ff fb b3 	bi 2002578 <_vfprintf_r+0x6ac>
 20036b0:	bb 20 08 00 	mv r1,r25
 20036b4:	37 82 06 b8 	addi r2,sp,1720
 20036b8:	fb ff f9 ee 	calli 2001e70 <__sprint>
 20036bc:	5c 20 fb cd 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 20036c0:	37 84 06 50 	addi r4,sp,1616
 20036c4:	e3 ff ff 25 	bi 2003358 <_vfprintf_r+0x148c>
 20036c8:	34 01 00 66 	mvi r1,102
 20036cc:	b6 ac 58 00 	add r11,r21,r12
 20036d0:	46 61 00 6f 	be r19,r1,200388c <_vfprintf_r+0x19c0>
 20036d4:	34 03 00 00 	mvi r3,0
 20036d8:	b9 c0 08 00 	mv r1,r14
 20036dc:	b9 e0 10 00 	mv r2,r15
 20036e0:	b8 60 20 00 	mv r4,r3
 20036e4:	f8 00 16 9e 	calli 200915c <__eqdf2>
 20036e8:	44 20 00 36 	be r1,r0,20037c0 <_vfprintf_r+0x18f4>
 20036ec:	2b 82 06 dc 	lw r2,(sp+1756)
 20036f0:	b8 40 20 00 	mv r4,r2
 20036f4:	50 4b ff 61 	bgeu r2,r11,2003478 <_vfprintf_r+0x15ac>
 20036f8:	34 01 00 30 	mvi r1,48
 20036fc:	30 81 00 00 	sb (r4+0),r1
 2003700:	34 84 00 01 	addi r4,r4,1
 2003704:	5b 84 06 dc 	sw (sp+1756),r4
 2003708:	55 64 ff fc 	bgu r11,r4,20036f8 <_vfprintf_r+0x182c>
 200370c:	b8 80 10 00 	mv r2,r4
 2003710:	e3 ff ff 5a 	bi 2003478 <_vfprintf_r+0x15ac>
 2003714:	ba 80 90 00 	mv r18,r20
 2003718:	e3 ff fb 5a 	bi 2002480 <_vfprintf_r+0x5b4>
 200371c:	ba 40 d8 00 	mv fp,r18
 2003720:	4e 40 00 02 	bge r18,r0,2003728 <_vfprintf_r+0x185c>
 2003724:	b9 60 d8 00 	mv fp,r11
 2003728:	34 16 00 00 	mvi r22,0
 200372c:	ba 40 80 00 	mv r16,r18
 2003730:	5b 96 00 94 	sw (sp+148),r22
 2003734:	e3 ff fa 9b 	bi 20021a0 <_vfprintf_r+0x2d4>
 2003738:	bb 20 08 00 	mv r1,r25
 200373c:	37 82 06 b8 	addi r2,sp,1720
 2003740:	fb ff f9 cc 	calli 2001e70 <__sprint>
 2003744:	5c 20 fb b0 	bne r1,r0,2002604 <_vfprintf_r+0x738>
 2003748:	e3 ff ff c1 	bi 200364c <_vfprintf_r+0x1780>
 200374c:	34 01 00 2d 	mvi r1,45
 2003750:	33 81 06 ef 	sb (sp+1775),r1
 2003754:	ba 00 08 00 	mv r1,r16
 2003758:	4e 00 00 02 	bge r16,r0,2003760 <_vfprintf_r+0x1894>
 200375c:	34 01 00 00 	mvi r1,0
 2003760:	34 3b 00 01 	addi fp,r1,1
 2003764:	e3 ff ff ca 	bi 200368c <_vfprintf_r+0x17c0>
 2003768:	34 01 00 65 	mvi r1,101
 200376c:	4a 61 00 1c 	bg r19,r1,20037dc <_vfprintf_r+0x1910>
 2003770:	2b 82 06 e8 	lw r2,(sp+1768)
 2003774:	22 61 00 ff 	andi r1,r19,0xff
 2003778:	e3 ff ff 4e 	bi 20034b0 <_vfprintf_r+0x15e4>
 200377c:	2b 81 00 70 	lw r1,(sp+112)
 2003780:	34 02 00 00 	mvi r2,0
 2003784:	37 83 06 e4 	addi r3,sp,1764
 2003788:	b8 40 20 00 	mv r4,r2
 200378c:	b9 e0 28 00 	mv r5,r15
 2003790:	f8 00 00 94 	calli 20039e0 <_wcsrtombs_r>
 2003794:	b8 20 80 00 	mv r16,r1
 2003798:	34 01 ff ff 	mvi r1,-1
 200379c:	46 01 00 0c 	be r16,r1,20037cc <_vfprintf_r+0x1900>
 20037a0:	5b 95 06 e4 	sw (sp+1764),r21
 20037a4:	e3 ff fe af 	bi 2003260 <_vfprintf_r+0x1394>
 20037a8:	bb 20 08 00 	mv r1,r25
 20037ac:	37 82 06 b8 	addi r2,sp,1720
 20037b0:	fb ff f9 b0 	calli 2001e70 <__sprint>
 20037b4:	5c 20 fb 8f 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 20037b8:	37 84 06 50 	addi r4,sp,1616
 20037bc:	e3 ff fc d1 	bi 2002b00 <_vfprintf_r+0xc34>
 20037c0:	5b 8b 06 dc 	sw (sp+1756),r11
 20037c4:	b9 60 10 00 	mv r2,r11
 20037c8:	e3 ff ff 2c 	bi 2003478 <_vfprintf_r+0x15ac>
 20037cc:	2f 21 00 0c 	lhu r1,(r25+12)
 20037d0:	38 21 00 40 	ori r1,r1,0x40
 20037d4:	0f 21 00 0c 	sh (r25+12),r1
 20037d8:	e3 ff fb 8b 	bi 2002604 <_vfprintf_r+0x738>
 20037dc:	34 01 00 66 	mvi r1,102
 20037e0:	46 61 00 23 	be r19,r1,200386c <_vfprintf_r+0x19a0>
 20037e4:	2b 82 06 e8 	lw r2,(sp+1768)
 20037e8:	2b 85 00 84 	lw r5,(sp+132)
 20037ec:	48 a2 00 2e 	bg r5,r2,20038a4 <_vfprintf_r+0x19d8>
 20037f0:	23 01 00 01 	andi r1,r24,0x1
 20037f4:	7c 21 00 00 	cmpnei r1,r1,0
 20037f8:	b4 41 80 00 	add r16,r2,r1
 20037fc:	e3 ff ff 53 	bi 2003548 <_vfprintf_r+0x167c>
 2003800:	bb 20 08 00 	mv r1,r25
 2003804:	37 82 06 b8 	addi r2,sp,1720
 2003808:	fb ff f9 9a 	calli 2001e70 <__sprint>
 200380c:	5c 20 fb 79 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2003810:	37 84 06 50 	addi r4,sp,1616
 2003814:	e3 ff fe 44 	bi 2003124 <_vfprintf_r+0x1258>
 2003818:	bb 20 08 00 	mv r1,r25
 200381c:	37 82 06 b8 	addi r2,sp,1720
 2003820:	fb ff f9 94 	calli 2001e70 <__sprint>
 2003824:	5c 20 fb 73 	bne r1,r0,20025f0 <_vfprintf_r+0x724>
 2003828:	37 84 06 50 	addi r4,sp,1616
 200382c:	e3 ff fc d5 	bi 2002b80 <_vfprintf_r+0xcb4>
 2003830:	2b 85 00 8c 	lw r5,(sp+140)
 2003834:	2b 81 00 58 	lw r1,(sp+88)
 2003838:	2b 8f 00 90 	lw r15,(sp+144)
 200383c:	34 16 00 2d 	mvi r22,45
 2003840:	98 a1 70 00 	xor r14,r5,r1
 2003844:	e3 ff fe fd 	bi 2003438 <_vfprintf_r+0x156c>
 2003848:	34 01 00 2b 	mvi r1,43
 200384c:	33 81 06 d5 	sb (sp+1749),r1
 2003850:	e3 ff ff 1f 	bi 20034cc <_vfprintf_r+0x1600>
 2003854:	35 62 00 30 	addi r2,r11,48
 2003858:	34 01 00 30 	mvi r1,48
 200385c:	33 82 06 d7 	sb (sp+1751),r2
 2003860:	33 81 06 d6 	sb (sp+1750),r1
 2003864:	37 82 06 d8 	addi r2,sp,1752
 2003868:	e3 ff ff 2f 	bi 2003524 <_vfprintf_r+0x1658>
 200386c:	2b 90 06 e8 	lw r16,(sp+1768)
 2003870:	4c 10 00 39 	bge r0,r16,2003954 <_vfprintf_r+0x1a88>
 2003874:	5e 40 00 03 	bne r18,r0,2003880 <_vfprintf_r+0x19b4>
 2003878:	23 01 00 01 	andi r1,r24,0x1
 200387c:	44 32 ff 33 	be r1,r18,2003548 <_vfprintf_r+0x167c>
 2003880:	36 01 00 01 	addi r1,r16,1
 2003884:	b4 32 80 00 	add r16,r1,r18
 2003888:	e3 ff ff 30 	bi 2003548 <_vfprintf_r+0x167c>
 200388c:	42 a2 00 00 	lbu r2,(r21+0)
 2003890:	34 01 00 30 	mvi r1,48
 2003894:	44 41 00 16 	be r2,r1,20038ec <_vfprintf_r+0x1a20>
 2003898:	2b 82 06 e8 	lw r2,(sp+1768)
 200389c:	b5 62 58 00 	add r11,r11,r2
 20038a0:	e3 ff ff 8d 	bi 20036d4 <_vfprintf_r+0x1808>
 20038a4:	34 01 00 02 	mvi r1,2
 20038a8:	c8 22 08 00 	sub r1,r1,r2
 20038ac:	4c 02 00 02 	bge r0,r2,20038b4 <_vfprintf_r+0x19e8>
 20038b0:	34 01 00 01 	mvi r1,1
 20038b4:	2b 82 00 84 	lw r2,(sp+132)
 20038b8:	b4 22 80 00 	add r16,r1,r2
 20038bc:	e3 ff ff 23 	bi 2003548 <_vfprintf_r+0x167c>
 20038c0:	ba 40 d8 00 	mv fp,r18
 20038c4:	4e 41 ff 99 	bge r18,r1,2003728 <_vfprintf_r+0x185c>
 20038c8:	b8 20 d8 00 	mv fp,r1
 20038cc:	e3 ff ff 97 	bi 2003728 <_vfprintf_r+0x185c>
 20038d0:	ba 80 90 00 	mv r18,r20
 20038d4:	e3 ff fb a2 	bi 200275c <_vfprintf_r+0x890>
 20038d8:	ba 80 90 00 	mv r18,r20
 20038dc:	e3 ff fc 1a 	bi 2002944 <_vfprintf_r+0xa78>
 20038e0:	34 01 ff ff 	mvi r1,-1
 20038e4:	5b 81 00 74 	sw (sp+116),r1
 20038e8:	e3 ff fc 55 	bi 2002a3c <_vfprintf_r+0xb70>
 20038ec:	34 03 00 00 	mvi r3,0
 20038f0:	b9 c0 08 00 	mv r1,r14
 20038f4:	b9 e0 10 00 	mv r2,r15
 20038f8:	b8 60 20 00 	mv r4,r3
 20038fc:	f8 00 16 3b 	calli 20091e8 <__nedf2>
 2003900:	44 20 ff e6 	be r1,r0,2003898 <_vfprintf_r+0x19cc>
 2003904:	34 01 00 01 	mvi r1,1
 2003908:	c8 2c 08 00 	sub r1,r1,r12
 200390c:	5b 81 06 e8 	sw (sp+1768),r1
 2003910:	e3 ff ff e2 	bi 2003898 <_vfprintf_r+0x19cc>
 2003914:	34 13 00 65 	mvi r19,101
 2003918:	ba 60 08 00 	mv r1,r19
 200391c:	e3 ff fe e5 	bi 20034b0 <_vfprintf_r+0x15e4>
 2003920:	29 92 00 00 	lw r18,(r12+0)
 2003924:	35 82 00 04 	addi r2,r12,4
 2003928:	48 12 00 07 	bg r0,r18,2003944 <_vfprintf_r+0x1a78>
 200392c:	42 21 00 00 	lbu r1,(r17+0)
 2003930:	e3 ff fd 2d 	bi 2002de4 <_vfprintf_r+0xf18>
 2003934:	ba 80 90 00 	mv r18,r20
 2003938:	e3 ff fd f0 	bi 20030f8 <_vfprintf_r+0x122c>
 200393c:	ba 80 90 00 	mv r18,r20
 2003940:	e3 ff fc 85 	bi 2002b54 <_vfprintf_r+0xc88>
 2003944:	42 21 00 00 	lbu r1,(r17+0)
 2003948:	34 12 ff ff 	mvi r18,-1
 200394c:	b8 40 60 00 	mv r12,r2
 2003950:	e3 ff f9 ed 	bi 2002104 <_vfprintf_r+0x238>
 2003954:	5e 40 00 04 	bne r18,r0,2003964 <_vfprintf_r+0x1a98>
 2003958:	23 01 00 01 	andi r1,r24,0x1
 200395c:	34 10 00 01 	mvi r16,1
 2003960:	44 32 fe fa 	be r1,r18,2003548 <_vfprintf_r+0x167c>
 2003964:	36 50 00 02 	addi r16,r18,2
 2003968:	e3 ff fe f8 	bi 2003548 <_vfprintf_r+0x167c>
 200396c:	2f 21 00 0c 	lhu r1,(r25+12)
 2003970:	38 21 00 40 	ori r1,r1,0x40
 2003974:	0f 21 00 0c 	sh (r25+12),r1
 2003978:	e3 ff fb 20 	bi 20025f8 <_vfprintf_r+0x72c>

0200397c <_wcrtomb_r>:
 200397c:	37 9c ff e8 	addi sp,sp,-24
 2003980:	5b 8b 00 0c 	sw (sp+12),r11
 2003984:	5b 8c 00 08 	sw (sp+8),r12
 2003988:	5b 9d 00 04 	sw (sp+4),ra
 200398c:	b8 20 60 00 	mv r12,r1
 2003990:	b8 80 58 00 	mv r11,r4
 2003994:	44 40 00 0f 	be r2,r0,20039d0 <_wcrtomb_r+0x54>
 2003998:	f8 00 00 70 	calli 2003b58 <_wctomb_r>
 200399c:	b8 20 18 00 	mv r3,r1
 20039a0:	34 01 ff ff 	mvi r1,-1
 20039a4:	5c 61 00 05 	bne r3,r1,20039b8 <_wcrtomb_r+0x3c>
 20039a8:	34 01 00 00 	mvi r1,0
 20039ac:	59 61 00 00 	sw (r11+0),r1
 20039b0:	34 02 00 8a 	mvi r2,138
 20039b4:	59 82 00 00 	sw (r12+0),r2
 20039b8:	b8 60 08 00 	mv r1,r3
 20039bc:	2b 9d 00 04 	lw ra,(sp+4)
 20039c0:	2b 8b 00 0c 	lw r11,(sp+12)
 20039c4:	2b 8c 00 08 	lw r12,(sp+8)
 20039c8:	37 9c 00 18 	addi sp,sp,24
 20039cc:	c3 a0 00 00 	ret
 20039d0:	b8 40 18 00 	mv r3,r2
 20039d4:	37 82 00 10 	addi r2,sp,16
 20039d8:	f8 00 00 60 	calli 2003b58 <_wctomb_r>
 20039dc:	e3 ff ff f0 	bi 200399c <_wcrtomb_r+0x20>

020039e0 <_wcsrtombs_r>:
 20039e0:	37 9c ff c0 	addi sp,sp,-64
 20039e4:	5b 8b 00 34 	sw (sp+52),r11
 20039e8:	5b 8c 00 30 	sw (sp+48),r12
 20039ec:	5b 8d 00 2c 	sw (sp+44),r13
 20039f0:	5b 8e 00 28 	sw (sp+40),r14
 20039f4:	5b 8f 00 24 	sw (sp+36),r15
 20039f8:	5b 90 00 20 	sw (sp+32),r16
 20039fc:	5b 91 00 1c 	sw (sp+28),r17
 2003a00:	5b 92 00 18 	sw (sp+24),r18
 2003a04:	5b 93 00 14 	sw (sp+20),r19
 2003a08:	5b 94 00 10 	sw (sp+16),r20
 2003a0c:	5b 95 00 0c 	sw (sp+12),r21
 2003a10:	5b 96 00 08 	sw (sp+8),r22
 2003a14:	5b 9d 00 04 	sw (sp+4),ra
 2003a18:	b8 40 98 00 	mv r19,r2
 2003a1c:	b8 20 a8 00 	mv r21,r1
 2003a20:	b8 60 a0 00 	mv r20,r3
 2003a24:	b8 80 88 00 	mv r17,r4
 2003a28:	b8 a0 60 00 	mv r12,r5
 2003a2c:	44 40 00 48 	be r2,r0,2003b4c <_wcsrtombs_r+0x16c>
 2003a30:	28 61 00 00 	lw r1,(r3+0)
 2003a34:	b8 80 68 00 	mv r13,r4
 2003a38:	b8 20 80 00 	mv r16,r1
 2003a3c:	44 80 00 28 	be r4,r0,2003adc <_wcsrtombs_r+0xfc>
 2003a40:	ba 60 58 00 	mv r11,r19
 2003a44:	34 0d 00 00 	mvi r13,0
 2003a48:	37 92 00 38 	addi r18,sp,56
 2003a4c:	34 16 ff ff 	mvi r22,-1
 2003a50:	2a 03 00 00 	lw r3,(r16+0)
 2003a54:	b9 80 20 00 	mv r4,r12
 2003a58:	ba a0 08 00 	mv r1,r21
 2003a5c:	ba 40 10 00 	mv r2,r18
 2003a60:	29 8f 00 00 	lw r15,(r12+0)
 2003a64:	29 8e 00 04 	lw r14,(r12+4)
 2003a68:	fb ff ff c5 	calli 200397c <_wcrtomb_r>
 2003a6c:	b8 20 20 00 	mv r4,r1
 2003a70:	44 36 00 2b 	be r1,r22,2003b1c <_wcsrtombs_r+0x13c>
 2003a74:	ca 21 08 00 	sub r1,r17,r1
 2003a78:	f0 2d 08 00 	cmpgeu r1,r1,r13
 2003a7c:	f6 24 10 00 	cmpgu r2,r17,r4
 2003a80:	a0 22 08 00 	and r1,r1,r2
 2003a84:	44 20 00 14 	be r1,r0,2003ad4 <_wcsrtombs_r+0xf4>
 2003a88:	b5 a4 68 00 	add r13,r13,r4
 2003a8c:	46 60 00 0d 	be r19,r0,2003ac0 <_wcsrtombs_r+0xe0>
 2003a90:	4c 04 00 09 	bge r0,r4,2003ab4 <_wcsrtombs_r+0xd4>
 2003a94:	34 03 00 00 	mvi r3,0
 2003a98:	b6 43 08 00 	add r1,r18,r3
 2003a9c:	40 21 00 00 	lbu r1,(r1+0)
 2003aa0:	b5 63 10 00 	add r2,r11,r3
 2003aa4:	34 63 00 01 	addi r3,r3,1
 2003aa8:	30 41 00 00 	sb (r2+0),r1
 2003aac:	48 83 ff fb 	bg r4,r3,2003a98 <_wcsrtombs_r+0xb8>
 2003ab0:	b5 64 58 00 	add r11,r11,r4
 2003ab4:	2a 81 00 00 	lw r1,(r20+0)
 2003ab8:	34 21 00 04 	addi r1,r1,4
 2003abc:	5a 81 00 00 	sw (r20+0),r1
 2003ac0:	2a 01 00 00 	lw r1,(r16+0)
 2003ac4:	44 20 00 1c 	be r1,r0,2003b34 <_wcsrtombs_r+0x154>
 2003ac8:	51 b1 00 05 	bgeu r13,r17,2003adc <_wcsrtombs_r+0xfc>
 2003acc:	36 10 00 04 	addi r16,r16,4
 2003ad0:	e3 ff ff e0 	bi 2003a50 <_wcsrtombs_r+0x70>
 2003ad4:	59 8e 00 04 	sw (r12+4),r14
 2003ad8:	59 8f 00 00 	sw (r12+0),r15
 2003adc:	b9 a0 08 00 	mv r1,r13
 2003ae0:	2b 9d 00 04 	lw ra,(sp+4)
 2003ae4:	2b 8b 00 34 	lw r11,(sp+52)
 2003ae8:	2b 8c 00 30 	lw r12,(sp+48)
 2003aec:	2b 8d 00 2c 	lw r13,(sp+44)
 2003af0:	2b 8e 00 28 	lw r14,(sp+40)
 2003af4:	2b 8f 00 24 	lw r15,(sp+36)
 2003af8:	2b 90 00 20 	lw r16,(sp+32)
 2003afc:	2b 91 00 1c 	lw r17,(sp+28)
 2003b00:	2b 92 00 18 	lw r18,(sp+24)
 2003b04:	2b 93 00 14 	lw r19,(sp+20)
 2003b08:	2b 94 00 10 	lw r20,(sp+16)
 2003b0c:	2b 95 00 0c 	lw r21,(sp+12)
 2003b10:	2b 96 00 08 	lw r22,(sp+8)
 2003b14:	37 9c 00 40 	addi sp,sp,64
 2003b18:	c3 a0 00 00 	ret
 2003b1c:	34 01 00 8a 	mvi r1,138
 2003b20:	5a a1 00 00 	sw (r21+0),r1
 2003b24:	34 02 00 00 	mvi r2,0
 2003b28:	59 82 00 00 	sw (r12+0),r2
 2003b2c:	ba c0 68 00 	mv r13,r22
 2003b30:	e3 ff ff eb 	bi 2003adc <_wcsrtombs_r+0xfc>
 2003b34:	46 61 00 02 	be r19,r1,2003b3c <_wcsrtombs_r+0x15c>
 2003b38:	5a 81 00 00 	sw (r20+0),r1
 2003b3c:	34 01 00 00 	mvi r1,0
 2003b40:	59 81 00 00 	sw (r12+0),r1
 2003b44:	35 ad ff ff 	addi r13,r13,-1
 2003b48:	e3 ff ff e5 	bi 2003adc <_wcsrtombs_r+0xfc>
 2003b4c:	28 70 00 00 	lw r16,(r3+0)
 2003b50:	34 11 ff ff 	mvi r17,-1
 2003b54:	e3 ff ff bb 	bi 2003a40 <_wcsrtombs_r+0x60>

02003b58 <_wctomb_r>:
 2003b58:	37 9c ff ec 	addi sp,sp,-20
 2003b5c:	5b 8b 00 14 	sw (sp+20),r11
 2003b60:	5b 8c 00 10 	sw (sp+16),r12
 2003b64:	5b 8d 00 0c 	sw (sp+12),r13
 2003b68:	5b 8e 00 08 	sw (sp+8),r14
 2003b6c:	5b 9d 00 04 	sw (sp+4),ra
 2003b70:	78 01 02 00 	mvhi r1,0x200
 2003b74:	38 21 ae f4 	ori r1,r1,0xaef4
 2003b78:	34 0d 00 01 	mvi r13,1
 2003b7c:	b8 40 60 00 	mv r12,r2
 2003b80:	b8 60 58 00 	mv r11,r3
 2003b84:	b8 80 70 00 	mv r14,r4
 2003b88:	fb ff f8 9c 	calli 2001df8 <strlen>
 2003b8c:	51 a1 00 14 	bgeu r13,r1,2003bdc <_wctomb_r+0x84>
 2003b90:	78 01 02 00 	mvhi r1,0x200
 2003b94:	78 02 02 00 	mvhi r2,0x200
 2003b98:	38 21 ae f4 	ori r1,r1,0xaef4
 2003b9c:	38 42 a4 50 	ori r2,r2,0xa450
 2003ba0:	f8 00 11 9d 	calli 2008214 <strcmp>
 2003ba4:	5c 20 00 2e 	bne r1,r0,2003c5c <_wctomb_r+0x104>
 2003ba8:	45 81 00 43 	be r12,r1,2003cb4 <_wctomb_r+0x15c>
 2003bac:	34 01 00 7f 	mvi r1,127
 2003bb0:	49 61 00 16 	bg r11,r1,2003c08 <_wctomb_r+0xb0>
 2003bb4:	b9 a0 10 00 	mv r2,r13
 2003bb8:	b8 40 08 00 	mv r1,r2
 2003bbc:	31 8b 00 00 	sb (r12+0),r11
 2003bc0:	2b 9d 00 04 	lw ra,(sp+4)
 2003bc4:	2b 8b 00 14 	lw r11,(sp+20)
 2003bc8:	2b 8c 00 10 	lw r12,(sp+16)
 2003bcc:	2b 8d 00 0c 	lw r13,(sp+12)
 2003bd0:	2b 8e 00 08 	lw r14,(sp+8)
 2003bd4:	37 9c 00 14 	addi sp,sp,20
 2003bd8:	c3 a0 00 00 	ret
 2003bdc:	45 80 00 36 	be r12,r0,2003cb4 <_wctomb_r+0x15c>
 2003be0:	31 8b 00 00 	sb (r12+0),r11
 2003be4:	34 02 00 01 	mvi r2,1
 2003be8:	b8 40 08 00 	mv r1,r2
 2003bec:	2b 9d 00 04 	lw ra,(sp+4)
 2003bf0:	2b 8b 00 14 	lw r11,(sp+20)
 2003bf4:	2b 8c 00 10 	lw r12,(sp+16)
 2003bf8:	2b 8d 00 0c 	lw r13,(sp+12)
 2003bfc:	2b 8e 00 08 	lw r14,(sp+8)
 2003c00:	37 9c 00 14 	addi sp,sp,20
 2003c04:	c3 a0 00 00 	ret
 2003c08:	35 62 ff 80 	addi r2,r11,-128
 2003c0c:	34 01 07 7f 	mvi r1,1919
 2003c10:	54 41 00 32 	bgu r2,r1,2003cd8 <_wctomb_r+0x180>
 2003c14:	21 64 07 c0 	andi r4,r11,0x7c0
 2003c18:	21 63 00 3f 	andi r3,r11,0x3f
 2003c1c:	34 02 ff 80 	mvi r2,-128
 2003c20:	14 84 00 06 	sri r4,r4,6
 2003c24:	b8 62 18 00 	or r3,r3,r2
 2003c28:	34 01 ff c0 	mvi r1,-64
 2003c2c:	34 02 00 02 	mvi r2,2
 2003c30:	b8 81 20 00 	or r4,r4,r1
 2003c34:	b8 40 08 00 	mv r1,r2
 2003c38:	31 83 00 01 	sb (r12+1),r3
 2003c3c:	31 84 00 00 	sb (r12+0),r4
 2003c40:	2b 9d 00 04 	lw ra,(sp+4)
 2003c44:	2b 8b 00 14 	lw r11,(sp+20)
 2003c48:	2b 8c 00 10 	lw r12,(sp+16)
 2003c4c:	2b 8d 00 0c 	lw r13,(sp+12)
 2003c50:	2b 8e 00 08 	lw r14,(sp+8)
 2003c54:	37 9c 00 14 	addi sp,sp,20
 2003c58:	c3 a0 00 00 	ret
 2003c5c:	78 01 02 00 	mvhi r1,0x200
 2003c60:	78 02 02 00 	mvhi r2,0x200
 2003c64:	38 21 ae f4 	ori r1,r1,0xaef4
 2003c68:	38 42 a4 58 	ori r2,r2,0xa458
 2003c6c:	f8 00 11 6a 	calli 2008214 <strcmp>
 2003c70:	5c 20 00 7f 	bne r1,r0,2003e6c <_wctomb_r+0x314>
 2003c74:	45 81 00 10 	be r12,r1,2003cb4 <_wctomb_r+0x15c>
 2003c78:	15 61 00 08 	sri r1,r11,8
 2003c7c:	20 29 00 ff 	andi r9,r1,0xff
 2003c80:	45 20 ff d8 	be r9,r0,2003be0 <_wctomb_r+0x88>
 2003c84:	35 23 00 7f 	addi r3,r9,127
 2003c88:	35 24 00 20 	addi r4,r9,32
 2003c8c:	20 63 00 ff 	andi r3,r3,0xff
 2003c90:	20 84 00 ff 	andi r4,r4,0xff
 2003c94:	34 02 00 1e 	mvi r2,30
 2003c98:	34 01 00 0f 	mvi r1,15
 2003c9c:	f0 43 10 00 	cmpgeu r2,r2,r3
 2003ca0:	f0 24 08 00 	cmpgeu r1,r1,r4
 2003ca4:	b8 41 10 00 	or r2,r2,r1
 2003ca8:	5c 40 00 63 	bne r2,r0,2003e34 <_wctomb_r+0x2dc>
 2003cac:	34 02 ff ff 	mvi r2,-1
 2003cb0:	e3 ff ff ce 	bi 2003be8 <_wctomb_r+0x90>
 2003cb4:	34 02 00 00 	mvi r2,0
 2003cb8:	b8 40 08 00 	mv r1,r2
 2003cbc:	2b 9d 00 04 	lw ra,(sp+4)
 2003cc0:	2b 8b 00 14 	lw r11,(sp+20)
 2003cc4:	2b 8c 00 10 	lw r12,(sp+16)
 2003cc8:	2b 8d 00 0c 	lw r13,(sp+12)
 2003ccc:	2b 8e 00 08 	lw r14,(sp+8)
 2003cd0:	37 9c 00 14 	addi sp,sp,20
 2003cd4:	c3 a0 00 00 	ret
 2003cd8:	35 62 f8 00 	addi r2,r11,-2048
 2003cdc:	38 01 f7 ff 	mvu r1,0xf7ff
 2003ce0:	54 41 00 15 	bgu r2,r1,2003d34 <_wctomb_r+0x1dc>
 2003ce4:	78 01 ff ff 	mvhi r1,0xffff
 2003ce8:	38 21 28 00 	ori r1,r1,0x2800
 2003cec:	b5 61 08 00 	add r1,r11,r1
 2003cf0:	34 02 07 ff 	mvi r2,2047
 2003cf4:	50 41 ff ee 	bgeu r2,r1,2003cac <_wctomb_r+0x154>
 2003cf8:	21 63 f0 00 	andi r3,r11,0xf000
 2003cfc:	21 64 0f c0 	andi r4,r11,0xfc0
 2003d00:	14 63 00 0c 	sri r3,r3,12
 2003d04:	14 84 00 06 	sri r4,r4,6
 2003d08:	34 05 ff 80 	mvi r5,-128
 2003d0c:	21 62 00 3f 	andi r2,r11,0x3f
 2003d10:	34 01 ff e0 	mvi r1,-32
 2003d14:	b8 45 10 00 	or r2,r2,r5
 2003d18:	b8 61 18 00 	or r3,r3,r1
 2003d1c:	b8 85 20 00 	or r4,r4,r5
 2003d20:	31 82 00 02 	sb (r12+2),r2
 2003d24:	31 83 00 00 	sb (r12+0),r3
 2003d28:	31 84 00 01 	sb (r12+1),r4
 2003d2c:	34 02 00 03 	mvi r2,3
 2003d30:	e3 ff ff ae 	bi 2003be8 <_wctomb_r+0x90>
 2003d34:	78 02 ff ff 	mvhi r2,0xffff
 2003d38:	38 42 00 00 	ori r2,r2,0x0
 2003d3c:	78 01 00 1e 	mvhi r1,0x1e
 2003d40:	b5 62 10 00 	add r2,r11,r2
 2003d44:	38 21 ff ff 	ori r1,r1,0xffff
 2003d48:	54 41 00 18 	bgu r2,r1,2003da8 <_wctomb_r+0x250>
 2003d4c:	78 02 00 1c 	mvhi r2,0x1c
 2003d50:	78 03 00 03 	mvhi r3,0x3
 2003d54:	38 42 00 00 	ori r2,r2,0x0
 2003d58:	38 63 f0 00 	ori r3,r3,0xf000
 2003d5c:	a1 62 10 00 	and r2,r11,r2
 2003d60:	a1 63 18 00 	and r3,r11,r3
 2003d64:	21 66 0f c0 	andi r6,r11,0xfc0
 2003d68:	14 42 00 12 	sri r2,r2,18
 2003d6c:	14 63 00 0c 	sri r3,r3,12
 2003d70:	14 c6 00 06 	sri r6,r6,6
 2003d74:	34 04 ff 80 	mvi r4,-128
 2003d78:	21 65 00 3f 	andi r5,r11,0x3f
 2003d7c:	34 01 ff f0 	mvi r1,-16
 2003d80:	b8 41 10 00 	or r2,r2,r1
 2003d84:	b8 a4 28 00 	or r5,r5,r4
 2003d88:	b8 64 18 00 	or r3,r3,r4
 2003d8c:	b8 c4 30 00 	or r6,r6,r4
 2003d90:	31 82 00 00 	sb (r12+0),r2
 2003d94:	31 85 00 03 	sb (r12+3),r5
 2003d98:	31 83 00 01 	sb (r12+1),r3
 2003d9c:	31 86 00 02 	sb (r12+2),r6
 2003da0:	34 02 00 04 	mvi r2,4
 2003da4:	e3 ff ff 91 	bi 2003be8 <_wctomb_r+0x90>
 2003da8:	78 02 ff e0 	mvhi r2,0xffe0
 2003dac:	38 42 00 00 	ori r2,r2,0x0
 2003db0:	78 01 03 df 	mvhi r1,0x3df
 2003db4:	b5 62 10 00 	add r2,r11,r2
 2003db8:	38 21 ff ff 	ori r1,r1,0xffff
 2003dbc:	54 41 00 73 	bgu r2,r1,2003f88 <_wctomb_r+0x430>
 2003dc0:	78 03 03 00 	mvhi r3,0x300
 2003dc4:	78 04 00 fc 	mvhi r4,0xfc
 2003dc8:	78 05 00 03 	mvhi r5,0x3
 2003dcc:	38 63 00 00 	ori r3,r3,0x0
 2003dd0:	38 84 00 00 	ori r4,r4,0x0
 2003dd4:	38 a5 f0 00 	ori r5,r5,0xf000
 2003dd8:	a1 63 18 00 	and r3,r11,r3
 2003ddc:	a1 64 20 00 	and r4,r11,r4
 2003de0:	a1 65 28 00 	and r5,r11,r5
 2003de4:	21 67 0f c0 	andi r7,r11,0xfc0
 2003de8:	14 63 00 18 	sri r3,r3,24
 2003dec:	14 84 00 12 	sri r4,r4,18
 2003df0:	14 a5 00 0c 	sri r5,r5,12
 2003df4:	14 e7 00 06 	sri r7,r7,6
 2003df8:	34 02 ff 80 	mvi r2,-128
 2003dfc:	21 66 00 3f 	andi r6,r11,0x3f
 2003e00:	34 01 ff f8 	mvi r1,-8
 2003e04:	b8 c2 30 00 	or r6,r6,r2
 2003e08:	b8 82 20 00 	or r4,r4,r2
 2003e0c:	b8 a2 28 00 	or r5,r5,r2
 2003e10:	b8 e2 38 00 	or r7,r7,r2
 2003e14:	b8 61 18 00 	or r3,r3,r1
 2003e18:	31 86 00 04 	sb (r12+4),r6
 2003e1c:	31 83 00 00 	sb (r12+0),r3
 2003e20:	31 84 00 01 	sb (r12+1),r4
 2003e24:	31 85 00 02 	sb (r12+2),r5
 2003e28:	31 87 00 03 	sb (r12+3),r7
 2003e2c:	34 02 00 05 	mvi r2,5
 2003e30:	e3 ff ff 6e 	bi 2003be8 <_wctomb_r+0x90>
 2003e34:	21 65 00 ff 	andi r5,r11,0xff
 2003e38:	34 a3 ff c0 	addi r3,r5,-64
 2003e3c:	20 63 00 ff 	andi r3,r3,0xff
 2003e40:	18 a4 00 80 	xori r4,r5,0x80
 2003e44:	34 02 00 3e 	mvi r2,62
 2003e48:	34 01 00 7c 	mvi r1,124
 2003e4c:	f0 43 10 00 	cmpgeu r2,r2,r3
 2003e50:	f0 24 08 00 	cmpgeu r1,r1,r4
 2003e54:	b8 41 10 00 	or r2,r2,r1
 2003e58:	44 40 ff 95 	be r2,r0,2003cac <_wctomb_r+0x154>
 2003e5c:	31 85 00 01 	sb (r12+1),r5
 2003e60:	31 89 00 00 	sb (r12+0),r9
 2003e64:	34 02 00 02 	mvi r2,2
 2003e68:	e3 ff ff 60 	bi 2003be8 <_wctomb_r+0x90>
 2003e6c:	78 01 02 00 	mvhi r1,0x200
 2003e70:	78 02 02 00 	mvhi r2,0x200
 2003e74:	38 21 ae f4 	ori r1,r1,0xaef4
 2003e78:	38 42 a4 60 	ori r2,r2,0xa460
 2003e7c:	f8 00 10 e6 	calli 2008214 <strcmp>
 2003e80:	5c 20 00 11 	bne r1,r0,2003ec4 <_wctomb_r+0x36c>
 2003e84:	45 81 ff 8c 	be r12,r1,2003cb4 <_wctomb_r+0x15c>
 2003e88:	15 61 00 08 	sri r1,r11,8
 2003e8c:	20 29 00 ff 	andi r9,r1,0xff
 2003e90:	45 20 ff 54 	be r9,r0,2003be0 <_wctomb_r+0x88>
 2003e94:	35 21 00 5f 	addi r1,r9,95
 2003e98:	20 21 00 ff 	andi r1,r1,0xff
 2003e9c:	34 03 00 5d 	mvi r3,93
 2003ea0:	54 23 ff 83 	bgu r1,r3,2003cac <_wctomb_r+0x154>
 2003ea4:	21 62 00 ff 	andi r2,r11,0xff
 2003ea8:	34 41 00 5f 	addi r1,r2,95
 2003eac:	20 21 00 ff 	andi r1,r1,0xff
 2003eb0:	54 23 ff 7f 	bgu r1,r3,2003cac <_wctomb_r+0x154>
 2003eb4:	31 82 00 01 	sb (r12+1),r2
 2003eb8:	31 89 00 00 	sb (r12+0),r9
 2003ebc:	34 02 00 02 	mvi r2,2
 2003ec0:	e3 ff ff 4a 	bi 2003be8 <_wctomb_r+0x90>
 2003ec4:	78 01 02 00 	mvhi r1,0x200
 2003ec8:	78 02 02 00 	mvhi r2,0x200
 2003ecc:	38 21 ae f4 	ori r1,r1,0xaef4
 2003ed0:	38 42 a4 68 	ori r2,r2,0xa468
 2003ed4:	f8 00 10 d0 	calli 2008214 <strcmp>
 2003ed8:	5c 20 ff 41 	bne r1,r0,2003bdc <_wctomb_r+0x84>
 2003edc:	b9 a0 10 00 	mv r2,r13
 2003ee0:	45 81 ff 42 	be r12,r1,2003be8 <_wctomb_r+0x90>
 2003ee4:	15 61 00 08 	sri r1,r11,8
 2003ee8:	21 64 00 ff 	andi r4,r11,0xff
 2003eec:	20 29 00 ff 	andi r9,r1,0xff
 2003ef0:	5d 20 00 0f 	bne r9,r0,2003f2c <_wctomb_r+0x3d4>
 2003ef4:	29 c1 00 00 	lw r1,(r14+0)
 2003ef8:	b9 a0 10 00 	mv r2,r13
 2003efc:	44 29 00 0a 	be r1,r9,2003f24 <_wctomb_r+0x3cc>
 2003f00:	59 c9 00 00 	sw (r14+0),r9
 2003f04:	34 02 00 28 	mvi r2,40
 2003f08:	34 01 00 1b 	mvi r1,27
 2003f0c:	34 03 00 42 	mvi r3,66
 2003f10:	31 82 00 01 	sb (r12+1),r2
 2003f14:	31 81 00 00 	sb (r12+0),r1
 2003f18:	31 83 00 02 	sb (r12+2),r3
 2003f1c:	34 02 00 04 	mvi r2,4
 2003f20:	35 8c 00 03 	addi r12,r12,3
 2003f24:	31 84 00 00 	sb (r12+0),r4
 2003f28:	e3 ff ff 30 	bi 2003be8 <_wctomb_r+0x90>
 2003f2c:	35 21 ff df 	addi r1,r9,-33
 2003f30:	20 21 00 ff 	andi r1,r1,0xff
 2003f34:	34 02 00 5d 	mvi r2,93
 2003f38:	54 22 ff 5d 	bgu r1,r2,2003cac <_wctomb_r+0x154>
 2003f3c:	34 81 ff df 	addi r1,r4,-33
 2003f40:	20 21 00 ff 	andi r1,r1,0xff
 2003f44:	54 22 ff 5a 	bgu r1,r2,2003cac <_wctomb_r+0x154>
 2003f48:	29 c1 00 00 	lw r1,(r14+0)
 2003f4c:	34 02 00 02 	mvi r2,2
 2003f50:	5c 20 00 0b 	bne r1,r0,2003f7c <_wctomb_r+0x424>
 2003f54:	34 01 00 01 	mvi r1,1
 2003f58:	59 c1 00 00 	sw (r14+0),r1
 2003f5c:	34 02 00 1b 	mvi r2,27
 2003f60:	34 01 00 24 	mvi r1,36
 2003f64:	34 03 00 42 	mvi r3,66
 2003f68:	31 82 00 00 	sb (r12+0),r2
 2003f6c:	31 81 00 01 	sb (r12+1),r1
 2003f70:	31 83 00 02 	sb (r12+2),r3
 2003f74:	34 02 00 05 	mvi r2,5
 2003f78:	35 8c 00 03 	addi r12,r12,3
 2003f7c:	31 84 00 01 	sb (r12+1),r4
 2003f80:	31 89 00 00 	sb (r12+0),r9
 2003f84:	e3 ff ff 19 	bi 2003be8 <_wctomb_r+0x90>
 2003f88:	78 01 03 ff 	mvhi r1,0x3ff
 2003f8c:	38 21 ff ff 	ori r1,r1,0xffff
 2003f90:	4c 2b ff 47 	bge r1,r11,2003cac <_wctomb_r+0x154>
 2003f94:	78 03 40 00 	mvhi r3,0x4000
 2003f98:	78 04 3f 00 	mvhi r4,0x3f00
 2003f9c:	78 05 00 fc 	mvhi r5,0xfc
 2003fa0:	78 06 00 03 	mvhi r6,0x3
 2003fa4:	38 63 00 00 	ori r3,r3,0x0
 2003fa8:	38 84 00 00 	ori r4,r4,0x0
 2003fac:	38 a5 00 00 	ori r5,r5,0x0
 2003fb0:	38 c6 f0 00 	ori r6,r6,0xf000
 2003fb4:	a1 63 18 00 	and r3,r11,r3
 2003fb8:	a1 64 20 00 	and r4,r11,r4
 2003fbc:	a1 65 28 00 	and r5,r11,r5
 2003fc0:	a1 66 30 00 	and r6,r11,r6
 2003fc4:	21 68 0f c0 	andi r8,r11,0xfc0
 2003fc8:	14 63 00 1e 	sri r3,r3,30
 2003fcc:	14 84 00 18 	sri r4,r4,24
 2003fd0:	14 a5 00 12 	sri r5,r5,18
 2003fd4:	14 c6 00 0c 	sri r6,r6,12
 2003fd8:	15 08 00 06 	sri r8,r8,6
 2003fdc:	34 02 ff 80 	mvi r2,-128
 2003fe0:	21 67 00 3f 	andi r7,r11,0x3f
 2003fe4:	34 01 ff fc 	mvi r1,-4
 2003fe8:	b8 e2 38 00 	or r7,r7,r2
 2003fec:	b8 82 20 00 	or r4,r4,r2
 2003ff0:	b8 a2 28 00 	or r5,r5,r2
 2003ff4:	b8 c2 30 00 	or r6,r6,r2
 2003ff8:	b9 02 40 00 	or r8,r8,r2
 2003ffc:	b8 61 18 00 	or r3,r3,r1
 2004000:	31 87 00 05 	sb (r12+5),r7
 2004004:	31 83 00 00 	sb (r12+0),r3
 2004008:	31 84 00 01 	sb (r12+1),r4
 200400c:	31 85 00 02 	sb (r12+2),r5
 2004010:	31 86 00 03 	sb (r12+3),r6
 2004014:	31 88 00 04 	sb (r12+4),r8
 2004018:	34 02 00 06 	mvi r2,6
 200401c:	e3 ff fe f3 	bi 2003be8 <_wctomb_r+0x90>

02004020 <__swsetup>:
 2004020:	37 9c ff f4 	addi sp,sp,-12
 2004024:	5b 8b 00 0c 	sw (sp+12),r11
 2004028:	5b 8c 00 08 	sw (sp+8),r12
 200402c:	5b 9d 00 04 	sw (sp+4),ra
 2004030:	78 0c 02 00 	mvhi r12,0x200
 2004034:	39 8c aa e8 	ori r12,r12,0xaae8
 2004038:	29 82 00 00 	lw r2,(r12+0)
 200403c:	b8 20 58 00 	mv r11,r1
 2004040:	44 40 00 03 	be r2,r0,200404c <__swsetup+0x2c>
 2004044:	28 41 00 38 	lw r1,(r2+56)
 2004048:	44 20 00 23 	be r1,r0,20040d4 <__swsetup+0xb4>
 200404c:	1d 65 00 0c 	lh r5,(r11+12)
 2004050:	2d 66 00 0c 	lhu r6,(r11+12)
 2004054:	20 a2 ff ff 	andi r2,r5,0xffff
 2004058:	20 44 00 08 	andi r4,r2,0x8
 200405c:	44 80 00 24 	be r4,r0,20040ec <__swsetup+0xcc>
 2004060:	29 63 00 10 	lw r3,(r11+16)
 2004064:	44 60 00 1f 	be r3,r0,20040e0 <__swsetup+0xc0>
 2004068:	2d 61 00 0c 	lhu r1,(r11+12)
 200406c:	34 03 00 00 	mvi r3,0
 2004070:	20 22 00 01 	andi r2,r1,0x1
 2004074:	5c 43 00 0e 	bne r2,r3,20040ac <__swsetup+0x8c>
 2004078:	20 21 00 02 	andi r1,r1,0x2
 200407c:	b8 40 18 00 	mv r3,r2
 2004080:	44 22 00 09 	be r1,r2,20040a4 <__swsetup+0x84>
 2004084:	59 63 00 08 	sw (r11+8),r3
 2004088:	34 03 00 00 	mvi r3,0
 200408c:	b8 60 08 00 	mv r1,r3
 2004090:	2b 9d 00 04 	lw ra,(sp+4)
 2004094:	2b 8b 00 0c 	lw r11,(sp+12)
 2004098:	2b 8c 00 08 	lw r12,(sp+8)
 200409c:	37 9c 00 0c 	addi sp,sp,12
 20040a0:	c3 a0 00 00 	ret
 20040a4:	29 63 00 14 	lw r3,(r11+20)
 20040a8:	e3 ff ff f7 	bi 2004084 <__swsetup+0x64>
 20040ac:	29 61 00 14 	lw r1,(r11+20)
 20040b0:	59 63 00 08 	sw (r11+8),r3
 20040b4:	c8 01 08 00 	sub r1,r0,r1
 20040b8:	59 61 00 18 	sw (r11+24),r1
 20040bc:	b8 60 08 00 	mv r1,r3
 20040c0:	2b 9d 00 04 	lw ra,(sp+4)
 20040c4:	2b 8b 00 0c 	lw r11,(sp+12)
 20040c8:	2b 8c 00 08 	lw r12,(sp+8)
 20040cc:	37 9c 00 0c 	addi sp,sp,12
 20040d0:	c3 a0 00 00 	ret
 20040d4:	b8 40 08 00 	mv r1,r2
 20040d8:	f8 00 05 fd 	calli 20058cc <__sinit>
 20040dc:	e3 ff ff dc 	bi 200404c <__swsetup+0x2c>
 20040e0:	b9 60 08 00 	mv r1,r11
 20040e4:	f8 00 08 60 	calli 2006264 <__smakebuf>
 20040e8:	e3 ff ff e0 	bi 2004068 <__swsetup+0x48>
 20040ec:	20 41 00 10 	andi r1,r2,0x10
 20040f0:	34 03 ff ff 	mvi r3,-1
 20040f4:	44 24 ff e6 	be r1,r4,200408c <__swsetup+0x6c>
 20040f8:	20 41 00 04 	andi r1,r2,0x4
 20040fc:	5c 20 00 05 	bne r1,r0,2004110 <__swsetup+0xf0>
 2004100:	29 63 00 10 	lw r3,(r11+16)
 2004104:	38 a1 00 08 	ori r1,r5,0x8
 2004108:	0d 61 00 0c 	sh (r11+12),r1
 200410c:	e3 ff ff d6 	bi 2004064 <__swsetup+0x44>
 2004110:	29 62 00 30 	lw r2,(r11+48)
 2004114:	44 40 00 0a 	be r2,r0,200413c <__swsetup+0x11c>
 2004118:	35 61 00 40 	addi r1,r11,64
 200411c:	44 41 00 04 	be r2,r1,200412c <__swsetup+0x10c>
 2004120:	29 81 00 00 	lw r1,(r12+0)
 2004124:	f8 00 06 86 	calli 2005b3c <_free_r>
 2004128:	2d 66 00 0c 	lhu r6,(r11+12)
 200412c:	3c c5 00 10 	sli r5,r6,16
 2004130:	34 01 00 00 	mvi r1,0
 2004134:	14 a5 00 10 	sri r5,r5,16
 2004138:	59 61 00 30 	sw (r11+48),r1
 200413c:	29 63 00 10 	lw r3,(r11+16)
 2004140:	34 02 ff db 	mvi r2,-37
 2004144:	a0 a2 10 00 	and r2,r5,r2
 2004148:	34 01 00 00 	mvi r1,0
 200414c:	59 61 00 04 	sw (r11+4),r1
 2004150:	0d 62 00 0c 	sh (r11+12),r2
 2004154:	59 63 00 00 	sw (r11+0),r3
 2004158:	dc 40 28 00 	sexth r5,r2
 200415c:	e3 ff ff ea 	bi 2004104 <__swsetup+0xe4>

02004160 <quorem>:
 2004160:	37 9c ff dc 	addi sp,sp,-36
 2004164:	5b 8b 00 24 	sw (sp+36),r11
 2004168:	5b 8c 00 20 	sw (sp+32),r12
 200416c:	5b 8d 00 1c 	sw (sp+28),r13
 2004170:	5b 8e 00 18 	sw (sp+24),r14
 2004174:	5b 8f 00 14 	sw (sp+20),r15
 2004178:	5b 90 00 10 	sw (sp+16),r16
 200417c:	5b 91 00 0c 	sw (sp+12),r17
 2004180:	5b 92 00 08 	sw (sp+8),r18
 2004184:	5b 9d 00 04 	sw (sp+4),ra
 2004188:	b8 20 78 00 	mv r15,r1
 200418c:	b8 40 88 00 	mv r17,r2
 2004190:	28 21 00 10 	lw r1,(r1+16)
 2004194:	28 42 00 10 	lw r2,(r2+16)
 2004198:	4c 22 00 0d 	bge r1,r2,20041cc <quorem+0x6c>
 200419c:	34 01 00 00 	mvi r1,0
 20041a0:	2b 9d 00 04 	lw ra,(sp+4)
 20041a4:	2b 8b 00 24 	lw r11,(sp+36)
 20041a8:	2b 8c 00 20 	lw r12,(sp+32)
 20041ac:	2b 8d 00 1c 	lw r13,(sp+28)
 20041b0:	2b 8e 00 18 	lw r14,(sp+24)
 20041b4:	2b 8f 00 14 	lw r15,(sp+20)
 20041b8:	2b 90 00 10 	lw r16,(sp+16)
 20041bc:	2b 91 00 0c 	lw r17,(sp+12)
 20041c0:	2b 92 00 08 	lw r18,(sp+8)
 20041c4:	37 9c 00 24 	addi sp,sp,36
 20041c8:	c3 a0 00 00 	ret
 20041cc:	34 41 00 03 	addi r1,r2,3
 20041d0:	3c 21 00 02 	sli r1,r1,2
 20041d4:	34 4d ff ff 	addi r13,r2,-1
 20041d8:	b5 e1 10 00 	add r2,r15,r1
 20041dc:	b6 21 08 00 	add r1,r17,r1
 20041e0:	28 4c 00 04 	lw r12,(r2+4)
 20041e4:	28 22 00 04 	lw r2,(r1+4)
 20041e8:	34 32 00 04 	addi r18,r1,4
 20041ec:	b9 80 08 00 	mv r1,r12
 20041f0:	34 42 00 01 	addi r2,r2,1
 20041f4:	f8 00 15 85 	calli 2009808 <__udivsi3>
 20041f8:	b8 20 70 00 	mv r14,r1
 20041fc:	36 2b 00 14 	addi r11,r17,20
 2004200:	35 f0 00 14 	addi r16,r15,20
 2004204:	5c 20 00 2b 	bne r1,r0,20042b0 <quorem+0x150>
 2004208:	b9 a0 60 00 	mv r12,r13
 200420c:	ba 20 10 00 	mv r2,r17
 2004210:	b9 e0 08 00 	mv r1,r15
 2004214:	f8 00 0b 6b 	calli 2006fc0 <__mcmp>
 2004218:	48 01 00 24 	bg r0,r1,20042a8 <quorem+0x148>
 200421c:	35 ce 00 01 	addi r14,r14,1
 2004220:	ba 00 28 00 	mv r5,r16
 2004224:	34 06 00 00 	mvi r6,0
 2004228:	29 63 00 00 	lw r3,(r11+0)
 200422c:	28 a1 00 00 	lw r1,(r5+0)
 2004230:	35 6b 00 04 	addi r11,r11,4
 2004234:	20 64 ff ff 	andi r4,r3,0xffff
 2004238:	20 22 ff ff 	andi r2,r1,0xffff
 200423c:	c8 44 10 00 	sub r2,r2,r4
 2004240:	b4 46 10 00 	add r2,r2,r6
 2004244:	00 21 00 10 	srui r1,r1,16
 2004248:	00 63 00 10 	srui r3,r3,16
 200424c:	14 44 00 10 	sri r4,r2,16
 2004250:	c8 23 08 00 	sub r1,r1,r3
 2004254:	b4 24 08 00 	add r1,r1,r4
 2004258:	0c a1 00 00 	sh (r5+0),r1
 200425c:	0c a2 00 02 	sh (r5+2),r2
 2004260:	14 26 00 10 	sri r6,r1,16
 2004264:	34 a5 00 04 	addi r5,r5,4
 2004268:	52 4b ff f0 	bgeu r18,r11,2004228 <quorem+0xc8>
 200426c:	35 a1 00 04 	addi r1,r13,4
 2004270:	3c 21 00 02 	sli r1,r1,2
 2004274:	b5 e1 08 00 	add r1,r15,r1
 2004278:	28 22 00 04 	lw r2,(r1+4)
 200427c:	5c 40 00 0b 	bne r2,r0,20042a8 <quorem+0x148>
 2004280:	b8 20 10 00 	mv r2,r1
 2004284:	52 01 00 08 	bgeu r16,r1,20042a4 <quorem+0x144>
 2004288:	28 21 00 00 	lw r1,(r1+0)
 200428c:	5c 20 00 06 	bne r1,r0,20042a4 <quorem+0x144>
 2004290:	34 42 ff fc 	addi r2,r2,-4
 2004294:	35 8c ff ff 	addi r12,r12,-1
 2004298:	52 02 00 03 	bgeu r16,r2,20042a4 <quorem+0x144>
 200429c:	28 41 00 00 	lw r1,(r2+0)
 20042a0:	44 20 ff fc 	be r1,r0,2004290 <quorem+0x130>
 20042a4:	59 ec 00 10 	sw (r15+16),r12
 20042a8:	b9 c0 08 00 	mv r1,r14
 20042ac:	e3 ff ff bd 	bi 20041a0 <quorem+0x40>
 20042b0:	34 08 00 00 	mvi r8,0
 20042b4:	ba 00 30 00 	mv r6,r16
 20042b8:	b9 60 38 00 	mv r7,r11
 20042bc:	b9 00 28 00 	mv r5,r8
 20042c0:	28 e3 00 00 	lw r3,(r7+0)
 20042c4:	28 c2 00 00 	lw r2,(r6+0)
 20042c8:	34 e7 00 04 	addi r7,r7,4
 20042cc:	20 61 ff ff 	andi r1,r3,0xffff
 20042d0:	89 c1 08 00 	mul r1,r14,r1
 20042d4:	00 63 00 10 	srui r3,r3,16
 20042d8:	20 44 ff ff 	andi r4,r2,0xffff
 20042dc:	b4 a1 08 00 	add r1,r5,r1
 20042e0:	89 c3 18 00 	mul r3,r14,r3
 20042e4:	00 25 00 10 	srui r5,r1,16
 20042e8:	b5 04 20 00 	add r4,r8,r4
 20042ec:	20 21 ff ff 	andi r1,r1,0xffff
 20042f0:	b4 a3 28 00 	add r5,r5,r3
 20042f4:	c8 81 20 00 	sub r4,r4,r1
 20042f8:	00 42 00 10 	srui r2,r2,16
 20042fc:	20 a1 ff ff 	andi r1,r5,0xffff
 2004300:	14 83 00 10 	sri r3,r4,16
 2004304:	c8 41 10 00 	sub r2,r2,r1
 2004308:	b4 43 10 00 	add r2,r2,r3
 200430c:	0c c2 00 00 	sh (r6+0),r2
 2004310:	0c c4 00 02 	sh (r6+2),r4
 2004314:	00 a5 00 10 	srui r5,r5,16
 2004318:	34 c6 00 04 	addi r6,r6,4
 200431c:	14 48 00 10 	sri r8,r2,16
 2004320:	52 47 ff e8 	bgeu r18,r7,20042c0 <quorem+0x160>
 2004324:	5d 80 ff b9 	bne r12,r0,2004208 <quorem+0xa8>
 2004328:	35 a1 00 04 	addi r1,r13,4
 200432c:	3c 21 00 02 	sli r1,r1,2
 2004330:	b5 e1 10 00 	add r2,r15,r1
 2004334:	52 02 00 07 	bgeu r16,r2,2004350 <quorem+0x1f0>
 2004338:	e0 00 00 04 	bi 2004348 <quorem+0x1e8>
 200433c:	34 42 ff fc 	addi r2,r2,-4
 2004340:	35 ad ff ff 	addi r13,r13,-1
 2004344:	52 02 00 03 	bgeu r16,r2,2004350 <quorem+0x1f0>
 2004348:	28 41 00 00 	lw r1,(r2+0)
 200434c:	44 20 ff fc 	be r1,r0,200433c <quorem+0x1dc>
 2004350:	59 ed 00 10 	sw (r15+16),r13
 2004354:	b9 a0 60 00 	mv r12,r13
 2004358:	e3 ff ff ad 	bi 200420c <quorem+0xac>

0200435c <_dtoa_r>:
 200435c:	37 9c ff 6c 	addi sp,sp,-148
 2004360:	5b 8b 00 44 	sw (sp+68),r11
 2004364:	5b 8c 00 40 	sw (sp+64),r12
 2004368:	5b 8d 00 3c 	sw (sp+60),r13
 200436c:	5b 8e 00 38 	sw (sp+56),r14
 2004370:	5b 8f 00 34 	sw (sp+52),r15
 2004374:	5b 90 00 30 	sw (sp+48),r16
 2004378:	5b 91 00 2c 	sw (sp+44),r17
 200437c:	5b 92 00 28 	sw (sp+40),r18
 2004380:	5b 93 00 24 	sw (sp+36),r19
 2004384:	5b 94 00 20 	sw (sp+32),r20
 2004388:	5b 95 00 1c 	sw (sp+28),r21
 200438c:	5b 96 00 18 	sw (sp+24),r22
 2004390:	5b 97 00 14 	sw (sp+20),r23
 2004394:	5b 98 00 10 	sw (sp+16),r24
 2004398:	5b 99 00 0c 	sw (sp+12),r25
 200439c:	5b 9b 00 08 	sw (sp+8),fp
 20043a0:	5b 9d 00 04 	sw (sp+4),ra
 20043a4:	28 29 00 40 	lw r9,(r1+64)
 20043a8:	5b 85 00 60 	sw (sp+96),r5
 20043ac:	5b 86 00 5c 	sw (sp+92),r6
 20043b0:	5b 88 00 58 	sw (sp+88),r8
 20043b4:	b8 20 b8 00 	mv r23,r1
 20043b8:	b8 80 d8 00 	mv fp,r4
 20043bc:	b8 e0 60 00 	mv r12,r7
 20043c0:	b8 40 80 00 	mv r16,r2
 20043c4:	b8 60 88 00 	mv r17,r3
 20043c8:	45 20 00 0b 	be r9,r0,20043f4 <_dtoa_r+0x98>
 20043cc:	28 22 00 44 	lw r2,(r1+68)
 20043d0:	34 04 00 01 	mvi r4,1
 20043d4:	59 22 00 04 	sw (r9+4),r2
 20043d8:	28 23 00 44 	lw r3,(r1+68)
 20043dc:	b9 20 10 00 	mv r2,r9
 20043e0:	bc 83 20 00 	sl r4,r4,r3
 20043e4:	59 24 00 08 	sw (r9+8),r4
 20043e8:	f8 00 0a 96 	calli 2006e40 <_Bfree>
 20043ec:	34 01 00 00 	mvi r1,0
 20043f0:	5a e1 00 40 	sw (r23+64),r1
 20043f4:	ba 00 58 00 	mv r11,r16
 20043f8:	4e 00 00 1c 	bge r16,r0,2004468 <_dtoa_r+0x10c>
 20043fc:	34 02 00 01 	mvi r2,1
 2004400:	78 03 7f f0 	mvhi r3,0x7ff0
 2004404:	78 01 7f ff 	mvhi r1,0x7fff
 2004408:	38 21 ff ff 	ori r1,r1,0xffff
 200440c:	59 82 00 00 	sw (r12+0),r2
 2004410:	b8 60 10 00 	mv r2,r3
 2004414:	a2 01 58 00 	and r11,r16,r1
 2004418:	38 42 00 00 	ori r2,r2,0x0
 200441c:	5b 83 00 4c 	sw (sp+76),r3
 2004420:	a1 62 08 00 	and r1,r11,r2
 2004424:	b9 60 80 00 	mv r16,r11
 2004428:	5c 22 00 18 	bne r1,r2,2004488 <_dtoa_r+0x12c>
 200442c:	2b 84 00 5c 	lw r4,(sp+92)
 2004430:	34 01 27 0f 	mvi r1,9999
 2004434:	58 81 00 00 	sw (r4+0),r1
 2004438:	46 20 00 ee 	be r17,r0,20047f0 <_dtoa_r+0x494>
 200443c:	78 02 02 00 	mvhi r2,0x200
 2004440:	38 42 a2 b8 	ori r2,r2,0xa2b8
 2004444:	2b 85 00 58 	lw r5,(sp+88)
 2004448:	44 a0 00 24 	be r5,r0,20044d8 <_dtoa_r+0x17c>
 200444c:	40 41 00 03 	lbu r1,(r2+3)
 2004450:	34 43 00 03 	addi r3,r2,3
 2004454:	44 20 00 02 	be r1,r0,200445c <_dtoa_r+0x100>
 2004458:	34 43 00 08 	addi r3,r2,8
 200445c:	2b 81 00 58 	lw r1,(sp+88)
 2004460:	58 23 00 00 	sw (r1+0),r3
 2004464:	e0 00 00 1d 	bi 20044d8 <_dtoa_r+0x17c>
 2004468:	78 03 7f f0 	mvhi r3,0x7ff0
 200446c:	b8 60 10 00 	mv r2,r3
 2004470:	34 01 00 00 	mvi r1,0
 2004474:	38 42 00 00 	ori r2,r2,0x0
 2004478:	59 81 00 00 	sw (r12+0),r1
 200447c:	5b 83 00 4c 	sw (sp+76),r3
 2004480:	a1 62 08 00 	and r1,r11,r2
 2004484:	44 22 ff ea 	be r1,r2,200442c <_dtoa_r+0xd0>
 2004488:	34 03 00 00 	mvi r3,0
 200448c:	ba 20 10 00 	mv r2,r17
 2004490:	ba 00 08 00 	mv r1,r16
 2004494:	b8 60 20 00 	mv r4,r3
 2004498:	f8 00 13 54 	calli 20091e8 <__nedf2>
 200449c:	ba 00 98 00 	mv r19,r16
 20044a0:	ba 20 a0 00 	mv r20,r17
 20044a4:	b8 20 10 00 	mv r2,r1
 20044a8:	5c 20 00 20 	bne r1,r0,2004528 <_dtoa_r+0x1cc>
 20044ac:	2b 83 00 5c 	lw r3,(sp+92)
 20044b0:	2b 84 00 58 	lw r4,(sp+88)
 20044b4:	34 01 00 01 	mvi r1,1
 20044b8:	58 61 00 00 	sw (r3+0),r1
 20044bc:	44 82 02 31 	be r4,r2,2004d80 <_dtoa_r+0xa24>
 20044c0:	2b 85 00 58 	lw r5,(sp+88)
 20044c4:	78 01 02 00 	mvhi r1,0x200
 20044c8:	38 21 a2 bd 	ori r1,r1,0xa2bd
 20044cc:	78 02 02 00 	mvhi r2,0x200
 20044d0:	58 a1 00 00 	sw (r5+0),r1
 20044d4:	38 42 a2 bc 	ori r2,r2,0xa2bc
 20044d8:	b8 40 08 00 	mv r1,r2
 20044dc:	2b 9d 00 04 	lw ra,(sp+4)
 20044e0:	2b 8b 00 44 	lw r11,(sp+68)
 20044e4:	2b 8c 00 40 	lw r12,(sp+64)
 20044e8:	2b 8d 00 3c 	lw r13,(sp+60)
 20044ec:	2b 8e 00 38 	lw r14,(sp+56)
 20044f0:	2b 8f 00 34 	lw r15,(sp+52)
 20044f4:	2b 90 00 30 	lw r16,(sp+48)
 20044f8:	2b 91 00 2c 	lw r17,(sp+44)
 20044fc:	2b 92 00 28 	lw r18,(sp+40)
 2004500:	2b 93 00 24 	lw r19,(sp+36)
 2004504:	2b 94 00 20 	lw r20,(sp+32)
 2004508:	2b 95 00 1c 	lw r21,(sp+28)
 200450c:	2b 96 00 18 	lw r22,(sp+24)
 2004510:	2b 97 00 14 	lw r23,(sp+20)
 2004514:	2b 98 00 10 	lw r24,(sp+16)
 2004518:	2b 99 00 0c 	lw r25,(sp+12)
 200451c:	2b 9b 00 08 	lw fp,(sp+8)
 2004520:	37 9c 00 94 	addi sp,sp,148
 2004524:	c3 a0 00 00 	ret
 2004528:	ba 20 18 00 	mv r3,r17
 200452c:	ba e0 08 00 	mv r1,r23
 2004530:	ba 00 10 00 	mv r2,r16
 2004534:	37 84 00 90 	addi r4,sp,144
 2004538:	37 85 00 94 	addi r5,sp,148
 200453c:	f8 00 0a e6 	calli 20070d4 <_d2b>
 2004540:	5b 81 00 8c 	sw (sp+140),r1
 2004544:	01 61 00 14 	srui r1,r11,20
 2004548:	20 23 07 ff 	andi r3,r1,0x7ff
 200454c:	5c 60 00 b0 	bne r3,r0,200480c <_dtoa_r+0x4b0>
 2004550:	2b 81 00 90 	lw r1,(sp+144)
 2004554:	2b 8f 00 94 	lw r15,(sp+148)
 2004558:	34 03 00 20 	mvi r3,32
 200455c:	b5 e1 10 00 	add r2,r15,r1
 2004560:	34 4c 04 32 	addi r12,r2,1074
 2004564:	c8 6c 08 00 	sub r1,r3,r12
 2004568:	be 21 08 00 	sl r1,r17,r1
 200456c:	4c 6c 00 06 	bge r3,r12,2004584 <_dtoa_r+0x228>
 2004570:	34 42 04 12 	addi r2,r2,1042
 2004574:	c8 0c 08 00 	sub r1,r0,r12
 2004578:	bd 61 08 00 	sl r1,r11,r1
 200457c:	82 22 10 00 	sru r2,r17,r2
 2004580:	b8 22 08 00 	or r1,r1,r2
 2004584:	f8 00 14 0b 	calli 20095b0 <__floatunsidf>
 2004588:	b8 40 28 00 	mv r5,r2
 200458c:	78 02 fe 10 	mvhi r2,0xfe10
 2004590:	38 42 00 00 	ori r2,r2,0x0
 2004594:	b4 22 20 00 	add r4,r1,r2
 2004598:	34 02 00 01 	mvi r2,1
 200459c:	35 8d fb cd 	addi r13,r12,-1075
 20045a0:	5b 82 00 88 	sw (sp+136),r2
 20045a4:	78 03 3f f8 	mvhi r3,0x3ff8
 20045a8:	b8 a0 10 00 	mv r2,r5
 20045ac:	38 63 00 00 	ori r3,r3,0x0
 20045b0:	b8 80 08 00 	mv r1,r4
 20045b4:	34 04 00 00 	mvi r4,0
 20045b8:	f8 00 11 69 	calli 2008b5c <__subdf3>
 20045bc:	78 03 3f d2 	mvhi r3,0x3fd2
 20045c0:	78 04 63 6f 	mvhi r4,0x636f
 20045c4:	38 63 87 a7 	ori r3,r3,0x87a7
 20045c8:	38 84 43 61 	ori r4,r4,0x4361
 20045cc:	f8 00 11 9b 	calli 2008c38 <__muldf3>
 20045d0:	78 03 3f c6 	mvhi r3,0x3fc6
 20045d4:	78 04 8b 60 	mvhi r4,0x8b60
 20045d8:	38 63 8a 28 	ori r3,r3,0x8a28
 20045dc:	38 84 c8 b3 	ori r4,r4,0xc8b3
 20045e0:	f8 00 11 7c 	calli 2008bd0 <__adddf3>
 20045e4:	b8 20 58 00 	mv r11,r1
 20045e8:	b9 a0 08 00 	mv r1,r13
 20045ec:	b8 40 60 00 	mv r12,r2
 20045f0:	f8 00 13 82 	calli 20093f8 <__floatsidf>
 20045f4:	78 03 3f d3 	mvhi r3,0x3fd3
 20045f8:	78 04 50 9f 	mvhi r4,0x509f
 20045fc:	38 63 44 13 	ori r3,r3,0x4413
 2004600:	38 84 79 fb 	ori r4,r4,0x79fb
 2004604:	f8 00 11 8d 	calli 2008c38 <__muldf3>
 2004608:	b8 20 18 00 	mv r3,r1
 200460c:	b8 40 20 00 	mv r4,r2
 2004610:	b9 60 08 00 	mv r1,r11
 2004614:	b9 80 10 00 	mv r2,r12
 2004618:	f8 00 11 6e 	calli 2008bd0 <__adddf3>
 200461c:	b8 20 58 00 	mv r11,r1
 2004620:	b9 60 08 00 	mv r1,r11
 2004624:	b8 40 70 00 	mv r14,r2
 2004628:	f8 00 13 ab 	calli 20094d4 <__fixdfsi>
 200462c:	34 03 00 00 	mvi r3,0
 2004630:	b8 20 c0 00 	mv r24,r1
 2004634:	b9 c0 10 00 	mv r2,r14
 2004638:	b9 60 08 00 	mv r1,r11
 200463c:	b8 60 20 00 	mv r4,r3
 2004640:	f8 00 13 4b 	calli 200936c <__ltdf2>
 2004644:	48 01 02 86 	bg r0,r1,200505c <_dtoa_r+0xd00>
 2004648:	34 01 00 16 	mvi r1,22
 200464c:	50 38 01 94 	bgeu r1,r24,2004c9c <_dtoa_r+0x940>
 2004650:	34 03 00 01 	mvi r3,1
 2004654:	5b 83 00 78 	sw (sp+120),r3
 2004658:	35 e1 ff ff 	addi r1,r15,-1
 200465c:	c8 2d 08 00 	sub r1,r1,r13
 2004660:	c8 01 10 00 	sub r2,r0,r1
 2004664:	34 03 00 00 	mvi r3,0
 2004668:	5b 82 00 68 	sw (sp+104),r2
 200466c:	5b 83 00 80 	sw (sp+128),r3
 2004670:	48 61 00 03 	bg r3,r1,200467c <_dtoa_r+0x320>
 2004674:	5b 81 00 80 	sw (sp+128),r1
 2004678:	5b 83 00 68 	sw (sp+104),r3
 200467c:	48 18 02 80 	bg r0,r24,200507c <_dtoa_r+0xd20>
 2004680:	2b 84 00 80 	lw r4,(sp+128)
 2004684:	34 05 00 00 	mvi r5,0
 2004688:	5b 98 00 84 	sw (sp+132),r24
 200468c:	b4 98 20 00 	add r4,r4,r24
 2004690:	5b 84 00 80 	sw (sp+128),r4
 2004694:	5b 85 00 6c 	sw (sp+108),r5
 2004698:	34 01 00 09 	mvi r1,9
 200469c:	50 3b 01 8d 	bgeu r1,fp,2004cd0 <_dtoa_r+0x974>
 20046a0:	34 1b 00 00 	mvi fp,0
 20046a4:	34 0c 00 01 	mvi r12,1
 20046a8:	34 03 00 00 	mvi r3,0
 20046ac:	34 19 ff ff 	mvi r25,-1
 20046b0:	34 04 00 01 	mvi r4,1
 20046b4:	5b 83 00 60 	sw (sp+96),r3
 20046b8:	5b 99 00 70 	sw (sp+112),r25
 20046bc:	5b 84 00 7c 	sw (sp+124),r4
 20046c0:	b8 60 58 00 	mv r11,r3
 20046c4:	34 01 00 00 	mvi r1,0
 20046c8:	5a e1 00 44 	sw (r23+68),r1
 20046cc:	2a e2 00 44 	lw r2,(r23+68)
 20046d0:	ba e0 08 00 	mv r1,r23
 20046d4:	f8 00 0a 54 	calli 2007024 <_Balloc>
 20046d8:	5b 81 00 64 	sw (sp+100),r1
 20046dc:	2b 84 00 64 	lw r4,(sp+100)
 20046e0:	a1 8b 08 00 	and r1,r12,r11
 20046e4:	5a e4 00 40 	sw (r23+64),r4
 20046e8:	44 20 00 ea 	be r1,r0,2004a90 <_dtoa_r+0x734>
 20046ec:	4c 18 03 35 	bge r0,r24,20053c0 <_dtoa_r+0x1064>
 20046f0:	23 01 00 0f 	andi r1,r24,0xf
 20046f4:	3c 21 00 03 	sli r1,r1,3
 20046f8:	78 02 02 00 	mvhi r2,0x200
 20046fc:	17 0c 00 04 	sri r12,r24,4
 2004700:	38 42 a4 e0 	ori r2,r2,0xa4e0
 2004704:	b4 41 10 00 	add r2,r2,r1
 2004708:	21 83 00 10 	andi r3,r12,0x10
 200470c:	28 4e 00 04 	lw r14,(r2+4)
 2004710:	28 4d 00 00 	lw r13,(r2+0)
 2004714:	ba 60 88 00 	mv r17,r19
 2004718:	ba 80 80 00 	mv r16,r20
 200471c:	34 0f 00 02 	mvi r15,2
 2004720:	5c 60 02 63 	bne r3,r0,20050ac <_dtoa_r+0xd50>
 2004724:	45 80 00 10 	be r12,r0,2004764 <_dtoa_r+0x408>
 2004728:	78 0b 02 00 	mvhi r11,0x200
 200472c:	39 6b a5 a8 	ori r11,r11,0xa5a8
 2004730:	21 81 00 01 	andi r1,r12,0x1
 2004734:	44 20 00 09 	be r1,r0,2004758 <_dtoa_r+0x3fc>
 2004738:	29 63 00 00 	lw r3,(r11+0)
 200473c:	29 64 00 04 	lw r4,(r11+4)
 2004740:	b9 a0 08 00 	mv r1,r13
 2004744:	b9 c0 10 00 	mv r2,r14
 2004748:	f8 00 11 3c 	calli 2008c38 <__muldf3>
 200474c:	35 ef 00 01 	addi r15,r15,1
 2004750:	b8 20 68 00 	mv r13,r1
 2004754:	b8 40 70 00 	mv r14,r2
 2004758:	15 8c 00 01 	sri r12,r12,1
 200475c:	35 6b 00 08 	addi r11,r11,8
 2004760:	5d 80 ff f4 	bne r12,r0,2004730 <_dtoa_r+0x3d4>
 2004764:	b9 a0 18 00 	mv r3,r13
 2004768:	ba 20 08 00 	mv r1,r17
 200476c:	ba 00 10 00 	mv r2,r16
 2004770:	b9 c0 20 00 	mv r4,r14
 2004774:	f8 00 11 f1 	calli 2008f38 <__divdf3>
 2004778:	b8 20 60 00 	mv r12,r1
 200477c:	b8 40 68 00 	mv r13,r2
 2004780:	2b 85 00 78 	lw r5,(sp+120)
 2004784:	44 a0 00 2e 	be r5,r0,200483c <_dtoa_r+0x4e0>
 2004788:	78 03 3f f0 	mvhi r3,0x3ff0
 200478c:	b9 a0 10 00 	mv r2,r13
 2004790:	38 63 00 00 	ori r3,r3,0x0
 2004794:	b9 80 08 00 	mv r1,r12
 2004798:	34 04 00 00 	mvi r4,0
 200479c:	f8 00 12 f4 	calli 200936c <__ltdf2>
 20047a0:	34 02 00 00 	mvi r2,0
 20047a4:	48 41 02 66 	bg r2,r1,200513c <_dtoa_r+0xde0>
 20047a8:	6b 21 00 00 	cmpgi r1,r25,0
 20047ac:	a0 22 08 00 	and r1,r1,r2
 20047b0:	44 20 00 23 	be r1,r0,200483c <_dtoa_r+0x4e0>
 20047b4:	2b 81 00 70 	lw r1,(sp+112)
 20047b8:	4c 01 00 b4 	bge r0,r1,2004a88 <_dtoa_r+0x72c>
 20047bc:	78 03 40 24 	mvhi r3,0x4024
 20047c0:	b9 a0 10 00 	mv r2,r13
 20047c4:	b9 80 08 00 	mv r1,r12
 20047c8:	38 63 00 00 	ori r3,r3,0x0
 20047cc:	34 04 00 00 	mvi r4,0
 20047d0:	f8 00 11 1a 	calli 2008c38 <__muldf3>
 20047d4:	b8 40 68 00 	mv r13,r2
 20047d8:	37 02 ff ff 	addi r2,r24,-1
 20047dc:	b8 20 60 00 	mv r12,r1
 20047e0:	35 ef 00 01 	addi r15,r15,1
 20047e4:	5b 82 00 74 	sw (sp+116),r2
 20047e8:	2b 96 00 70 	lw r22,(sp+112)
 20047ec:	e0 00 00 16 	bi 2004844 <_dtoa_r+0x4e8>
 20047f0:	78 01 00 0f 	mvhi r1,0xf
 20047f4:	38 21 ff ff 	ori r1,r1,0xffff
 20047f8:	a1 61 08 00 	and r1,r11,r1
 20047fc:	5c 31 ff 10 	bne r1,r17,200443c <_dtoa_r+0xe0>
 2004800:	78 02 02 00 	mvhi r2,0x200
 2004804:	38 42 a4 70 	ori r2,r2,0xa470
 2004808:	e3 ff ff 0f 	bi 2004444 <_dtoa_r+0xe8>
 200480c:	78 02 00 0f 	mvhi r2,0xf
 2004810:	38 42 ff ff 	ori r2,r2,0xffff
 2004814:	78 01 3f f0 	mvhi r1,0x3ff0
 2004818:	38 21 00 00 	ori r1,r1,0x0
 200481c:	a2 02 10 00 	and r2,r16,r2
 2004820:	b8 41 20 00 	or r4,r2,r1
 2004824:	34 01 00 00 	mvi r1,0
 2004828:	34 6d fc 01 	addi r13,r3,-1023
 200482c:	ba 20 28 00 	mv r5,r17
 2004830:	5b 81 00 88 	sw (sp+136),r1
 2004834:	2b 8f 00 94 	lw r15,(sp+148)
 2004838:	e3 ff ff 5b 	bi 20045a4 <_dtoa_r+0x248>
 200483c:	bb 20 b0 00 	mv r22,r25
 2004840:	5b 98 00 74 	sw (sp+116),r24
 2004844:	b9 e0 08 00 	mv r1,r15
 2004848:	f8 00 12 ec 	calli 20093f8 <__floatsidf>
 200484c:	b8 20 18 00 	mv r3,r1
 2004850:	b8 40 20 00 	mv r4,r2
 2004854:	b9 80 08 00 	mv r1,r12
 2004858:	b9 a0 10 00 	mv r2,r13
 200485c:	f8 00 10 f7 	calli 2008c38 <__muldf3>
 2004860:	78 03 40 1c 	mvhi r3,0x401c
 2004864:	38 63 00 00 	ori r3,r3,0x0
 2004868:	34 04 00 00 	mvi r4,0
 200486c:	f8 00 10 d9 	calli 2008bd0 <__adddf3>
 2004870:	b8 40 70 00 	mv r14,r2
 2004874:	78 02 fc c0 	mvhi r2,0xfcc0
 2004878:	38 42 00 00 	ori r2,r2,0x0
 200487c:	b4 22 58 00 	add r11,r1,r2
 2004880:	46 c0 00 6c 	be r22,r0,2004a30 <_dtoa_r+0x6d4>
 2004884:	2b 83 00 7c 	lw r3,(sp+124)
 2004888:	44 60 03 0a 	be r3,r0,20054b0 <_dtoa_r+0x1154>
 200488c:	36 c2 ff ff 	addi r2,r22,-1
 2004890:	3c 42 00 03 	sli r2,r2,3
 2004894:	78 01 02 00 	mvhi r1,0x200
 2004898:	38 21 a4 e0 	ori r1,r1,0xa4e0
 200489c:	b4 22 08 00 	add r1,r1,r2
 20048a0:	28 24 00 04 	lw r4,(r1+4)
 20048a4:	28 23 00 00 	lw r3,(r1+0)
 20048a8:	78 01 3f e0 	mvhi r1,0x3fe0
 20048ac:	38 21 00 00 	ori r1,r1,0x0
 20048b0:	34 02 00 00 	mvi r2,0
 20048b4:	f8 00 11 a1 	calli 2008f38 <__divdf3>
 20048b8:	b9 60 18 00 	mv r3,r11
 20048bc:	b9 c0 20 00 	mv r4,r14
 20048c0:	f8 00 10 a7 	calli 2008b5c <__subdf3>
 20048c4:	b8 40 70 00 	mv r14,r2
 20048c8:	b8 20 78 00 	mv r15,r1
 20048cc:	b9 a0 10 00 	mv r2,r13
 20048d0:	b9 80 08 00 	mv r1,r12
 20048d4:	f8 00 13 00 	calli 20094d4 <__fixdfsi>
 20048d8:	b8 20 58 00 	mv r11,r1
 20048dc:	f8 00 12 c7 	calli 20093f8 <__floatsidf>
 20048e0:	b8 20 18 00 	mv r3,r1
 20048e4:	b8 40 20 00 	mv r4,r2
 20048e8:	b9 80 08 00 	mv r1,r12
 20048ec:	b9 a0 10 00 	mv r2,r13
 20048f0:	f8 00 10 9b 	calli 2008b5c <__subdf3>
 20048f4:	2b 84 00 64 	lw r4,(sp+100)
 20048f8:	b8 20 88 00 	mv r17,r1
 20048fc:	35 6b 00 30 	addi r11,r11,48
 2004900:	30 8b 00 00 	sb (r4+0),r11
 2004904:	ba 20 08 00 	mv r1,r17
 2004908:	b9 e0 18 00 	mv r3,r15
 200490c:	b9 c0 20 00 	mv r4,r14
 2004910:	b8 40 60 00 	mv r12,r2
 2004914:	b8 40 90 00 	mv r18,r2
 2004918:	f8 00 12 95 	calli 200936c <__ltdf2>
 200491c:	2b 85 00 64 	lw r5,(sp+100)
 2004920:	b9 c0 80 00 	mv r16,r14
 2004924:	34 b5 00 01 	addi r21,r5,1
 2004928:	48 01 01 bd 	bg r0,r1,200501c <_dtoa_r+0xcc0>
 200492c:	78 01 3f f0 	mvhi r1,0x3ff0
 2004930:	b9 80 20 00 	mv r4,r12
 2004934:	ba 20 18 00 	mv r3,r17
 2004938:	38 21 00 00 	ori r1,r1,0x0
 200493c:	34 02 00 00 	mvi r2,0
 2004940:	f8 00 10 87 	calli 2008b5c <__subdf3>
 2004944:	b9 e0 18 00 	mv r3,r15
 2004948:	b9 c0 20 00 	mv r4,r14
 200494c:	f8 00 12 88 	calli 200936c <__ltdf2>
 2004950:	48 01 03 70 	bg r0,r1,2005710 <_dtoa_r+0x13b4>
 2004954:	34 01 00 01 	mvi r1,1
 2004958:	4c 36 00 4c 	bge r1,r22,2004a88 <_dtoa_r+0x72c>
 200495c:	2b 82 00 64 	lw r2,(sp+100)
 2004960:	b4 56 b0 00 	add r22,r2,r22
 2004964:	5b 96 00 48 	sw (sp+72),r22
 2004968:	78 03 40 24 	mvhi r3,0x4024
 200496c:	ba 00 10 00 	mv r2,r16
 2004970:	b9 e0 08 00 	mv r1,r15
 2004974:	38 63 00 00 	ori r3,r3,0x0
 2004978:	34 04 00 00 	mvi r4,0
 200497c:	f8 00 10 af 	calli 2008c38 <__muldf3>
 2004980:	78 03 40 24 	mvhi r3,0x4024
 2004984:	38 63 00 00 	ori r3,r3,0x0
 2004988:	34 04 00 00 	mvi r4,0
 200498c:	b8 40 b0 00 	mv r22,r2
 2004990:	b8 20 78 00 	mv r15,r1
 2004994:	ba 40 10 00 	mv r2,r18
 2004998:	ba 20 08 00 	mv r1,r17
 200499c:	f8 00 10 a7 	calli 2008c38 <__muldf3>
 20049a0:	b8 20 58 00 	mv r11,r1
 20049a4:	b9 60 08 00 	mv r1,r11
 20049a8:	b8 40 70 00 	mv r14,r2
 20049ac:	f8 00 12 ca 	calli 20094d4 <__fixdfsi>
 20049b0:	b8 20 68 00 	mv r13,r1
 20049b4:	f8 00 12 91 	calli 20093f8 <__floatsidf>
 20049b8:	b8 20 18 00 	mv r3,r1
 20049bc:	b8 40 20 00 	mv r4,r2
 20049c0:	b9 60 08 00 	mv r1,r11
 20049c4:	b9 c0 10 00 	mv r2,r14
 20049c8:	f8 00 10 65 	calli 2008b5c <__subdf3>
 20049cc:	b8 20 88 00 	mv r17,r1
 20049d0:	35 ad 00 30 	addi r13,r13,48
 20049d4:	32 ad 00 00 	sb (r21+0),r13
 20049d8:	ba 20 08 00 	mv r1,r17
 20049dc:	b9 e0 18 00 	mv r3,r15
 20049e0:	ba c0 20 00 	mv r4,r22
 20049e4:	b8 40 58 00 	mv r11,r2
 20049e8:	b8 40 90 00 	mv r18,r2
 20049ec:	f8 00 12 60 	calli 200936c <__ltdf2>
 20049f0:	ba c0 80 00 	mv r16,r22
 20049f4:	36 b5 00 01 	addi r21,r21,1
 20049f8:	48 01 01 89 	bg r0,r1,200501c <_dtoa_r+0xcc0>
 20049fc:	78 01 3f f0 	mvhi r1,0x3ff0
 2004a00:	b9 60 20 00 	mv r4,r11
 2004a04:	ba 20 18 00 	mv r3,r17
 2004a08:	38 21 00 00 	ori r1,r1,0x0
 2004a0c:	34 02 00 00 	mvi r2,0
 2004a10:	f8 00 10 53 	calli 2008b5c <__subdf3>
 2004a14:	b9 e0 18 00 	mv r3,r15
 2004a18:	ba c0 20 00 	mv r4,r22
 2004a1c:	f8 00 12 54 	calli 200936c <__ltdf2>
 2004a20:	48 01 03 3c 	bg r0,r1,2005710 <_dtoa_r+0x13b4>
 2004a24:	2b 81 00 48 	lw r1,(sp+72)
 2004a28:	5e a1 ff d0 	bne r21,r1,2004968 <_dtoa_r+0x60c>
 2004a2c:	e0 00 00 17 	bi 2004a88 <_dtoa_r+0x72c>
 2004a30:	78 03 40 14 	mvhi r3,0x4014
 2004a34:	38 63 00 00 	ori r3,r3,0x0
 2004a38:	b9 a0 10 00 	mv r2,r13
 2004a3c:	ba c0 20 00 	mv r4,r22
 2004a40:	b9 80 08 00 	mv r1,r12
 2004a44:	f8 00 10 46 	calli 2008b5c <__subdf3>
 2004a48:	b9 60 60 00 	mv r12,r11
 2004a4c:	b8 20 58 00 	mv r11,r1
 2004a50:	b9 60 08 00 	mv r1,r11
 2004a54:	b9 80 18 00 	mv r3,r12
 2004a58:	b9 c0 20 00 	mv r4,r14
 2004a5c:	b8 40 68 00 	mv r13,r2
 2004a60:	f8 00 12 05 	calli 2009274 <__gtdf2>
 2004a64:	48 36 02 8f 	bg r1,r22,20054a0 <_dtoa_r+0x1144>
 2004a68:	78 03 80 00 	mvhi r3,0x8000
 2004a6c:	38 63 00 00 	ori r3,r3,0x0
 2004a70:	99 83 18 00 	xor r3,r12,r3
 2004a74:	b9 c0 20 00 	mv r4,r14
 2004a78:	b9 60 08 00 	mv r1,r11
 2004a7c:	b9 a0 10 00 	mv r2,r13
 2004a80:	f8 00 12 3b 	calli 200936c <__ltdf2>
 2004a84:	48 01 01 cc 	bg r0,r1,20051b4 <_dtoa_r+0xe58>
 2004a88:	ba 80 88 00 	mv r17,r20
 2004a8c:	ba 60 80 00 	mv r16,r19
 2004a90:	2b 83 00 90 	lw r3,(sp+144)
 2004a94:	34 01 00 0e 	mvi r1,14
 2004a98:	ec 38 08 00 	cmpge r1,r1,r24
 2004a9c:	6c 62 00 00 	cmpgei r2,r3,0
 2004aa0:	a0 41 10 00 	and r2,r2,r1
 2004aa4:	44 40 00 ba 	be r2,r0,2004d8c <_dtoa_r+0xa30>
 2004aa8:	2b 84 00 60 	lw r4,(sp+96)
 2004aac:	3f 02 00 03 	sli r2,r24,3
 2004ab0:	78 01 02 00 	mvhi r1,0x200
 2004ab4:	38 21 a4 e0 	ori r1,r1,0xa4e0
 2004ab8:	b4 22 90 00 	add r18,r1,r2
 2004abc:	00 82 00 1f 	srui r2,r4,31
 2004ac0:	ec 19 08 00 	cmpge r1,r0,r25
 2004ac4:	2a 4e 00 00 	lw r14,(r18+0)
 2004ac8:	a0 41 98 00 	and r19,r2,r1
 2004acc:	2a 4f 00 04 	lw r15,(r18+4)
 2004ad0:	5e 60 01 83 	bne r19,r0,20050dc <_dtoa_r+0xd80>
 2004ad4:	b9 e0 20 00 	mv r4,r15
 2004ad8:	b9 c0 18 00 	mv r3,r14
 2004adc:	ba 00 08 00 	mv r1,r16
 2004ae0:	ba 20 10 00 	mv r2,r17
 2004ae4:	f8 00 11 15 	calli 2008f38 <__divdf3>
 2004ae8:	f8 00 12 7b 	calli 20094d4 <__fixdfsi>
 2004aec:	b8 20 68 00 	mv r13,r1
 2004af0:	f8 00 12 42 	calli 20093f8 <__floatsidf>
 2004af4:	2b 85 00 64 	lw r5,(sp+100)
 2004af8:	b9 c0 18 00 	mv r3,r14
 2004afc:	b9 e0 20 00 	mv r4,r15
 2004b00:	34 b5 00 01 	addi r21,r5,1
 2004b04:	f8 00 10 4d 	calli 2008c38 <__muldf3>
 2004b08:	b8 20 18 00 	mv r3,r1
 2004b0c:	b8 40 20 00 	mv r4,r2
 2004b10:	ba 00 08 00 	mv r1,r16
 2004b14:	ba 20 10 00 	mv r2,r17
 2004b18:	f8 00 10 11 	calli 2008b5c <__subdf3>
 2004b1c:	2b 84 00 64 	lw r4,(sp+100)
 2004b20:	35 a3 00 30 	addi r3,r13,48
 2004b24:	b8 20 30 00 	mv r6,r1
 2004b28:	30 83 00 00 	sb (r4+0),r3
 2004b2c:	34 04 00 01 	mvi r4,1
 2004b30:	b8 40 28 00 	mv r5,r2
 2004b34:	47 24 00 33 	be r25,r4,2004c00 <_dtoa_r+0x8a4>
 2004b38:	78 03 40 24 	mvhi r3,0x4024
 2004b3c:	ba 60 20 00 	mv r4,r19
 2004b40:	38 63 00 00 	ori r3,r3,0x0
 2004b44:	f8 00 10 3d 	calli 2008c38 <__muldf3>
 2004b48:	b8 20 58 00 	mv r11,r1
 2004b4c:	ba 60 18 00 	mv r3,r19
 2004b50:	ba 60 20 00 	mv r4,r19
 2004b54:	b9 60 08 00 	mv r1,r11
 2004b58:	b8 40 60 00 	mv r12,r2
 2004b5c:	f8 00 11 a3 	calli 20091e8 <__nedf2>
 2004b60:	2b 85 00 64 	lw r5,(sp+100)
 2004b64:	b4 b9 98 00 	add r19,r5,r25
 2004b68:	44 20 01 91 	be r1,r0,20051ac <_dtoa_r+0xe50>
 2004b6c:	2a 51 00 04 	lw r17,(r18+4)
 2004b70:	b9 c0 80 00 	mv r16,r14
 2004b74:	78 12 40 24 	mvhi r18,0x4024
 2004b78:	e0 00 00 0c 	bi 2004ba8 <_dtoa_r+0x84c>
 2004b7c:	ba 40 18 00 	mv r3,r18
 2004b80:	38 63 00 00 	ori r3,r3,0x0
 2004b84:	34 04 00 00 	mvi r4,0
 2004b88:	f8 00 10 2c 	calli 2008c38 <__muldf3>
 2004b8c:	b8 20 58 00 	mv r11,r1
 2004b90:	34 03 00 00 	mvi r3,0
 2004b94:	b9 60 08 00 	mv r1,r11
 2004b98:	b8 60 20 00 	mv r4,r3
 2004b9c:	b8 40 60 00 	mv r12,r2
 2004ba0:	f8 00 11 92 	calli 20091e8 <__nedf2>
 2004ba4:	44 20 01 82 	be r1,r0,20051ac <_dtoa_r+0xe50>
 2004ba8:	ba 00 18 00 	mv r3,r16
 2004bac:	ba 20 20 00 	mv r4,r17
 2004bb0:	b9 60 08 00 	mv r1,r11
 2004bb4:	b9 80 10 00 	mv r2,r12
 2004bb8:	f8 00 10 e0 	calli 2008f38 <__divdf3>
 2004bbc:	f8 00 12 46 	calli 20094d4 <__fixdfsi>
 2004bc0:	b8 20 68 00 	mv r13,r1
 2004bc4:	f8 00 12 0d 	calli 20093f8 <__floatsidf>
 2004bc8:	ba 00 18 00 	mv r3,r16
 2004bcc:	ba 20 20 00 	mv r4,r17
 2004bd0:	f8 00 10 1a 	calli 2008c38 <__muldf3>
 2004bd4:	b8 20 18 00 	mv r3,r1
 2004bd8:	b8 40 20 00 	mv r4,r2
 2004bdc:	b9 60 08 00 	mv r1,r11
 2004be0:	b9 80 10 00 	mv r2,r12
 2004be4:	f8 00 0f de 	calli 2008b5c <__subdf3>
 2004be8:	35 a3 00 30 	addi r3,r13,48
 2004bec:	32 a3 00 00 	sb (r21+0),r3
 2004bf0:	36 b5 00 01 	addi r21,r21,1
 2004bf4:	b8 20 30 00 	mv r6,r1
 2004bf8:	b8 40 28 00 	mv r5,r2
 2004bfc:	5e b3 ff e0 	bne r21,r19,2004b7c <_dtoa_r+0x820>
 2004c00:	b8 c0 18 00 	mv r3,r6
 2004c04:	b8 a0 20 00 	mv r4,r5
 2004c08:	b8 c0 08 00 	mv r1,r6
 2004c0c:	b8 a0 10 00 	mv r2,r5
 2004c10:	f8 00 0f f0 	calli 2008bd0 <__adddf3>
 2004c14:	b8 40 80 00 	mv r16,r2
 2004c18:	b8 20 58 00 	mv r11,r1
 2004c1c:	b9 e0 10 00 	mv r2,r15
 2004c20:	b9 c0 08 00 	mv r1,r14
 2004c24:	b9 60 18 00 	mv r3,r11
 2004c28:	ba 00 20 00 	mv r4,r16
 2004c2c:	f8 00 11 d0 	calli 200936c <__ltdf2>
 2004c30:	48 01 00 0a 	bg r0,r1,2004c58 <_dtoa_r+0x8fc>
 2004c34:	b9 e0 10 00 	mv r2,r15
 2004c38:	b9 60 18 00 	mv r3,r11
 2004c3c:	ba 00 20 00 	mv r4,r16
 2004c40:	b9 c0 08 00 	mv r1,r14
 2004c44:	f8 00 11 46 	calli 200915c <__eqdf2>
 2004c48:	b8 20 10 00 	mv r2,r1
 2004c4c:	5c 20 01 58 	bne r1,r0,20051ac <_dtoa_r+0xe50>
 2004c50:	21 a1 00 01 	andi r1,r13,0x1
 2004c54:	44 22 01 56 	be r1,r2,20051ac <_dtoa_r+0xe50>
 2004c58:	34 03 00 39 	mvi r3,57
 2004c5c:	e0 00 00 02 	bi 2004c64 <_dtoa_r+0x908>
 2004c60:	b8 40 a8 00 	mv r21,r2
 2004c64:	42 a1 ff ff 	lbu r1,(r21+-1)
 2004c68:	36 a2 ff ff 	addi r2,r21,-1
 2004c6c:	5c 23 00 08 	bne r1,r3,2004c8c <_dtoa_r+0x930>
 2004c70:	2b 81 00 64 	lw r1,(sp+100)
 2004c74:	5c 41 ff fb 	bne r2,r1,2004c60 <_dtoa_r+0x904>
 2004c78:	2b 82 00 64 	lw r2,(sp+100)
 2004c7c:	34 01 00 30 	mvi r1,48
 2004c80:	37 18 00 01 	addi r24,r24,1
 2004c84:	30 41 00 00 	sb (r2+0),r1
 2004c88:	2b 82 00 64 	lw r2,(sp+100)
 2004c8c:	34 21 00 01 	addi r1,r1,1
 2004c90:	30 41 00 00 	sb (r2+0),r1
 2004c94:	5b 98 00 74 	sw (sp+116),r24
 2004c98:	e0 00 00 e1 	bi 200501c <_dtoa_r+0xcc0>
 2004c9c:	3f 02 00 03 	sli r2,r24,3
 2004ca0:	78 01 02 00 	mvhi r1,0x200
 2004ca4:	38 21 a4 e0 	ori r1,r1,0xa4e0
 2004ca8:	b4 22 08 00 	add r1,r1,r2
 2004cac:	28 24 00 04 	lw r4,(r1+4)
 2004cb0:	28 23 00 00 	lw r3,(r1+0)
 2004cb4:	ba 80 10 00 	mv r2,r20
 2004cb8:	ba 60 08 00 	mv r1,r19
 2004cbc:	f8 00 11 ac 	calli 200936c <__ltdf2>
 2004cc0:	48 01 00 f7 	bg r0,r1,200509c <_dtoa_r+0xd40>
 2004cc4:	34 04 00 00 	mvi r4,0
 2004cc8:	5b 84 00 78 	sw (sp+120),r4
 2004ccc:	e3 ff fe 63 	bi 2004658 <_dtoa_r+0x2fc>
 2004cd0:	34 01 00 05 	mvi r1,5
 2004cd4:	4b 61 00 03 	bg fp,r1,2004ce0 <_dtoa_r+0x984>
 2004cd8:	34 04 00 01 	mvi r4,1
 2004cdc:	e0 00 00 03 	bi 2004ce8 <_dtoa_r+0x98c>
 2004ce0:	37 7b ff fc 	addi fp,fp,-4
 2004ce4:	34 04 00 00 	mvi r4,0
 2004ce8:	34 19 ff ff 	mvi r25,-1
 2004cec:	34 05 00 01 	mvi r5,1
 2004cf0:	5b 99 00 70 	sw (sp+112),r25
 2004cf4:	5b 85 00 7c 	sw (sp+124),r5
 2004cf8:	34 01 00 05 	mvi r1,5
 2004cfc:	57 61 00 0e 	bgu fp,r1,2004d34 <_dtoa_r+0x9d8>
 2004d00:	78 01 02 00 	mvhi r1,0x200
 2004d04:	3f 63 00 02 	sli r3,fp,2
 2004d08:	38 21 a4 7c 	ori r1,r1,0xa47c
 2004d0c:	b4 23 08 00 	add r1,r1,r3
 2004d10:	28 22 00 00 	lw r2,(r1+0)
 2004d14:	c0 40 00 00 	b r2
 2004d18:	34 01 00 01 	mvi r1,1
 2004d1c:	5b 81 00 7c 	sw (sp+124),r1
 2004d20:	2b 81 00 60 	lw r1,(sp+96)
 2004d24:	4c 01 02 74 	bge r0,r1,20056f4 <_dtoa_r+0x1398>
 2004d28:	b8 20 68 00 	mv r13,r1
 2004d2c:	b8 20 c8 00 	mv r25,r1
 2004d30:	5b 81 00 70 	sw (sp+112),r1
 2004d34:	34 01 00 00 	mvi r1,0
 2004d38:	5a e1 00 44 	sw (r23+68),r1
 2004d3c:	b8 20 18 00 	mv r3,r1
 2004d40:	34 01 00 17 	mvi r1,23
 2004d44:	34 02 00 04 	mvi r2,4
 2004d48:	55 a1 00 05 	bgu r13,r1,2004d5c <_dtoa_r+0xa00>
 2004d4c:	34 01 00 0e 	mvi r1,14
 2004d50:	f0 39 58 00 	cmpgeu r11,r1,r25
 2004d54:	b8 80 60 00 	mv r12,r4
 2004d58:	e3 ff fe 5d 	bi 20046cc <_dtoa_r+0x370>
 2004d5c:	b4 42 10 00 	add r2,r2,r2
 2004d60:	34 41 00 14 	addi r1,r2,20
 2004d64:	34 63 00 01 	addi r3,r3,1
 2004d68:	51 a1 ff fd 	bgeu r13,r1,2004d5c <_dtoa_r+0xa00>
 2004d6c:	34 01 00 0e 	mvi r1,14
 2004d70:	f0 39 58 00 	cmpgeu r11,r1,r25
 2004d74:	5a e3 00 44 	sw (r23+68),r3
 2004d78:	b8 80 60 00 	mv r12,r4
 2004d7c:	e3 ff fe 54 	bi 20046cc <_dtoa_r+0x370>
 2004d80:	78 02 02 00 	mvhi r2,0x200
 2004d84:	38 42 a2 bc 	ori r2,r2,0xa2bc
 2004d88:	e3 ff fd d4 	bi 20044d8 <_dtoa_r+0x17c>
 2004d8c:	2b 8f 00 7c 	lw r15,(sp+124)
 2004d90:	2b 8d 00 68 	lw r13,(sp+104)
 2004d94:	2b 8c 00 6c 	lw r12,(sp+108)
 2004d98:	45 e2 00 12 	be r15,r2,2004de0 <_dtoa_r+0xa84>
 2004d9c:	34 01 00 01 	mvi r1,1
 2004da0:	4b 61 01 b5 	bg fp,r1,2005474 <_dtoa_r+0x1118>
 2004da4:	2b 84 00 88 	lw r4,(sp+136)
 2004da8:	44 80 02 7b 	be r4,r0,2005794 <_dtoa_r+0x1438>
 2004dac:	2b 8d 00 68 	lw r13,(sp+104)
 2004db0:	2b 8c 00 6c 	lw r12,(sp+108)
 2004db4:	34 63 04 33 	addi r3,r3,1075
 2004db8:	2b 84 00 80 	lw r4,(sp+128)
 2004dbc:	2b 85 00 68 	lw r5,(sp+104)
 2004dc0:	ba e0 08 00 	mv r1,r23
 2004dc4:	b4 83 20 00 	add r4,r4,r3
 2004dc8:	b4 a3 28 00 	add r5,r5,r3
 2004dcc:	34 02 00 01 	mvi r2,1
 2004dd0:	5b 84 00 80 	sw (sp+128),r4
 2004dd4:	5b 85 00 68 	sw (sp+104),r5
 2004dd8:	f8 00 0a 65 	calli 200776c <_i2b>
 2004ddc:	b8 20 78 00 	mv r15,r1
 2004de0:	2b 83 00 80 	lw r3,(sp+128)
 2004de4:	69 a1 00 00 	cmpgi r1,r13,0
 2004de8:	68 62 00 00 	cmpgi r2,r3,0
 2004dec:	a0 22 08 00 	and r1,r1,r2
 2004df0:	44 20 00 0b 	be r1,r0,2004e1c <_dtoa_r+0xac0>
 2004df4:	b8 60 08 00 	mv r1,r3
 2004df8:	4d a3 00 02 	bge r13,r3,2004e00 <_dtoa_r+0xaa4>
 2004dfc:	b9 a0 08 00 	mv r1,r13
 2004e00:	2b 84 00 80 	lw r4,(sp+128)
 2004e04:	2b 85 00 68 	lw r5,(sp+104)
 2004e08:	c9 a1 68 00 	sub r13,r13,r1
 2004e0c:	c8 81 20 00 	sub r4,r4,r1
 2004e10:	c8 a1 28 00 	sub r5,r5,r1
 2004e14:	5b 84 00 80 	sw (sp+128),r4
 2004e18:	5b 85 00 68 	sw (sp+104),r5
 2004e1c:	2b 81 00 6c 	lw r1,(sp+108)
 2004e20:	4c 01 00 19 	bge r0,r1,2004e84 <_dtoa_r+0xb28>
 2004e24:	2b 82 00 7c 	lw r2,(sp+124)
 2004e28:	44 40 02 3c 	be r2,r0,2005718 <_dtoa_r+0x13bc>
 2004e2c:	4c 0c 00 0f 	bge r0,r12,2004e68 <_dtoa_r+0xb0c>
 2004e30:	b9 e0 10 00 	mv r2,r15
 2004e34:	b9 80 18 00 	mv r3,r12
 2004e38:	ba e0 08 00 	mv r1,r23
 2004e3c:	f8 00 0a 9c 	calli 20078ac <_pow5mult>
 2004e40:	2b 83 00 8c 	lw r3,(sp+140)
 2004e44:	b8 20 78 00 	mv r15,r1
 2004e48:	b9 e0 10 00 	mv r2,r15
 2004e4c:	ba e0 08 00 	mv r1,r23
 2004e50:	f8 00 09 c3 	calli 200755c <_multiply>
 2004e54:	2b 82 00 8c 	lw r2,(sp+140)
 2004e58:	b8 20 58 00 	mv r11,r1
 2004e5c:	ba e0 08 00 	mv r1,r23
 2004e60:	f8 00 07 f8 	calli 2006e40 <_Bfree>
 2004e64:	5b 8b 00 8c 	sw (sp+140),r11
 2004e68:	2b 84 00 6c 	lw r4,(sp+108)
 2004e6c:	c8 8c 18 00 	sub r3,r4,r12
 2004e70:	44 60 00 05 	be r3,r0,2004e84 <_dtoa_r+0xb28>
 2004e74:	2b 82 00 8c 	lw r2,(sp+140)
 2004e78:	ba e0 08 00 	mv r1,r23
 2004e7c:	f8 00 0a 8c 	calli 20078ac <_pow5mult>
 2004e80:	5b 81 00 8c 	sw (sp+140),r1
 2004e84:	ba e0 08 00 	mv r1,r23
 2004e88:	34 02 00 01 	mvi r2,1
 2004e8c:	f8 00 0a 38 	calli 200776c <_i2b>
 2004e90:	2b 85 00 84 	lw r5,(sp+132)
 2004e94:	b8 20 90 00 	mv r18,r1
 2004e98:	4c 05 00 06 	bge r0,r5,2004eb0 <_dtoa_r+0xb54>
 2004e9c:	b8 20 10 00 	mv r2,r1
 2004ea0:	b8 a0 18 00 	mv r3,r5
 2004ea4:	ba e0 08 00 	mv r1,r23
 2004ea8:	f8 00 0a 81 	calli 20078ac <_pow5mult>
 2004eac:	b8 20 90 00 	mv r18,r1
 2004eb0:	34 06 00 01 	mvi r6,1
 2004eb4:	4b 66 00 13 	bg fp,r6,2004f00 <_dtoa_r+0xba4>
 2004eb8:	5e 20 00 12 	bne r17,r0,2004f00 <_dtoa_r+0xba4>
 2004ebc:	78 01 00 0f 	mvhi r1,0xf
 2004ec0:	38 21 ff ff 	ori r1,r1,0xffff
 2004ec4:	a2 01 28 00 	and r5,r16,r1
 2004ec8:	5c b1 00 0e 	bne r5,r17,2004f00 <_dtoa_r+0xba4>
 2004ecc:	2b 81 00 4c 	lw r1,(sp+76)
 2004ed0:	38 21 00 00 	ori r1,r1,0x0
 2004ed4:	5b 81 00 4c 	sw (sp+76),r1
 2004ed8:	a2 01 08 00 	and r1,r16,r1
 2004edc:	44 25 00 09 	be r1,r5,2004f00 <_dtoa_r+0xba4>
 2004ee0:	2b 82 00 68 	lw r2,(sp+104)
 2004ee4:	2b 83 00 80 	lw r3,(sp+128)
 2004ee8:	b8 c0 60 00 	mv r12,r6
 2004eec:	b4 46 10 00 	add r2,r2,r6
 2004ef0:	b4 66 18 00 	add r3,r3,r6
 2004ef4:	5b 82 00 68 	sw (sp+104),r2
 2004ef8:	5b 83 00 80 	sw (sp+128),r3
 2004efc:	e0 00 00 02 	bi 2004f04 <_dtoa_r+0xba8>
 2004f00:	34 0c 00 00 	mvi r12,0
 2004f04:	2b 84 00 84 	lw r4,(sp+132)
 2004f08:	34 01 00 01 	mvi r1,1
 2004f0c:	5c 80 00 8e 	bne r4,r0,2005144 <_dtoa_r+0xde8>
 2004f10:	2b 85 00 80 	lw r5,(sp+128)
 2004f14:	b4 25 08 00 	add r1,r1,r5
 2004f18:	20 22 00 1f 	andi r2,r1,0x1f
 2004f1c:	34 01 00 1c 	mvi r1,28
 2004f20:	44 40 00 7f 	be r2,r0,200511c <_dtoa_r+0xdc0>
 2004f24:	34 01 00 20 	mvi r1,32
 2004f28:	c8 22 08 00 	sub r1,r1,r2
 2004f2c:	34 02 00 04 	mvi r2,4
 2004f30:	4c 41 00 79 	bge r2,r1,2005114 <_dtoa_r+0xdb8>
 2004f34:	2b 82 00 80 	lw r2,(sp+128)
 2004f38:	2b 83 00 68 	lw r3,(sp+104)
 2004f3c:	34 21 ff fc 	addi r1,r1,-4
 2004f40:	b4 41 10 00 	add r2,r2,r1
 2004f44:	b4 61 18 00 	add r3,r3,r1
 2004f48:	5b 82 00 80 	sw (sp+128),r2
 2004f4c:	5b 83 00 68 	sw (sp+104),r3
 2004f50:	b5 a1 68 00 	add r13,r13,r1
 2004f54:	2b 81 00 68 	lw r1,(sp+104)
 2004f58:	4c 01 00 06 	bge r0,r1,2004f70 <_dtoa_r+0xc14>
 2004f5c:	2b 82 00 8c 	lw r2,(sp+140)
 2004f60:	b8 20 18 00 	mv r3,r1
 2004f64:	ba e0 08 00 	mv r1,r23
 2004f68:	f8 00 09 2b 	calli 2007414 <_lshift>
 2004f6c:	5b 81 00 8c 	sw (sp+140),r1
 2004f70:	2b 82 00 80 	lw r2,(sp+128)
 2004f74:	4c 02 00 06 	bge r0,r2,2004f8c <_dtoa_r+0xc30>
 2004f78:	2b 83 00 80 	lw r3,(sp+128)
 2004f7c:	ba 40 10 00 	mv r2,r18
 2004f80:	ba e0 08 00 	mv r1,r23
 2004f84:	f8 00 09 24 	calli 2007414 <_lshift>
 2004f88:	b8 20 90 00 	mv r18,r1
 2004f8c:	2b 83 00 78 	lw r3,(sp+120)
 2004f90:	5c 60 01 be 	bne r3,r0,2005688 <_dtoa_r+0x132c>
 2004f94:	ec 19 10 00 	cmpge r2,r0,r25
 2004f98:	6b 61 00 02 	cmpgi r1,fp,2
 2004f9c:	a0 41 10 00 	and r2,r2,r1
 2004fa0:	44 40 00 91 	be r2,r0,20051e4 <_dtoa_r+0xe88>
 2004fa4:	5f 20 00 86 	bne r25,r0,20051bc <_dtoa_r+0xe60>
 2004fa8:	ba 40 10 00 	mv r2,r18
 2004fac:	ba e0 08 00 	mv r1,r23
 2004fb0:	34 03 00 05 	mvi r3,5
 2004fb4:	bb 20 20 00 	mv r4,r25
 2004fb8:	f8 00 09 fa 	calli 20077a0 <_multadd>
 2004fbc:	b8 20 90 00 	mv r18,r1
 2004fc0:	2b 81 00 8c 	lw r1,(sp+140)
 2004fc4:	ba 40 10 00 	mv r2,r18
 2004fc8:	f8 00 07 fe 	calli 2006fc0 <__mcmp>
 2004fcc:	4f 21 00 7c 	bge r25,r1,20051bc <_dtoa_r+0xe60>
 2004fd0:	2b 82 00 64 	lw r2,(sp+100)
 2004fd4:	34 01 00 31 	mvi r1,49
 2004fd8:	b9 e0 80 00 	mv r16,r15
 2004fdc:	30 41 00 00 	sb (r2+0),r1
 2004fe0:	37 18 00 01 	addi r24,r24,1
 2004fe4:	34 55 00 01 	addi r21,r2,1
 2004fe8:	34 0f 00 00 	mvi r15,0
 2004fec:	ba 40 10 00 	mv r2,r18
 2004ff0:	ba e0 08 00 	mv r1,r23
 2004ff4:	f8 00 07 93 	calli 2006e40 <_Bfree>
 2004ff8:	46 00 00 6d 	be r16,r0,20051ac <_dtoa_r+0xe50>
 2004ffc:	7d e1 00 00 	cmpnei r1,r15,0
 2005000:	fd f0 10 00 	cmpne r2,r15,r16
 2005004:	a0 22 08 00 	and r1,r1,r2
 2005008:	5c 20 00 73 	bne r1,r0,20051d4 <_dtoa_r+0xe78>
 200500c:	ba 00 10 00 	mv r2,r16
 2005010:	ba e0 08 00 	mv r1,r23
 2005014:	f8 00 07 8b 	calli 2006e40 <_Bfree>
 2005018:	5b 98 00 74 	sw (sp+116),r24
 200501c:	2b 82 00 8c 	lw r2,(sp+140)
 2005020:	ba e0 08 00 	mv r1,r23
 2005024:	f8 00 07 87 	calli 2006e40 <_Bfree>
 2005028:	34 01 00 00 	mvi r1,0
 200502c:	32 a1 00 00 	sb (r21+0),r1
 2005030:	2b 83 00 74 	lw r3,(sp+116)
 2005034:	2b 84 00 5c 	lw r4,(sp+92)
 2005038:	2b 85 00 58 	lw r5,(sp+88)
 200503c:	34 62 00 01 	addi r2,r3,1
 2005040:	58 82 00 00 	sw (r4+0),r2
 2005044:	2b 82 00 64 	lw r2,(sp+100)
 2005048:	44 a1 fd 24 	be r5,r1,20044d8 <_dtoa_r+0x17c>
 200504c:	2b 81 00 58 	lw r1,(sp+88)
 2005050:	2b 82 00 64 	lw r2,(sp+100)
 2005054:	58 35 00 00 	sw (r1+0),r21
 2005058:	e3 ff fd 20 	bi 20044d8 <_dtoa_r+0x17c>
 200505c:	bb 00 08 00 	mv r1,r24
 2005060:	f8 00 10 e6 	calli 20093f8 <__floatsidf>
 2005064:	b9 60 18 00 	mv r3,r11
 2005068:	b9 c0 20 00 	mv r4,r14
 200506c:	f8 00 10 5f 	calli 20091e8 <__nedf2>
 2005070:	7c 21 00 00 	cmpnei r1,r1,0
 2005074:	cb 01 c0 00 	sub r24,r24,r1
 2005078:	e3 ff fd 74 	bi 2004648 <_dtoa_r+0x2ec>
 200507c:	2b 81 00 68 	lw r1,(sp+104)
 2005080:	c8 18 10 00 	sub r2,r0,r24
 2005084:	34 03 00 00 	mvi r3,0
 2005088:	c8 38 08 00 	sub r1,r1,r24
 200508c:	5b 81 00 68 	sw (sp+104),r1
 2005090:	5b 82 00 6c 	sw (sp+108),r2
 2005094:	5b 83 00 84 	sw (sp+132),r3
 2005098:	e3 ff fd 80 	bi 2004698 <_dtoa_r+0x33c>
 200509c:	34 05 00 00 	mvi r5,0
 20050a0:	37 18 ff ff 	addi r24,r24,-1
 20050a4:	5b 85 00 78 	sw (sp+120),r5
 20050a8:	e3 ff fd 6c 	bi 2004658 <_dtoa_r+0x2fc>
 20050ac:	78 01 02 00 	mvhi r1,0x200
 20050b0:	38 21 a5 a8 	ori r1,r1,0xa5a8
 20050b4:	28 24 00 24 	lw r4,(r1+36)
 20050b8:	28 23 00 20 	lw r3,(r1+32)
 20050bc:	ba 80 10 00 	mv r2,r20
 20050c0:	ba 60 08 00 	mv r1,r19
 20050c4:	f8 00 0f 9d 	calli 2008f38 <__divdf3>
 20050c8:	21 8c 00 0f 	andi r12,r12,0xf
 20050cc:	b8 20 88 00 	mv r17,r1
 20050d0:	b8 40 80 00 	mv r16,r2
 20050d4:	34 0f 00 03 	mvi r15,3
 20050d8:	e3 ff fd 93 	bi 2004724 <_dtoa_r+0x3c8>
 20050dc:	5f 20 00 36 	bne r25,r0,20051b4 <_dtoa_r+0xe58>
 20050e0:	2a 42 00 04 	lw r2,(r18+4)
 20050e4:	78 03 40 14 	mvhi r3,0x4014
 20050e8:	38 63 00 00 	ori r3,r3,0x0
 20050ec:	bb 20 20 00 	mv r4,r25
 20050f0:	b9 c0 08 00 	mv r1,r14
 20050f4:	f8 00 0e d1 	calli 2008c38 <__muldf3>
 20050f8:	ba 00 18 00 	mv r3,r16
 20050fc:	ba 20 20 00 	mv r4,r17
 2005100:	f8 00 10 7c 	calli 20092f0 <__gedf2>
 2005104:	4c 39 00 2c 	bge r1,r25,20051b4 <_dtoa_r+0xe58>
 2005108:	bb 20 78 00 	mv r15,r25
 200510c:	bb 20 90 00 	mv r18,r25
 2005110:	e3 ff ff b0 	bi 2004fd0 <_dtoa_r+0xc74>
 2005114:	44 22 ff 90 	be r1,r2,2004f54 <_dtoa_r+0xbf8>
 2005118:	34 21 00 1c 	addi r1,r1,28
 200511c:	2b 84 00 80 	lw r4,(sp+128)
 2005120:	2b 85 00 68 	lw r5,(sp+104)
 2005124:	b5 a1 68 00 	add r13,r13,r1
 2005128:	b4 81 20 00 	add r4,r4,r1
 200512c:	b4 a1 28 00 	add r5,r5,r1
 2005130:	5b 84 00 80 	sw (sp+128),r4
 2005134:	5b 85 00 68 	sw (sp+104),r5
 2005138:	e3 ff ff 87 	bi 2004f54 <_dtoa_r+0xbf8>
 200513c:	34 02 00 01 	mvi r2,1
 2005140:	e3 ff fd 9a 	bi 20047a8 <_dtoa_r+0x44c>
 2005144:	2a 42 00 10 	lw r2,(r18+16)
 2005148:	34 42 00 03 	addi r2,r2,3
 200514c:	3c 42 00 02 	sli r2,r2,2
 2005150:	b6 42 10 00 	add r2,r18,r2
 2005154:	28 41 00 04 	lw r1,(r2+4)
 2005158:	f8 00 07 45 	calli 2006e6c <_hi0bits>
 200515c:	34 02 00 20 	mvi r2,32
 2005160:	c8 41 08 00 	sub r1,r2,r1
 2005164:	e3 ff ff 6b 	bi 2004f10 <_dtoa_r+0xbb4>
 2005168:	34 02 00 01 	mvi r2,1
 200516c:	5b 82 00 7c 	sw (sp+124),r2
 2005170:	2b 83 00 60 	lw r3,(sp+96)
 2005174:	b7 03 18 00 	add r3,r24,r3
 2005178:	5b 83 00 70 	sw (sp+112),r3
 200517c:	34 6d 00 01 	addi r13,r3,1
 2005180:	4c 0d 01 58 	bge r0,r13,20056e0 <_dtoa_r+0x1384>
 2005184:	b9 a0 c8 00 	mv r25,r13
 2005188:	e3 ff fe eb 	bi 2004d34 <_dtoa_r+0x9d8>
 200518c:	34 02 00 00 	mvi r2,0
 2005190:	5b 82 00 7c 	sw (sp+124),r2
 2005194:	e3 ff ff f7 	bi 2005170 <_dtoa_r+0xe14>
 2005198:	34 05 00 00 	mvi r5,0
 200519c:	5b 85 00 7c 	sw (sp+124),r5
 20051a0:	e3 ff fe e0 	bi 2004d20 <_dtoa_r+0x9c4>
 20051a4:	b8 80 60 00 	mv r12,r4
 20051a8:	e3 ff fd 40 	bi 20046a8 <_dtoa_r+0x34c>
 20051ac:	5b 98 00 74 	sw (sp+116),r24
 20051b0:	e3 ff ff 9b 	bi 200501c <_dtoa_r+0xcc0>
 20051b4:	34 0f 00 00 	mvi r15,0
 20051b8:	b9 e0 90 00 	mv r18,r15
 20051bc:	2b 85 00 60 	lw r5,(sp+96)
 20051c0:	b9 e0 80 00 	mv r16,r15
 20051c4:	2b 95 00 64 	lw r21,(sp+100)
 20051c8:	a4 a0 c0 00 	not r24,r5
 20051cc:	34 0f 00 00 	mvi r15,0
 20051d0:	e3 ff ff 87 	bi 2004fec <_dtoa_r+0xc90>
 20051d4:	b9 e0 10 00 	mv r2,r15
 20051d8:	ba e0 08 00 	mv r1,r23
 20051dc:	f8 00 07 19 	calli 2006e40 <_Bfree>
 20051e0:	e3 ff ff 8b 	bi 200500c <_dtoa_r+0xcb0>
 20051e4:	2b 83 00 7c 	lw r3,(sp+124)
 20051e8:	2b 95 00 64 	lw r21,(sp+100)
 20051ec:	34 0b 00 01 	mvi r11,1
 20051f0:	44 62 00 2e 	be r3,r2,20052a8 <_dtoa_r+0xf4c>
 20051f4:	4c 0d 00 06 	bge r0,r13,200520c <_dtoa_r+0xeb0>
 20051f8:	b9 e0 10 00 	mv r2,r15
 20051fc:	b9 a0 18 00 	mv r3,r13
 2005200:	ba e0 08 00 	mv r1,r23
 2005204:	f8 00 08 84 	calli 2007414 <_lshift>
 2005208:	b8 20 78 00 	mv r15,r1
 200520c:	b9 e0 80 00 	mv r16,r15
 2005210:	5d 80 01 51 	bne r12,r0,2005754 <_dtoa_r+0x13f8>
 2005214:	2b 84 00 64 	lw r4,(sp+100)
 2005218:	22 31 00 01 	andi r17,r17,0x1
 200521c:	b4 99 98 00 	add r19,r4,r25
 2005220:	b8 80 a8 00 	mv r21,r4
 2005224:	2b 81 00 8c 	lw r1,(sp+140)
 2005228:	ba 40 10 00 	mv r2,r18
 200522c:	34 0c 00 01 	mvi r12,1
 2005230:	fb ff fb cc 	calli 2004160 <quorem>
 2005234:	34 2e 00 30 	addi r14,r1,48
 2005238:	2b 81 00 8c 	lw r1,(sp+140)
 200523c:	b9 e0 10 00 	mv r2,r15
 2005240:	f8 00 07 60 	calli 2006fc0 <__mcmp>
 2005244:	b8 20 68 00 	mv r13,r1
 2005248:	ba 40 10 00 	mv r2,r18
 200524c:	ba e0 08 00 	mv r1,r23
 2005250:	ba 00 18 00 	mv r3,r16
 2005254:	f8 00 07 f7 	calli 2007230 <__mdiff>
 2005258:	b8 20 58 00 	mv r11,r1
 200525c:	28 21 00 0c 	lw r1,(r1+12)
 2005260:	44 20 00 53 	be r1,r0,20053ac <_dtoa_r+0x1050>
 2005264:	ba e0 08 00 	mv r1,r23
 2005268:	b9 60 10 00 	mv r2,r11
 200526c:	f8 00 06 f5 	calli 2006e40 <_Bfree>
 2005270:	b9 9b 08 00 	or r1,r12,fp
 2005274:	5c 20 00 02 	bne r1,r0,200527c <_dtoa_r+0xf20>
 2005278:	46 21 00 1b 	be r17,r1,20052e4 <_dtoa_r+0xf88>
 200527c:	48 0d 00 21 	bg r0,r13,2005300 <_dtoa_r+0xfa4>
 2005280:	b9 bb 08 00 	or r1,r13,fp
 2005284:	5c 20 00 02 	bne r1,r0,200528c <_dtoa_r+0xf30>
 2005288:	46 21 00 1e 	be r17,r1,2005300 <_dtoa_r+0xfa4>
 200528c:	4c 0c 00 31 	bge r0,r12,2005350 <_dtoa_r+0xff4>
 2005290:	34 01 00 39 	mvi r1,57
 2005294:	45 c1 01 49 	be r14,r1,20057b8 <_dtoa_r+0x145c>
 2005298:	35 c1 00 01 	addi r1,r14,1
 200529c:	32 a1 00 00 	sb (r21+0),r1
 20052a0:	36 b5 00 01 	addi r21,r21,1
 20052a4:	e3 ff ff 52 	bi 2004fec <_dtoa_r+0xc90>
 20052a8:	2b 81 00 8c 	lw r1,(sp+140)
 20052ac:	ba 40 10 00 	mv r2,r18
 20052b0:	fb ff fb ac 	calli 2004160 <quorem>
 20052b4:	34 2e 00 30 	addi r14,r1,48
 20052b8:	32 ae 00 00 	sb (r21+0),r14
 20052bc:	36 b5 00 01 	addi r21,r21,1
 20052c0:	4d 79 00 d0 	bge r11,r25,2005600 <_dtoa_r+0x12a4>
 20052c4:	2b 82 00 8c 	lw r2,(sp+140)
 20052c8:	ba e0 08 00 	mv r1,r23
 20052cc:	34 03 00 0a 	mvi r3,10
 20052d0:	34 04 00 00 	mvi r4,0
 20052d4:	f8 00 09 33 	calli 20077a0 <_multadd>
 20052d8:	5b 81 00 8c 	sw (sp+140),r1
 20052dc:	35 6b 00 01 	addi r11,r11,1
 20052e0:	e3 ff ff f2 	bi 20052a8 <_dtoa_r+0xf4c>
 20052e4:	34 01 00 39 	mvi r1,57
 20052e8:	45 c1 01 34 	be r14,r1,20057b8 <_dtoa_r+0x145c>
 20052ec:	e9 b1 08 00 	cmpg r1,r13,r17
 20052f0:	b5 c1 70 00 	add r14,r14,r1
 20052f4:	32 ae 00 00 	sb (r21+0),r14
 20052f8:	36 b5 00 01 	addi r21,r21,1
 20052fc:	e3 ff ff 3c 	bi 2004fec <_dtoa_r+0xc90>
 2005300:	b9 c0 58 00 	mv r11,r14
 2005304:	4c 0c 00 10 	bge r0,r12,2005344 <_dtoa_r+0xfe8>
 2005308:	2b 82 00 8c 	lw r2,(sp+140)
 200530c:	34 03 00 01 	mvi r3,1
 2005310:	ba e0 08 00 	mv r1,r23
 2005314:	f8 00 08 40 	calli 2007414 <_lshift>
 2005318:	ba 40 10 00 	mv r2,r18
 200531c:	5b 81 00 8c 	sw (sp+140),r1
 2005320:	f8 00 07 28 	calli 2006fc0 <__mcmp>
 2005324:	b8 20 10 00 	mv r2,r1
 2005328:	48 20 00 04 	bg r1,r0,2005338 <_dtoa_r+0xfdc>
 200532c:	5c 20 00 06 	bne r1,r0,2005344 <_dtoa_r+0xfe8>
 2005330:	21 c1 00 01 	andi r1,r14,0x1
 2005334:	44 22 00 04 	be r1,r2,2005344 <_dtoa_r+0xfe8>
 2005338:	34 01 00 39 	mvi r1,57
 200533c:	45 c1 01 1f 	be r14,r1,20057b8 <_dtoa_r+0x145c>
 2005340:	35 cb 00 01 	addi r11,r14,1
 2005344:	32 ab 00 00 	sb (r21+0),r11
 2005348:	36 b5 00 01 	addi r21,r21,1
 200534c:	e3 ff ff 28 	bi 2004fec <_dtoa_r+0xc90>
 2005350:	32 ae 00 00 	sb (r21+0),r14
 2005354:	36 b5 00 01 	addi r21,r21,1
 2005358:	46 b3 00 ac 	be r21,r19,2005608 <_dtoa_r+0x12ac>
 200535c:	2b 82 00 8c 	lw r2,(sp+140)
 2005360:	ba e0 08 00 	mv r1,r23
 2005364:	34 03 00 0a 	mvi r3,10
 2005368:	34 04 00 00 	mvi r4,0
 200536c:	f8 00 09 0d 	calli 20077a0 <_multadd>
 2005370:	5b 81 00 8c 	sw (sp+140),r1
 2005374:	45 f0 00 38 	be r15,r16,2005454 <_dtoa_r+0x10f8>
 2005378:	b9 e0 10 00 	mv r2,r15
 200537c:	34 03 00 0a 	mvi r3,10
 2005380:	34 04 00 00 	mvi r4,0
 2005384:	ba e0 08 00 	mv r1,r23
 2005388:	f8 00 09 06 	calli 20077a0 <_multadd>
 200538c:	ba 00 10 00 	mv r2,r16
 2005390:	b8 20 78 00 	mv r15,r1
 2005394:	34 03 00 0a 	mvi r3,10
 2005398:	ba e0 08 00 	mv r1,r23
 200539c:	34 04 00 00 	mvi r4,0
 20053a0:	f8 00 09 00 	calli 20077a0 <_multadd>
 20053a4:	b8 20 80 00 	mv r16,r1
 20053a8:	e3 ff ff 9f 	bi 2005224 <_dtoa_r+0xec8>
 20053ac:	2b 81 00 8c 	lw r1,(sp+140)
 20053b0:	b9 60 10 00 	mv r2,r11
 20053b4:	f8 00 07 03 	calli 2006fc0 <__mcmp>
 20053b8:	b8 20 60 00 	mv r12,r1
 20053bc:	e3 ff ff aa 	bi 2005264 <_dtoa_r+0xf08>
 20053c0:	c8 18 28 00 	sub r5,r0,r24
 20053c4:	ba 60 60 00 	mv r12,r19
 20053c8:	ba 80 68 00 	mv r13,r20
 20053cc:	34 0f 00 02 	mvi r15,2
 20053d0:	44 a0 fc ec 	be r5,r0,2004780 <_dtoa_r+0x424>
 20053d4:	20 a2 00 0f 	andi r2,r5,0xf
 20053d8:	3c 42 00 03 	sli r2,r2,3
 20053dc:	78 01 02 00 	mvhi r1,0x200
 20053e0:	38 21 a4 e0 	ori r1,r1,0xa4e0
 20053e4:	b4 22 08 00 	add r1,r1,r2
 20053e8:	28 24 00 04 	lw r4,(r1+4)
 20053ec:	28 23 00 00 	lw r3,(r1+0)
 20053f0:	ba 80 10 00 	mv r2,r20
 20053f4:	ba 60 08 00 	mv r1,r19
 20053f8:	14 ae 00 04 	sri r14,r5,4
 20053fc:	f8 00 0e 0f 	calli 2008c38 <__muldf3>
 2005400:	b8 20 60 00 	mv r12,r1
 2005404:	b8 40 68 00 	mv r13,r2
 2005408:	34 0f 00 02 	mvi r15,2
 200540c:	45 c0 fc dd 	be r14,r0,2004780 <_dtoa_r+0x424>
 2005410:	78 0b 02 00 	mvhi r11,0x200
 2005414:	39 6b a5 a8 	ori r11,r11,0xa5a8
 2005418:	34 0f 00 02 	mvi r15,2
 200541c:	21 c1 00 01 	andi r1,r14,0x1
 2005420:	44 20 00 09 	be r1,r0,2005444 <_dtoa_r+0x10e8>
 2005424:	29 63 00 00 	lw r3,(r11+0)
 2005428:	29 64 00 04 	lw r4,(r11+4)
 200542c:	b9 a0 10 00 	mv r2,r13
 2005430:	b9 80 08 00 	mv r1,r12
 2005434:	f8 00 0e 01 	calli 2008c38 <__muldf3>
 2005438:	b8 20 60 00 	mv r12,r1
 200543c:	35 ef 00 01 	addi r15,r15,1
 2005440:	b8 40 68 00 	mv r13,r2
 2005444:	15 ce 00 01 	sri r14,r14,1
 2005448:	35 6b 00 08 	addi r11,r11,8
 200544c:	5d c0 ff f4 	bne r14,r0,200541c <_dtoa_r+0x10c0>
 2005450:	e3 ff fc cc 	bi 2004780 <_dtoa_r+0x424>
 2005454:	b9 e0 10 00 	mv r2,r15
 2005458:	ba e0 08 00 	mv r1,r23
 200545c:	34 03 00 0a 	mvi r3,10
 2005460:	34 04 00 00 	mvi r4,0
 2005464:	f8 00 08 cf 	calli 20077a0 <_multadd>
 2005468:	b8 20 78 00 	mv r15,r1
 200546c:	b8 20 80 00 	mv r16,r1
 2005470:	e3 ff ff 6d 	bi 2005224 <_dtoa_r+0xec8>
 2005474:	2b 85 00 6c 	lw r5,(sp+108)
 2005478:	37 21 ff ff 	addi r1,r25,-1
 200547c:	48 25 00 ad 	bg r1,r5,2005730 <_dtoa_r+0x13d4>
 2005480:	c8 a1 60 00 	sub r12,r5,r1
 2005484:	2b 85 00 68 	lw r5,(sp+104)
 2005488:	34 03 00 00 	mvi r3,0
 200548c:	c8 b9 68 00 	sub r13,r5,r25
 2005490:	48 79 fe 4a 	bg r3,r25,2004db8 <_dtoa_r+0xa5c>
 2005494:	bb 20 18 00 	mv r3,r25
 2005498:	b8 a0 68 00 	mv r13,r5
 200549c:	e3 ff fe 47 	bi 2004db8 <_dtoa_r+0xa5c>
 20054a0:	ba c0 78 00 	mv r15,r22
 20054a4:	2b 98 00 74 	lw r24,(sp+116)
 20054a8:	ba c0 90 00 	mv r18,r22
 20054ac:	e3 ff fe c9 	bi 2004fd0 <_dtoa_r+0xc74>
 20054b0:	36 d2 ff ff 	addi r18,r22,-1
 20054b4:	3e 41 00 03 	sli r1,r18,3
 20054b8:	78 03 02 00 	mvhi r3,0x200
 20054bc:	38 63 a4 e0 	ori r3,r3,0xa4e0
 20054c0:	b4 61 18 00 	add r3,r3,r1
 20054c4:	28 62 00 04 	lw r2,(r3+4)
 20054c8:	28 61 00 00 	lw r1,(r3+0)
 20054cc:	b9 c0 20 00 	mv r4,r14
 20054d0:	b9 60 18 00 	mv r3,r11
 20054d4:	f8 00 0d d9 	calli 2008c38 <__muldf3>
 20054d8:	5b 81 00 54 	sw (sp+84),r1
 20054dc:	5b 82 00 50 	sw (sp+80),r2
 20054e0:	b9 80 08 00 	mv r1,r12
 20054e4:	b9 a0 10 00 	mv r2,r13
 20054e8:	f8 00 0f fb 	calli 20094d4 <__fixdfsi>
 20054ec:	b8 20 58 00 	mv r11,r1
 20054f0:	f8 00 0f c2 	calli 20093f8 <__floatsidf>
 20054f4:	b8 20 18 00 	mv r3,r1
 20054f8:	b8 40 20 00 	mv r4,r2
 20054fc:	b9 80 08 00 	mv r1,r12
 2005500:	b9 a0 10 00 	mv r2,r13
 2005504:	f8 00 0d 96 	calli 2008b5c <__subdf3>
 2005508:	2b 83 00 64 	lw r3,(sp+100)
 200550c:	35 6b 00 30 	addi r11,r11,48
 2005510:	b8 20 60 00 	mv r12,r1
 2005514:	34 75 00 01 	addi r21,r3,1
 2005518:	30 6b 00 00 	sb (r3+0),r11
 200551c:	34 01 00 01 	mvi r1,1
 2005520:	b8 40 70 00 	mv r14,r2
 2005524:	ba a0 78 00 	mv r15,r21
 2005528:	b4 76 80 00 	add r16,r3,r22
 200552c:	78 11 40 24 	mvhi r17,0x4024
 2005530:	46 c1 00 19 	be r22,r1,2005594 <_dtoa_r+0x1238>
 2005534:	ba 20 18 00 	mv r3,r17
 2005538:	38 63 00 00 	ori r3,r3,0x0
 200553c:	34 04 00 00 	mvi r4,0
 2005540:	b9 80 08 00 	mv r1,r12
 2005544:	b9 c0 10 00 	mv r2,r14
 2005548:	f8 00 0d bc 	calli 2008c38 <__muldf3>
 200554c:	b8 20 58 00 	mv r11,r1
 2005550:	b9 60 08 00 	mv r1,r11
 2005554:	b8 40 70 00 	mv r14,r2
 2005558:	f8 00 0f df 	calli 20094d4 <__fixdfsi>
 200555c:	b8 20 68 00 	mv r13,r1
 2005560:	f8 00 0f a6 	calli 20093f8 <__floatsidf>
 2005564:	b8 20 18 00 	mv r3,r1
 2005568:	b8 40 20 00 	mv r4,r2
 200556c:	b9 60 08 00 	mv r1,r11
 2005570:	b9 c0 10 00 	mv r2,r14
 2005574:	35 ad 00 30 	addi r13,r13,48
 2005578:	f8 00 0d 79 	calli 2008b5c <__subdf3>
 200557c:	31 ed 00 00 	sb (r15+0),r13
 2005580:	35 ef 00 01 	addi r15,r15,1
 2005584:	b8 20 60 00 	mv r12,r1
 2005588:	b8 40 70 00 	mv r14,r2
 200558c:	5d f0 ff ea 	bne r15,r16,2005534 <_dtoa_r+0x11d8>
 2005590:	b6 b2 a8 00 	add r21,r21,r18
 2005594:	2b 81 00 54 	lw r1,(sp+84)
 2005598:	2b 82 00 50 	lw r2,(sp+80)
 200559c:	78 03 3f e0 	mvhi r3,0x3fe0
 20055a0:	38 63 00 00 	ori r3,r3,0x0
 20055a4:	34 04 00 00 	mvi r4,0
 20055a8:	f8 00 0d 8a 	calli 2008bd0 <__adddf3>
 20055ac:	b9 80 18 00 	mv r3,r12
 20055b0:	b9 c0 20 00 	mv r4,r14
 20055b4:	f8 00 0f 6e 	calli 200936c <__ltdf2>
 20055b8:	48 01 00 56 	bg r0,r1,2005710 <_dtoa_r+0x13b4>
 20055bc:	2b 83 00 54 	lw r3,(sp+84)
 20055c0:	2b 84 00 50 	lw r4,(sp+80)
 20055c4:	78 01 3f e0 	mvhi r1,0x3fe0
 20055c8:	38 21 00 00 	ori r1,r1,0x0
 20055cc:	34 02 00 00 	mvi r2,0
 20055d0:	f8 00 0d 63 	calli 2008b5c <__subdf3>
 20055d4:	b9 80 18 00 	mv r3,r12
 20055d8:	b9 c0 20 00 	mv r4,r14
 20055dc:	f8 00 0f 26 	calli 2009274 <__gtdf2>
 20055e0:	34 03 00 30 	mvi r3,48
 20055e4:	48 20 00 03 	bg r1,r0,20055f0 <_dtoa_r+0x1294>
 20055e8:	e3 ff fd 28 	bi 2004a88 <_dtoa_r+0x72c>
 20055ec:	b8 40 a8 00 	mv r21,r2
 20055f0:	42 a1 ff ff 	lbu r1,(r21+-1)
 20055f4:	36 a2 ff ff 	addi r2,r21,-1
 20055f8:	44 23 ff fd 	be r1,r3,20055ec <_dtoa_r+0x1290>
 20055fc:	e3 ff fe 88 	bi 200501c <_dtoa_r+0xcc0>
 2005600:	b9 e0 80 00 	mv r16,r15
 2005604:	34 0f 00 00 	mvi r15,0
 2005608:	2b 82 00 8c 	lw r2,(sp+140)
 200560c:	34 03 00 01 	mvi r3,1
 2005610:	ba e0 08 00 	mv r1,r23
 2005614:	f8 00 07 80 	calli 2007414 <_lshift>
 2005618:	ba 40 10 00 	mv r2,r18
 200561c:	5b 81 00 8c 	sw (sp+140),r1
 2005620:	f8 00 06 68 	calli 2006fc0 <__mcmp>
 2005624:	b8 20 10 00 	mv r2,r1
 2005628:	48 20 00 04 	bg r1,r0,2005638 <_dtoa_r+0x12dc>
 200562c:	5c 20 00 10 	bne r1,r0,200566c <_dtoa_r+0x1310>
 2005630:	21 c1 00 01 	andi r1,r14,0x1
 2005634:	44 22 00 0e 	be r1,r2,200566c <_dtoa_r+0x1310>
 2005638:	34 03 00 39 	mvi r3,57
 200563c:	e0 00 00 02 	bi 2005644 <_dtoa_r+0x12e8>
 2005640:	b8 40 a8 00 	mv r21,r2
 2005644:	42 a1 ff ff 	lbu r1,(r21+-1)
 2005648:	36 a2 ff ff 	addi r2,r21,-1
 200564c:	5c 23 00 58 	bne r1,r3,20057ac <_dtoa_r+0x1450>
 2005650:	2b 85 00 64 	lw r5,(sp+100)
 2005654:	5c 45 ff fb 	bne r2,r5,2005640 <_dtoa_r+0x12e4>
 2005658:	2b 82 00 64 	lw r2,(sp+100)
 200565c:	34 01 00 31 	mvi r1,49
 2005660:	37 18 00 01 	addi r24,r24,1
 2005664:	30 41 00 00 	sb (r2+0),r1
 2005668:	e3 ff fe 61 	bi 2004fec <_dtoa_r+0xc90>
 200566c:	34 03 00 30 	mvi r3,48
 2005670:	e0 00 00 02 	bi 2005678 <_dtoa_r+0x131c>
 2005674:	b8 40 a8 00 	mv r21,r2
 2005678:	42 a1 ff ff 	lbu r1,(r21+-1)
 200567c:	36 a2 ff ff 	addi r2,r21,-1
 2005680:	44 23 ff fd 	be r1,r3,2005674 <_dtoa_r+0x1318>
 2005684:	e3 ff fe 5a 	bi 2004fec <_dtoa_r+0xc90>
 2005688:	2b 81 00 8c 	lw r1,(sp+140)
 200568c:	ba 40 10 00 	mv r2,r18
 2005690:	f8 00 06 4c 	calli 2006fc0 <__mcmp>
 2005694:	4c 20 fe 40 	bge r1,r0,2004f94 <_dtoa_r+0xc38>
 2005698:	2b 82 00 8c 	lw r2,(sp+140)
 200569c:	34 04 00 00 	mvi r4,0
 20056a0:	ba e0 08 00 	mv r1,r23
 20056a4:	34 03 00 0a 	mvi r3,10
 20056a8:	f8 00 08 3e 	calli 20077a0 <_multadd>
 20056ac:	2b 84 00 7c 	lw r4,(sp+124)
 20056b0:	5b 81 00 8c 	sw (sp+140),r1
 20056b4:	37 18 ff ff 	addi r24,r24,-1
 20056b8:	2b 99 00 70 	lw r25,(sp+112)
 20056bc:	44 80 fe 36 	be r4,r0,2004f94 <_dtoa_r+0xc38>
 20056c0:	b9 e0 10 00 	mv r2,r15
 20056c4:	ba e0 08 00 	mv r1,r23
 20056c8:	34 03 00 0a 	mvi r3,10
 20056cc:	34 04 00 00 	mvi r4,0
 20056d0:	f8 00 08 34 	calli 20077a0 <_multadd>
 20056d4:	b8 20 78 00 	mv r15,r1
 20056d8:	2b 99 00 70 	lw r25,(sp+112)
 20056dc:	e3 ff fe 2e 	bi 2004f94 <_dtoa_r+0xc38>
 20056e0:	34 01 00 0e 	mvi r1,14
 20056e4:	f0 2d 58 00 	cmpgeu r11,r1,r13
 20056e8:	b8 80 60 00 	mv r12,r4
 20056ec:	b9 a0 c8 00 	mv r25,r13
 20056f0:	e3 ff fb f5 	bi 20046c4 <_dtoa_r+0x368>
 20056f4:	34 02 00 01 	mvi r2,1
 20056f8:	5b 82 00 60 	sw (sp+96),r2
 20056fc:	b8 80 60 00 	mv r12,r4
 2005700:	b8 40 c8 00 	mv r25,r2
 2005704:	5b 82 00 70 	sw (sp+112),r2
 2005708:	b8 40 58 00 	mv r11,r2
 200570c:	e3 ff fb ee 	bi 20046c4 <_dtoa_r+0x368>
 2005710:	2b 98 00 74 	lw r24,(sp+116)
 2005714:	e3 ff fd 51 	bi 2004c58 <_dtoa_r+0x8fc>
 2005718:	2b 82 00 8c 	lw r2,(sp+140)
 200571c:	2b 83 00 6c 	lw r3,(sp+108)
 2005720:	ba e0 08 00 	mv r1,r23
 2005724:	f8 00 08 62 	calli 20078ac <_pow5mult>
 2005728:	5b 81 00 8c 	sw (sp+140),r1
 200572c:	e3 ff fd d6 	bi 2004e84 <_dtoa_r+0xb28>
 2005730:	2b 83 00 6c 	lw r3,(sp+108)
 2005734:	2b 84 00 84 	lw r4,(sp+132)
 2005738:	b8 40 60 00 	mv r12,r2
 200573c:	c8 23 08 00 	sub r1,r1,r3
 2005740:	b4 61 18 00 	add r3,r3,r1
 2005744:	b4 81 20 00 	add r4,r4,r1
 2005748:	5b 83 00 6c 	sw (sp+108),r3
 200574c:	5b 84 00 84 	sw (sp+132),r4
 2005750:	e3 ff ff 4d 	bi 2005484 <_dtoa_r+0x1128>
 2005754:	29 e2 00 04 	lw r2,(r15+4)
 2005758:	ba e0 08 00 	mv r1,r23
 200575c:	f8 00 06 32 	calli 2007024 <_Balloc>
 2005760:	29 e3 00 10 	lw r3,(r15+16)
 2005764:	b8 20 58 00 	mv r11,r1
 2005768:	35 e2 00 0c 	addi r2,r15,12
 200576c:	34 63 00 02 	addi r3,r3,2
 2005770:	3c 63 00 02 	sli r3,r3,2
 2005774:	34 21 00 0c 	addi r1,r1,12
 2005778:	fb ff f0 ee 	calli 2001b30 <memcpy>
 200577c:	ba e0 08 00 	mv r1,r23
 2005780:	b9 60 10 00 	mv r2,r11
 2005784:	34 03 00 01 	mvi r3,1
 2005788:	f8 00 07 23 	calli 2007414 <_lshift>
 200578c:	b8 20 80 00 	mv r16,r1
 2005790:	e3 ff fe a1 	bi 2005214 <_dtoa_r+0xeb8>
 2005794:	2b 82 00 94 	lw r2,(sp+148)
 2005798:	34 01 00 36 	mvi r1,54
 200579c:	2b 8d 00 68 	lw r13,(sp+104)
 20057a0:	c8 22 18 00 	sub r3,r1,r2
 20057a4:	2b 8c 00 6c 	lw r12,(sp+108)
 20057a8:	e3 ff fd 84 	bi 2004db8 <_dtoa_r+0xa5c>
 20057ac:	34 21 00 01 	addi r1,r1,1
 20057b0:	30 41 00 00 	sb (r2+0),r1
 20057b4:	e3 ff fe 0e 	bi 2004fec <_dtoa_r+0xc90>
 20057b8:	34 01 00 39 	mvi r1,57
 20057bc:	32 a1 00 00 	sb (r21+0),r1
 20057c0:	36 b5 00 01 	addi r21,r21,1
 20057c4:	e3 ff ff 9d 	bi 2005638 <_dtoa_r+0x12dc>

020057c8 <fflush>:
 20057c8:	37 9c ff f0 	addi sp,sp,-16
 20057cc:	5b 8b 00 10 	sw (sp+16),r11
 20057d0:	5b 8c 00 0c 	sw (sp+12),r12
 20057d4:	5b 8d 00 08 	sw (sp+8),r13
 20057d8:	5b 9d 00 04 	sw (sp+4),ra
 20057dc:	b8 20 68 00 	mv r13,r1
 20057e0:	44 20 00 33 	be r1,r0,20058ac <fflush+0xe4>
 20057e4:	78 01 02 00 	mvhi r1,0x200
 20057e8:	38 21 aa e8 	ori r1,r1,0xaae8
 20057ec:	28 22 00 00 	lw r2,(r1+0)
 20057f0:	44 40 00 03 	be r2,r0,20057fc <fflush+0x34>
 20057f4:	28 41 00 38 	lw r1,(r2+56)
 20057f8:	44 20 00 2a 	be r1,r0,20058a0 <fflush+0xd8>
 20057fc:	1d a2 00 0c 	lh r2,(r13+12)
 2005800:	20 41 00 08 	andi r1,r2,0x8
 2005804:	44 20 00 1f 	be r1,r0,2005880 <fflush+0xb8>
 2005808:	29 ac 00 10 	lw r12,(r13+16)
 200580c:	45 80 00 1d 	be r12,r0,2005880 <fflush+0xb8>
 2005810:	29 a1 00 00 	lw r1,(r13+0)
 2005814:	20 42 00 03 	andi r2,r2,0x3
 2005818:	59 ac 00 00 	sw (r13+0),r12
 200581c:	c8 2c 58 00 	sub r11,r1,r12
 2005820:	34 01 00 00 	mvi r1,0
 2005824:	5c 41 00 02 	bne r2,r1,200582c <fflush+0x64>
 2005828:	29 a1 00 14 	lw r1,(r13+20)
 200582c:	59 a1 00 08 	sw (r13+8),r1
 2005830:	4c 0b 00 14 	bge r0,r11,2005880 <fflush+0xb8>
 2005834:	29 a4 00 24 	lw r4,(r13+36)
 2005838:	29 a1 00 1c 	lw r1,(r13+28)
 200583c:	b9 80 10 00 	mv r2,r12
 2005840:	b9 60 18 00 	mv r3,r11
 2005844:	d8 80 00 00 	call r4
 2005848:	b5 81 60 00 	add r12,r12,r1
 200584c:	c9 61 58 00 	sub r11,r11,r1
 2005850:	48 20 ff f8 	bg r1,r0,2005830 <fflush+0x68>
 2005854:	2d a1 00 0c 	lhu r1,(r13+12)
 2005858:	34 02 ff ff 	mvi r2,-1
 200585c:	38 21 00 40 	ori r1,r1,0x40
 2005860:	0d a1 00 0c 	sh (r13+12),r1
 2005864:	b8 40 08 00 	mv r1,r2
 2005868:	2b 9d 00 04 	lw ra,(sp+4)
 200586c:	2b 8b 00 10 	lw r11,(sp+16)
 2005870:	2b 8c 00 0c 	lw r12,(sp+12)
 2005874:	2b 8d 00 08 	lw r13,(sp+8)
 2005878:	37 9c 00 10 	addi sp,sp,16
 200587c:	c3 a0 00 00 	ret
 2005880:	34 02 00 00 	mvi r2,0
 2005884:	b8 40 08 00 	mv r1,r2
 2005888:	2b 9d 00 04 	lw ra,(sp+4)
 200588c:	2b 8b 00 10 	lw r11,(sp+16)
 2005890:	2b 8c 00 0c 	lw r12,(sp+12)
 2005894:	2b 8d 00 08 	lw r13,(sp+8)
 2005898:	37 9c 00 10 	addi sp,sp,16
 200589c:	c3 a0 00 00 	ret
 20058a0:	b8 40 08 00 	mv r1,r2
 20058a4:	f8 00 00 0a 	calli 20058cc <__sinit>
 20058a8:	e3 ff ff d5 	bi 20057fc <fflush+0x34>
 20058ac:	78 02 02 00 	mvhi r2,0x200
 20058b0:	38 42 a4 94 	ori r2,r2,0xa494
 20058b4:	28 41 00 00 	lw r1,(r2+0)
 20058b8:	78 02 02 00 	mvhi r2,0x200
 20058bc:	38 42 57 c8 	ori r2,r2,0x57c8
 20058c0:	f8 00 02 3b 	calli 20061ac <_fwalk>
 20058c4:	b8 20 10 00 	mv r2,r1
 20058c8:	e3 ff ff ef 	bi 2005884 <fflush+0xbc>

020058cc <__sinit>:
 20058cc:	37 9c ff f8 	addi sp,sp,-8
 20058d0:	5b 8b 00 08 	sw (sp+8),r11
 20058d4:	5b 8c 00 04 	sw (sp+4),r12
 20058d8:	28 24 00 04 	lw r4,(r1+4)
 20058dc:	28 25 00 08 	lw r5,(r1+8)
 20058e0:	34 0c 00 01 	mvi r12,1
 20058e4:	34 02 00 03 	mvi r2,3
 20058e8:	78 09 02 00 	mvhi r9,0x200
 20058ec:	78 0a 02 00 	mvhi r10,0x200
 20058f0:	78 0b 02 00 	mvhi r11,0x200
 20058f4:	78 08 02 00 	mvhi r8,0x200
 20058f8:	34 03 00 00 	mvi r3,0
 20058fc:	28 26 00 0c 	lw r6,(r1+12)
 2005900:	58 22 02 e4 	sw (r1+740),r2
 2005904:	58 2c 00 38 	sw (r1+56),r12
 2005908:	39 29 81 9c 	ori r9,r9,0x819c
 200590c:	39 4a 81 04 	ori r10,r10,0x8104
 2005910:	39 6b 80 84 	ori r11,r11,0x8084
 2005914:	39 08 80 5c 	ori r8,r8,0x805c
 2005918:	34 02 00 04 	mvi r2,4
 200591c:	78 07 02 00 	mvhi r7,0x200
 2005920:	0c 82 00 0c 	sh (r4+12),r2
 2005924:	58 88 00 2c 	sw (r4+44),r8
 2005928:	58 83 00 00 	sw (r4+0),r3
 200592c:	58 83 00 04 	sw (r4+4),r3
 2005930:	58 83 00 08 	sw (r4+8),r3
 2005934:	0c 83 00 0e 	sh (r4+14),r3
 2005938:	58 83 00 10 	sw (r4+16),r3
 200593c:	58 83 00 14 	sw (r4+20),r3
 2005940:	58 83 00 18 	sw (r4+24),r3
 2005944:	58 89 00 20 	sw (r4+32),r9
 2005948:	58 8a 00 24 	sw (r4+36),r10
 200594c:	58 84 00 1c 	sw (r4+28),r4
 2005950:	58 8b 00 28 	sw (r4+40),r11
 2005954:	34 22 02 ec 	addi r2,r1,748
 2005958:	38 e7 59 f4 	ori r7,r7,0x59f4
 200595c:	34 04 00 09 	mvi r4,9
 2005960:	58 27 00 3c 	sw (r1+60),r7
 2005964:	58 22 02 e8 	sw (r1+744),r2
 2005968:	58 23 02 e0 	sw (r1+736),r3
 200596c:	0c a4 00 0c 	sh (r5+12),r4
 2005970:	0c ac 00 0e 	sh (r5+14),r12
 2005974:	58 a8 00 2c 	sw (r5+44),r8
 2005978:	58 a3 00 00 	sw (r5+0),r3
 200597c:	58 a3 00 04 	sw (r5+4),r3
 2005980:	58 a3 00 08 	sw (r5+8),r3
 2005984:	58 a3 00 10 	sw (r5+16),r3
 2005988:	58 a3 00 14 	sw (r5+20),r3
 200598c:	58 a3 00 18 	sw (r5+24),r3
 2005990:	58 a5 00 1c 	sw (r5+28),r5
 2005994:	58 a9 00 20 	sw (r5+32),r9
 2005998:	58 aa 00 24 	sw (r5+36),r10
 200599c:	34 01 00 0a 	mvi r1,10
 20059a0:	34 02 00 02 	mvi r2,2
 20059a4:	58 ab 00 28 	sw (r5+40),r11
 20059a8:	58 c3 00 00 	sw (r6+0),r3
 20059ac:	58 c8 00 2c 	sw (r6+44),r8
 20059b0:	0c c1 00 0c 	sh (r6+12),r1
 20059b4:	0c c2 00 0e 	sh (r6+14),r2
 20059b8:	58 c3 00 18 	sw (r6+24),r3
 20059bc:	58 c9 00 20 	sw (r6+32),r9
 20059c0:	58 ca 00 24 	sw (r6+36),r10
 20059c4:	58 cb 00 28 	sw (r6+40),r11
 20059c8:	58 c3 00 04 	sw (r6+4),r3
 20059cc:	58 c3 00 08 	sw (r6+8),r3
 20059d0:	58 c3 00 10 	sw (r6+16),r3
 20059d4:	58 c3 00 14 	sw (r6+20),r3
 20059d8:	58 c6 00 1c 	sw (r6+28),r6
 20059dc:	2b 8b 00 08 	lw r11,(sp+8)
 20059e0:	2b 8c 00 04 	lw r12,(sp+4)
 20059e4:	37 9c 00 08 	addi sp,sp,8
 20059e8:	c3 a0 00 00 	ret

020059ec <__sfp_lock_acquire>:
 20059ec:	c3 a0 00 00 	ret

020059f0 <__sfp_lock_release>:
 20059f0:	c3 a0 00 00 	ret

020059f4 <_cleanup_r>:
 20059f4:	37 9c ff fc 	addi sp,sp,-4
 20059f8:	5b 9d 00 04 	sw (sp+4),ra
 20059fc:	78 02 02 00 	mvhi r2,0x200
 2005a00:	38 42 85 c4 	ori r2,r2,0x85c4
 2005a04:	f8 00 01 ea 	calli 20061ac <_fwalk>
 2005a08:	2b 9d 00 04 	lw ra,(sp+4)
 2005a0c:	37 9c 00 04 	addi sp,sp,4
 2005a10:	c3 a0 00 00 	ret

02005a14 <_malloc_trim_r>:
 2005a14:	37 9c ff ec 	addi sp,sp,-20
 2005a18:	5b 8b 00 14 	sw (sp+20),r11
 2005a1c:	5b 8c 00 10 	sw (sp+16),r12
 2005a20:	5b 8d 00 0c 	sw (sp+12),r13
 2005a24:	5b 8e 00 08 	sw (sp+8),r14
 2005a28:	5b 9d 00 04 	sw (sp+4),ra
 2005a2c:	78 0c 02 00 	mvhi r12,0x200
 2005a30:	b8 40 58 00 	mv r11,r2
 2005a34:	b8 20 70 00 	mv r14,r1
 2005a38:	39 8c af 00 	ori r12,r12,0xaf00
 2005a3c:	f8 00 04 ff 	calli 2006e38 <__malloc_lock>
 2005a40:	29 81 00 08 	lw r1,(r12+8)
 2005a44:	34 02 ff fc 	mvi r2,-4
 2005a48:	28 23 00 04 	lw r3,(r1+4)
 2005a4c:	a0 62 68 00 	and r13,r3,r2
 2005a50:	35 a1 0f ef 	addi r1,r13,4079
 2005a54:	c8 2b 08 00 	sub r1,r1,r11
 2005a58:	00 21 00 0c 	srui r1,r1,12
 2005a5c:	34 02 0f ff 	mvi r2,4095
 2005a60:	34 21 ff ff 	addi r1,r1,-1
 2005a64:	3c 2b 00 0c 	sli r11,r1,12
 2005a68:	49 62 00 0b 	bg r11,r2,2005a94 <_malloc_trim_r+0x80>
 2005a6c:	b9 c0 08 00 	mv r1,r14
 2005a70:	f8 00 04 f3 	calli 2006e3c <__malloc_unlock>
 2005a74:	34 01 00 00 	mvi r1,0
 2005a78:	2b 9d 00 04 	lw ra,(sp+4)
 2005a7c:	2b 8b 00 14 	lw r11,(sp+20)
 2005a80:	2b 8c 00 10 	lw r12,(sp+16)
 2005a84:	2b 8d 00 0c 	lw r13,(sp+12)
 2005a88:	2b 8e 00 08 	lw r14,(sp+8)
 2005a8c:	37 9c 00 14 	addi sp,sp,20
 2005a90:	c3 a0 00 00 	ret
 2005a94:	34 02 00 00 	mvi r2,0
 2005a98:	b9 c0 08 00 	mv r1,r14
 2005a9c:	f8 00 09 58 	calli 2007ffc <_sbrk_r>
 2005aa0:	29 82 00 08 	lw r2,(r12+8)
 2005aa4:	b4 4d 10 00 	add r2,r2,r13
 2005aa8:	5c 22 ff f1 	bne r1,r2,2005a6c <_malloc_trim_r+0x58>
 2005aac:	c8 0b 10 00 	sub r2,r0,r11
 2005ab0:	b9 c0 08 00 	mv r1,r14
 2005ab4:	f8 00 09 52 	calli 2007ffc <_sbrk_r>
 2005ab8:	34 02 ff ff 	mvi r2,-1
 2005abc:	44 22 00 0e 	be r1,r2,2005af4 <_malloc_trim_r+0xe0>
 2005ac0:	29 82 00 08 	lw r2,(r12+8)
 2005ac4:	c9 ab 08 00 	sub r1,r13,r11
 2005ac8:	38 21 00 01 	ori r1,r1,0x1
 2005acc:	78 03 02 00 	mvhi r3,0x200
 2005ad0:	58 41 00 04 	sw (r2+4),r1
 2005ad4:	38 63 b3 2c 	ori r3,r3,0xb32c
 2005ad8:	28 62 00 00 	lw r2,(r3+0)
 2005adc:	b9 c0 08 00 	mv r1,r14
 2005ae0:	c8 4b 10 00 	sub r2,r2,r11
 2005ae4:	58 62 00 00 	sw (r3+0),r2
 2005ae8:	f8 00 04 d5 	calli 2006e3c <__malloc_unlock>
 2005aec:	34 01 00 01 	mvi r1,1
 2005af0:	e3 ff ff e2 	bi 2005a78 <_malloc_trim_r+0x64>
 2005af4:	b9 c0 08 00 	mv r1,r14
 2005af8:	34 02 00 00 	mvi r2,0
 2005afc:	f8 00 09 40 	calli 2007ffc <_sbrk_r>
 2005b00:	29 86 00 08 	lw r6,(r12+8)
 2005b04:	b8 20 28 00 	mv r5,r1
 2005b08:	c8 26 20 00 	sub r4,r1,r6
 2005b0c:	34 01 00 0f 	mvi r1,15
 2005b10:	4c 24 ff d7 	bge r1,r4,2005a6c <_malloc_trim_r+0x58>
 2005b14:	78 01 02 00 	mvhi r1,0x200
 2005b18:	38 21 b3 0c 	ori r1,r1,0xb30c
 2005b1c:	28 23 00 00 	lw r3,(r1+0)
 2005b20:	78 02 02 00 	mvhi r2,0x200
 2005b24:	38 42 b3 2c 	ori r2,r2,0xb32c
 2005b28:	c8 a3 18 00 	sub r3,r5,r3
 2005b2c:	58 43 00 00 	sw (r2+0),r3
 2005b30:	38 81 00 01 	ori r1,r4,0x1
 2005b34:	58 c1 00 04 	sw (r6+4),r1
 2005b38:	e3 ff ff cd 	bi 2005a6c <_malloc_trim_r+0x58>

02005b3c <_free_r>:
 2005b3c:	37 9c ff f4 	addi sp,sp,-12
 2005b40:	5b 8b 00 0c 	sw (sp+12),r11
 2005b44:	5b 8c 00 08 	sw (sp+8),r12
 2005b48:	5b 9d 00 04 	sw (sp+4),ra
 2005b4c:	b8 40 58 00 	mv r11,r2
 2005b50:	b8 20 60 00 	mv r12,r1
 2005b54:	44 40 00 41 	be r2,r0,2005c58 <_free_r+0x11c>
 2005b58:	f8 00 04 b8 	calli 2006e38 <__malloc_lock>
 2005b5c:	35 68 ff f8 	addi r8,r11,-8
 2005b60:	29 05 00 04 	lw r5,(r8+4)
 2005b64:	34 01 ff fe 	mvi r1,-2
 2005b68:	78 0a 02 00 	mvhi r10,0x200
 2005b6c:	a0 a1 30 00 	and r6,r5,r1
 2005b70:	39 4a af 00 	ori r10,r10,0xaf00
 2005b74:	b5 06 20 00 	add r4,r8,r6
 2005b78:	28 82 00 04 	lw r2,(r4+4)
 2005b7c:	29 43 00 08 	lw r3,(r10+8)
 2005b80:	34 01 ff fc 	mvi r1,-4
 2005b84:	a0 41 38 00 	and r7,r2,r1
 2005b88:	44 64 00 51 	be r3,r4,2005ccc <_free_r+0x190>
 2005b8c:	20 a9 00 01 	andi r9,r5,0x1
 2005b90:	58 87 00 04 	sw (r4+4),r7
 2005b94:	34 05 00 00 	mvi r5,0
 2005b98:	5d 25 00 0c 	bne r9,r5,2005bc8 <_free_r+0x8c>
 2005b9c:	29 61 ff f8 	lw r1,(r11+-8)
 2005ba0:	35 42 00 08 	addi r2,r10,8
 2005ba4:	34 05 00 01 	mvi r5,1
 2005ba8:	c9 01 40 00 	sub r8,r8,r1
 2005bac:	29 03 00 08 	lw r3,(r8+8)
 2005bb0:	b4 c1 30 00 	add r6,r6,r1
 2005bb4:	44 62 00 05 	be r3,r2,2005bc8 <_free_r+0x8c>
 2005bb8:	29 01 00 0c 	lw r1,(r8+12)
 2005bbc:	b9 20 28 00 	mv r5,r9
 2005bc0:	58 23 00 08 	sw (r1+8),r3
 2005bc4:	58 61 00 0c 	sw (r3+12),r1
 2005bc8:	b4 87 08 00 	add r1,r4,r7
 2005bcc:	28 22 00 04 	lw r2,(r1+4)
 2005bd0:	20 42 00 01 	andi r2,r2,0x1
 2005bd4:	5c 40 00 0a 	bne r2,r0,2005bfc <_free_r+0xc0>
 2005bd8:	b4 c7 30 00 	add r6,r6,r7
 2005bdc:	5c a2 00 24 	bne r5,r2,2005c6c <_free_r+0x130>
 2005be0:	28 83 00 08 	lw r3,(r4+8)
 2005be4:	78 01 02 00 	mvhi r1,0x200
 2005be8:	38 21 af 08 	ori r1,r1,0xaf08
 2005bec:	44 61 00 5c 	be r3,r1,2005d5c <_free_r+0x220>
 2005bf0:	28 81 00 0c 	lw r1,(r4+12)
 2005bf4:	58 23 00 08 	sw (r1+8),r3
 2005bf8:	58 61 00 0c 	sw (r3+12),r1
 2005bfc:	38 c1 00 01 	ori r1,r6,0x1
 2005c00:	b5 06 10 00 	add r2,r8,r6
 2005c04:	59 01 00 04 	sw (r8+4),r1
 2005c08:	58 46 00 00 	sw (r2+0),r6
 2005c0c:	5c a0 00 11 	bne r5,r0,2005c50 <_free_r+0x114>
 2005c10:	34 01 01 ff 	mvi r1,511
 2005c14:	54 c1 00 18 	bgu r6,r1,2005c74 <_free_r+0x138>
 2005c18:	00 c2 00 03 	srui r2,r6,3
 2005c1c:	29 44 00 04 	lw r4,(r10+4)
 2005c20:	3c 43 00 03 	sli r3,r2,3
 2005c24:	14 42 00 02 	sri r2,r2,2
 2005c28:	b5 43 18 00 	add r3,r10,r3
 2005c2c:	28 65 00 08 	lw r5,(r3+8)
 2005c30:	34 01 00 01 	mvi r1,1
 2005c34:	bc 22 08 00 	sl r1,r1,r2
 2005c38:	59 03 00 0c 	sw (r8+12),r3
 2005c3c:	b8 81 20 00 	or r4,r4,r1
 2005c40:	59 05 00 08 	sw (r8+8),r5
 2005c44:	58 a8 00 0c 	sw (r5+12),r8
 2005c48:	59 44 00 04 	sw (r10+4),r4
 2005c4c:	58 68 00 08 	sw (r3+8),r8
 2005c50:	b9 80 08 00 	mv r1,r12
 2005c54:	f8 00 04 7a 	calli 2006e3c <__malloc_unlock>
 2005c58:	2b 9d 00 04 	lw ra,(sp+4)
 2005c5c:	2b 8b 00 0c 	lw r11,(sp+12)
 2005c60:	2b 8c 00 08 	lw r12,(sp+8)
 2005c64:	37 9c 00 0c 	addi sp,sp,12
 2005c68:	c3 a0 00 00 	ret
 2005c6c:	28 83 00 08 	lw r3,(r4+8)
 2005c70:	e3 ff ff e0 	bi 2005bf0 <_free_r+0xb4>
 2005c74:	00 c3 00 09 	srui r3,r6,9
 2005c78:	34 01 00 04 	mvi r1,4
 2005c7c:	54 61 00 2b 	bgu r3,r1,2005d28 <_free_r+0x1ec>
 2005c80:	00 c1 00 06 	srui r1,r6,6
 2005c84:	34 21 00 38 	addi r1,r1,56
 2005c88:	3c 22 00 03 	sli r2,r1,3
 2005c8c:	b5 42 10 00 	add r2,r10,r2
 2005c90:	28 44 00 08 	lw r4,(r2+8)
 2005c94:	34 05 ff fc 	mvi r5,-4
 2005c98:	44 82 00 29 	be r4,r2,2005d3c <_free_r+0x200>
 2005c9c:	28 81 00 04 	lw r1,(r4+4)
 2005ca0:	a0 25 08 00 	and r1,r1,r5
 2005ca4:	54 26 00 07 	bgu r1,r6,2005cc0 <_free_r+0x184>
 2005ca8:	28 85 00 0c 	lw r5,(r4+12)
 2005cac:	59 05 00 0c 	sw (r8+12),r5
 2005cb0:	59 04 00 08 	sw (r8+8),r4
 2005cb4:	58 88 00 0c 	sw (r4+12),r8
 2005cb8:	58 a8 00 08 	sw (r5+8),r8
 2005cbc:	e3 ff ff e5 	bi 2005c50 <_free_r+0x114>
 2005cc0:	28 84 00 08 	lw r4,(r4+8)
 2005cc4:	5c 44 ff f6 	bne r2,r4,2005c9c <_free_r+0x160>
 2005cc8:	e3 ff ff f8 	bi 2005ca8 <_free_r+0x16c>
 2005ccc:	20 a1 00 01 	andi r1,r5,0x1
 2005cd0:	b4 e6 20 00 	add r4,r7,r6
 2005cd4:	5c 20 00 08 	bne r1,r0,2005cf4 <_free_r+0x1b8>
 2005cd8:	29 61 ff f8 	lw r1,(r11+-8)
 2005cdc:	c9 01 40 00 	sub r8,r8,r1
 2005ce0:	29 03 00 0c 	lw r3,(r8+12)
 2005ce4:	29 02 00 08 	lw r2,(r8+8)
 2005ce8:	b4 81 20 00 	add r4,r4,r1
 2005cec:	58 62 00 08 	sw (r3+8),r2
 2005cf0:	58 43 00 0c 	sw (r2+12),r3
 2005cf4:	78 01 02 00 	mvhi r1,0x200
 2005cf8:	38 21 b3 08 	ori r1,r1,0xb308
 2005cfc:	28 23 00 00 	lw r3,(r1+0)
 2005d00:	38 82 00 01 	ori r2,r4,0x1
 2005d04:	59 48 00 08 	sw (r10+8),r8
 2005d08:	59 02 00 04 	sw (r8+4),r2
 2005d0c:	54 64 ff d1 	bgu r3,r4,2005c50 <_free_r+0x114>
 2005d10:	78 01 02 00 	mvhi r1,0x200
 2005d14:	38 21 b3 20 	ori r1,r1,0xb320
 2005d18:	28 22 00 00 	lw r2,(r1+0)
 2005d1c:	b9 80 08 00 	mv r1,r12
 2005d20:	fb ff ff 3d 	calli 2005a14 <_malloc_trim_r>
 2005d24:	e3 ff ff cb 	bi 2005c50 <_free_r+0x114>
 2005d28:	34 01 00 14 	mvi r1,20
 2005d2c:	54 61 00 15 	bgu r3,r1,2005d80 <_free_r+0x244>
 2005d30:	34 61 00 5b 	addi r1,r3,91
 2005d34:	3c 22 00 03 	sli r2,r1,3
 2005d38:	e3 ff ff d5 	bi 2005c8c <_free_r+0x150>
 2005d3c:	14 23 00 02 	sri r3,r1,2
 2005d40:	29 42 00 04 	lw r2,(r10+4)
 2005d44:	34 01 00 01 	mvi r1,1
 2005d48:	bc 23 08 00 	sl r1,r1,r3
 2005d4c:	b8 80 28 00 	mv r5,r4
 2005d50:	b8 41 10 00 	or r2,r2,r1
 2005d54:	59 42 00 04 	sw (r10+4),r2
 2005d58:	e3 ff ff d5 	bi 2005cac <_free_r+0x170>
 2005d5c:	58 68 00 0c 	sw (r3+12),r8
 2005d60:	58 68 00 08 	sw (r3+8),r8
 2005d64:	b5 06 08 00 	add r1,r8,r6
 2005d68:	38 c2 00 01 	ori r2,r6,0x1
 2005d6c:	58 26 00 00 	sw (r1+0),r6
 2005d70:	59 03 00 08 	sw (r8+8),r3
 2005d74:	59 02 00 04 	sw (r8+4),r2
 2005d78:	59 03 00 0c 	sw (r8+12),r3
 2005d7c:	e3 ff ff b5 	bi 2005c50 <_free_r+0x114>
 2005d80:	34 01 00 54 	mvi r1,84
 2005d84:	54 61 00 05 	bgu r3,r1,2005d98 <_free_r+0x25c>
 2005d88:	00 c1 00 0c 	srui r1,r6,12
 2005d8c:	34 21 00 6e 	addi r1,r1,110
 2005d90:	3c 22 00 03 	sli r2,r1,3
 2005d94:	e3 ff ff be 	bi 2005c8c <_free_r+0x150>
 2005d98:	34 01 01 54 	mvi r1,340
 2005d9c:	54 61 00 05 	bgu r3,r1,2005db0 <_free_r+0x274>
 2005da0:	00 c1 00 0f 	srui r1,r6,15
 2005da4:	34 21 00 77 	addi r1,r1,119
 2005da8:	3c 22 00 03 	sli r2,r1,3
 2005dac:	e3 ff ff b8 	bi 2005c8c <_free_r+0x150>
 2005db0:	34 01 05 54 	mvi r1,1364
 2005db4:	50 23 00 04 	bgeu r1,r3,2005dc4 <_free_r+0x288>
 2005db8:	34 01 00 7e 	mvi r1,126
 2005dbc:	34 02 03 f0 	mvi r2,1008
 2005dc0:	e3 ff ff b3 	bi 2005c8c <_free_r+0x150>
 2005dc4:	00 c1 00 12 	srui r1,r6,18
 2005dc8:	34 21 00 7c 	addi r1,r1,124
 2005dcc:	3c 22 00 03 	sli r2,r1,3
 2005dd0:	e3 ff ff af 	bi 2005c8c <_free_r+0x150>

02005dd4 <__sfvwrite>:
 2005dd4:	37 9c ff d8 	addi sp,sp,-40
 2005dd8:	5b 8b 00 28 	sw (sp+40),r11
 2005ddc:	5b 8c 00 24 	sw (sp+36),r12
 2005de0:	5b 8d 00 20 	sw (sp+32),r13
 2005de4:	5b 8e 00 1c 	sw (sp+28),r14
 2005de8:	5b 8f 00 18 	sw (sp+24),r15
 2005dec:	5b 90 00 14 	sw (sp+20),r16
 2005df0:	5b 91 00 10 	sw (sp+16),r17
 2005df4:	5b 92 00 0c 	sw (sp+12),r18
 2005df8:	5b 93 00 08 	sw (sp+8),r19
 2005dfc:	5b 9d 00 04 	sw (sp+4),ra
 2005e00:	b8 40 90 00 	mv r18,r2
 2005e04:	28 42 00 08 	lw r2,(r2+8)
 2005e08:	b8 20 68 00 	mv r13,r1
 2005e0c:	44 40 00 42 	be r2,r0,2005f14 <__sfvwrite+0x140>
 2005e10:	2c 22 00 0c 	lhu r2,(r1+12)
 2005e14:	20 41 00 08 	andi r1,r2,0x8
 2005e18:	44 20 00 90 	be r1,r0,2006058 <__sfvwrite+0x284>
 2005e1c:	29 a1 00 10 	lw r1,(r13+16)
 2005e20:	44 20 00 8e 	be r1,r0,2006058 <__sfvwrite+0x284>
 2005e24:	34 0b 00 00 	mvi r11,0
 2005e28:	20 43 00 02 	andi r3,r2,0x2
 2005e2c:	2a 50 00 00 	lw r16,(r18+0)
 2005e30:	b9 60 60 00 	mv r12,r11
 2005e34:	34 0e 04 00 	mvi r14,1024
 2005e38:	5c 6b 00 27 	bne r3,r11,2005ed4 <__sfvwrite+0x100>
 2005e3c:	20 4c 00 01 	andi r12,r2,0x1
 2005e40:	b9 80 70 00 	mv r14,r12
 2005e44:	5d 83 00 4a 	bne r12,r3,2005f6c <__sfvwrite+0x198>
 2005e48:	78 11 02 00 	mvhi r17,0x200
 2005e4c:	3a 31 aa e8 	ori r17,r17,0xaae8
 2005e50:	45 80 00 1a 	be r12,r0,2005eb8 <__sfvwrite+0xe4>
 2005e54:	20 43 02 00 	andi r3,r2,0x200
 2005e58:	29 ab 00 08 	lw r11,(r13+8)
 2005e5c:	44 60 00 85 	be r3,r0,2006070 <__sfvwrite+0x29c>
 2005e60:	55 8b 00 6b 	bgu r12,r11,200600c <__sfvwrite+0x238>
 2005e64:	51 8b 00 02 	bgeu r12,r11,2005e6c <__sfvwrite+0x98>
 2005e68:	b9 80 58 00 	mv r11,r12
 2005e6c:	29 a1 00 00 	lw r1,(r13+0)
 2005e70:	b9 60 18 00 	mv r3,r11
 2005e74:	b9 c0 10 00 	mv r2,r14
 2005e78:	f8 00 03 66 	calli 2006c10 <memmove>
 2005e7c:	29 a2 00 08 	lw r2,(r13+8)
 2005e80:	29 a1 00 00 	lw r1,(r13+0)
 2005e84:	c8 4b 10 00 	sub r2,r2,r11
 2005e88:	b4 2b 08 00 	add r1,r1,r11
 2005e8c:	59 a2 00 08 	sw (r13+8),r2
 2005e90:	59 a1 00 00 	sw (r13+0),r1
 2005e94:	b9 80 58 00 	mv r11,r12
 2005e98:	2a 41 00 08 	lw r1,(r18+8)
 2005e9c:	c8 2b 08 00 	sub r1,r1,r11
 2005ea0:	5a 41 00 08 	sw (r18+8),r1
 2005ea4:	44 20 00 1c 	be r1,r0,2005f14 <__sfvwrite+0x140>
 2005ea8:	c9 8b 60 00 	sub r12,r12,r11
 2005eac:	b5 cb 70 00 	add r14,r14,r11
 2005eb0:	2d a2 00 0c 	lhu r2,(r13+12)
 2005eb4:	5d 80 ff e8 	bne r12,r0,2005e54 <__sfvwrite+0x80>
 2005eb8:	2a 0e 00 00 	lw r14,(r16+0)
 2005ebc:	2a 0c 00 04 	lw r12,(r16+4)
 2005ec0:	36 10 00 08 	addi r16,r16,8
 2005ec4:	e3 ff ff e3 	bi 2005e50 <__sfvwrite+0x7c>
 2005ec8:	2a 0c 00 00 	lw r12,(r16+0)
 2005ecc:	2a 0b 00 04 	lw r11,(r16+4)
 2005ed0:	36 10 00 08 	addi r16,r16,8
 2005ed4:	b9 80 10 00 	mv r2,r12
 2005ed8:	45 60 ff fc 	be r11,r0,2005ec8 <__sfvwrite+0xf4>
 2005edc:	b9 60 18 00 	mv r3,r11
 2005ee0:	29 a1 00 1c 	lw r1,(r13+28)
 2005ee4:	51 cb 00 02 	bgeu r14,r11,2005eec <__sfvwrite+0x118>
 2005ee8:	34 03 04 00 	mvi r3,1024
 2005eec:	29 a4 00 24 	lw r4,(r13+36)
 2005ef0:	d8 80 00 00 	call r4
 2005ef4:	b8 20 10 00 	mv r2,r1
 2005ef8:	c9 61 58 00 	sub r11,r11,r1
 2005efc:	b5 81 60 00 	add r12,r12,r1
 2005f00:	4c 01 00 16 	bge r0,r1,2005f58 <__sfvwrite+0x184>
 2005f04:	2a 41 00 08 	lw r1,(r18+8)
 2005f08:	c8 22 08 00 	sub r1,r1,r2
 2005f0c:	5a 41 00 08 	sw (r18+8),r1
 2005f10:	5c 20 ff f1 	bne r1,r0,2005ed4 <__sfvwrite+0x100>
 2005f14:	34 02 00 00 	mvi r2,0
 2005f18:	b8 40 08 00 	mv r1,r2
 2005f1c:	2b 9d 00 04 	lw ra,(sp+4)
 2005f20:	2b 8b 00 28 	lw r11,(sp+40)
 2005f24:	2b 8c 00 24 	lw r12,(sp+36)
 2005f28:	2b 8d 00 20 	lw r13,(sp+32)
 2005f2c:	2b 8e 00 1c 	lw r14,(sp+28)
 2005f30:	2b 8f 00 18 	lw r15,(sp+24)
 2005f34:	2b 90 00 14 	lw r16,(sp+20)
 2005f38:	2b 91 00 10 	lw r17,(sp+16)
 2005f3c:	2b 92 00 0c 	lw r18,(sp+12)
 2005f40:	2b 93 00 08 	lw r19,(sp+8)
 2005f44:	37 9c 00 28 	addi sp,sp,40
 2005f48:	c3 a0 00 00 	ret
 2005f4c:	2a 21 00 00 	lw r1,(r17+0)
 2005f50:	29 a2 00 10 	lw r2,(r13+16)
 2005f54:	fb ff fe fa 	calli 2005b3c <_free_r>
 2005f58:	2d a1 00 0c 	lhu r1,(r13+12)
 2005f5c:	34 02 ff ff 	mvi r2,-1
 2005f60:	38 21 00 40 	ori r1,r1,0x40
 2005f64:	0d a1 00 0c 	sh (r13+12),r1
 2005f68:	e3 ff ff ec 	bi 2005f18 <__sfvwrite+0x144>
 2005f6c:	b8 60 70 00 	mv r14,r3
 2005f70:	b8 60 88 00 	mv r17,r3
 2005f74:	b8 60 98 00 	mv r19,r3
 2005f78:	b8 60 78 00 	mv r15,r3
 2005f7c:	45 c0 00 1f 	be r14,r0,2005ff8 <__sfvwrite+0x224>
 2005f80:	46 60 00 68 	be r19,r0,2006120 <__sfvwrite+0x34c>
 2005f84:	b9 e0 60 00 	mv r12,r15
 2005f88:	51 cf 00 02 	bgeu r14,r15,2005f90 <__sfvwrite+0x1bc>
 2005f8c:	b9 c0 60 00 	mv r12,r14
 2005f90:	29 a5 00 14 	lw r5,(r13+20)
 2005f94:	29 a1 00 08 	lw r1,(r13+8)
 2005f98:	29 a4 00 00 	lw r4,(r13+0)
 2005f9c:	29 a2 00 10 	lw r2,(r13+16)
 2005fa0:	b4 a1 58 00 	add r11,r5,r1
 2005fa4:	e9 8b 18 00 	cmpg r3,r12,r11
 2005fa8:	f4 82 10 00 	cmpgu r2,r4,r2
 2005fac:	a0 43 10 00 	and r2,r2,r3
 2005fb0:	5c 40 00 51 	bne r2,r0,20060f4 <__sfvwrite+0x320>
 2005fb4:	48 ac 00 3e 	bg r5,r12,20060ac <__sfvwrite+0x2d8>
 2005fb8:	29 a4 00 24 	lw r4,(r13+36)
 2005fbc:	29 a1 00 1c 	lw r1,(r13+28)
 2005fc0:	b8 a0 18 00 	mv r3,r5
 2005fc4:	ba 20 10 00 	mv r2,r17
 2005fc8:	d8 80 00 00 	call r4
 2005fcc:	b8 20 58 00 	mv r11,r1
 2005fd0:	4c 01 ff e2 	bge r0,r1,2005f58 <__sfvwrite+0x184>
 2005fd4:	c9 eb 78 00 	sub r15,r15,r11
 2005fd8:	45 e0 00 42 	be r15,r0,20060e0 <__sfvwrite+0x30c>
 2005fdc:	2a 41 00 08 	lw r1,(r18+8)
 2005fe0:	c8 2b 08 00 	sub r1,r1,r11
 2005fe4:	5a 41 00 08 	sw (r18+8),r1
 2005fe8:	44 20 ff cb 	be r1,r0,2005f14 <__sfvwrite+0x140>
 2005fec:	c9 cb 70 00 	sub r14,r14,r11
 2005ff0:	b6 2b 88 00 	add r17,r17,r11
 2005ff4:	5d c0 ff e3 	bne r14,r0,2005f80 <__sfvwrite+0x1ac>
 2005ff8:	2a 11 00 00 	lw r17,(r16+0)
 2005ffc:	2a 0e 00 04 	lw r14,(r16+4)
 2006000:	34 13 00 00 	mvi r19,0
 2006004:	36 10 00 08 	addi r16,r16,8
 2006008:	e3 ff ff dd 	bi 2005f7c <__sfvwrite+0x1a8>
 200600c:	20 41 00 80 	andi r1,r2,0x80
 2006010:	44 20 ff 95 	be r1,r0,2005e64 <__sfvwrite+0x90>
 2006014:	29 a3 00 10 	lw r3,(r13+16)
 2006018:	29 a4 00 00 	lw r4,(r13+0)
 200601c:	2a 21 00 00 	lw r1,(r17+0)
 2006020:	b8 60 10 00 	mv r2,r3
 2006024:	c8 83 58 00 	sub r11,r4,r3
 2006028:	b5 8b 78 00 	add r15,r12,r11
 200602c:	b9 e0 18 00 	mv r3,r15
 2006030:	f8 00 06 6c 	calli 20079e0 <_realloc_r>
 2006034:	b8 20 10 00 	mv r2,r1
 2006038:	44 20 ff c5 	be r1,r0,2005f4c <__sfvwrite+0x178>
 200603c:	b4 2b 08 00 	add r1,r1,r11
 2006040:	59 a1 00 00 	sw (r13+0),r1
 2006044:	59 af 00 14 	sw (r13+20),r15
 2006048:	59 a2 00 10 	sw (r13+16),r2
 200604c:	59 ac 00 08 	sw (r13+8),r12
 2006050:	b9 80 58 00 	mv r11,r12
 2006054:	e3 ff ff 84 	bi 2005e64 <__sfvwrite+0x90>
 2006058:	b9 a0 08 00 	mv r1,r13
 200605c:	fb ff f7 f1 	calli 2004020 <__swsetup>
 2006060:	34 02 ff ff 	mvi r2,-1
 2006064:	5c 20 ff ad 	bne r1,r0,2005f18 <__sfvwrite+0x144>
 2006068:	2d a2 00 0c 	lhu r2,(r13+12)
 200606c:	e3 ff ff 6e 	bi 2005e24 <__sfvwrite+0x50>
 2006070:	29 a4 00 00 	lw r4,(r13+0)
 2006074:	29 a1 00 10 	lw r1,(r13+16)
 2006078:	f5 8b 10 00 	cmpgu r2,r12,r11
 200607c:	f4 81 08 00 	cmpgu r1,r4,r1
 2006080:	a0 22 78 00 	and r15,r1,r2
 2006084:	5d e3 00 3c 	bne r15,r3,2006174 <__sfvwrite+0x3a0>
 2006088:	29 a3 00 14 	lw r3,(r13+20)
 200608c:	54 6c 00 2e 	bgu r3,r12,2006144 <__sfvwrite+0x370>
 2006090:	29 a4 00 24 	lw r4,(r13+36)
 2006094:	29 a1 00 1c 	lw r1,(r13+28)
 2006098:	b9 c0 10 00 	mv r2,r14
 200609c:	d8 80 00 00 	call r4
 20060a0:	b8 20 58 00 	mv r11,r1
 20060a4:	4d e1 ff ad 	bge r15,r1,2005f58 <__sfvwrite+0x184>
 20060a8:	e3 ff ff 7c 	bi 2005e98 <__sfvwrite+0xc4>
 20060ac:	ba 20 10 00 	mv r2,r17
 20060b0:	b8 80 08 00 	mv r1,r4
 20060b4:	b9 80 18 00 	mv r3,r12
 20060b8:	f8 00 02 d6 	calli 2006c10 <memmove>
 20060bc:	29 a2 00 08 	lw r2,(r13+8)
 20060c0:	29 a1 00 00 	lw r1,(r13+0)
 20060c4:	b9 80 58 00 	mv r11,r12
 20060c8:	c8 4c 10 00 	sub r2,r2,r12
 20060cc:	b4 2c 08 00 	add r1,r1,r12
 20060d0:	59 a2 00 08 	sw (r13+8),r2
 20060d4:	59 a1 00 00 	sw (r13+0),r1
 20060d8:	c9 eb 78 00 	sub r15,r15,r11
 20060dc:	5d e0 ff c0 	bne r15,r0,2005fdc <__sfvwrite+0x208>
 20060e0:	b9 a0 08 00 	mv r1,r13
 20060e4:	fb ff fd b9 	calli 20057c8 <fflush>
 20060e8:	5c 2f ff 9c 	bne r1,r15,2005f58 <__sfvwrite+0x184>
 20060ec:	b9 e0 98 00 	mv r19,r15
 20060f0:	e3 ff ff bb 	bi 2005fdc <__sfvwrite+0x208>
 20060f4:	ba 20 10 00 	mv r2,r17
 20060f8:	b8 80 08 00 	mv r1,r4
 20060fc:	b9 60 18 00 	mv r3,r11
 2006100:	f8 00 02 c4 	calli 2006c10 <memmove>
 2006104:	29 a2 00 00 	lw r2,(r13+0)
 2006108:	b9 a0 08 00 	mv r1,r13
 200610c:	b4 4b 10 00 	add r2,r2,r11
 2006110:	59 a2 00 00 	sw (r13+0),r2
 2006114:	fb ff fd ad 	calli 20057c8 <fflush>
 2006118:	44 20 ff af 	be r1,r0,2005fd4 <__sfvwrite+0x200>
 200611c:	e3 ff ff 8f 	bi 2005f58 <__sfvwrite+0x184>
 2006120:	ba 20 08 00 	mv r1,r17
 2006124:	34 02 00 0a 	mvi r2,10
 2006128:	b9 c0 18 00 	mv r3,r14
 200612c:	f8 00 02 83 	calli 2006b38 <memchr>
 2006130:	44 33 00 1c 	be r1,r19,20061a0 <__sfvwrite+0x3cc>
 2006134:	34 21 00 01 	addi r1,r1,1
 2006138:	c8 31 78 00 	sub r15,r1,r17
 200613c:	34 13 00 01 	mvi r19,1
 2006140:	e3 ff ff 91 	bi 2005f84 <__sfvwrite+0x1b0>
 2006144:	b9 c0 10 00 	mv r2,r14
 2006148:	b8 80 08 00 	mv r1,r4
 200614c:	b9 80 18 00 	mv r3,r12
 2006150:	f8 00 02 b0 	calli 2006c10 <memmove>
 2006154:	29 a2 00 08 	lw r2,(r13+8)
 2006158:	29 a1 00 00 	lw r1,(r13+0)
 200615c:	b9 80 58 00 	mv r11,r12
 2006160:	c8 4c 10 00 	sub r2,r2,r12
 2006164:	b4 2c 08 00 	add r1,r1,r12
 2006168:	59 a2 00 08 	sw (r13+8),r2
 200616c:	59 a1 00 00 	sw (r13+0),r1
 2006170:	e3 ff ff 4a 	bi 2005e98 <__sfvwrite+0xc4>
 2006174:	b9 c0 10 00 	mv r2,r14
 2006178:	b8 80 08 00 	mv r1,r4
 200617c:	b9 60 18 00 	mv r3,r11
 2006180:	f8 00 02 a4 	calli 2006c10 <memmove>
 2006184:	29 a2 00 00 	lw r2,(r13+0)
 2006188:	b9 a0 08 00 	mv r1,r13
 200618c:	b4 4b 10 00 	add r2,r2,r11
 2006190:	59 a2 00 00 	sw (r13+0),r2
 2006194:	fb ff fd 8d 	calli 20057c8 <fflush>
 2006198:	44 20 ff 40 	be r1,r0,2005e98 <__sfvwrite+0xc4>
 200619c:	e3 ff ff 6f 	bi 2005f58 <__sfvwrite+0x184>
 20061a0:	35 cf 00 01 	addi r15,r14,1
 20061a4:	34 13 00 01 	mvi r19,1
 20061a8:	e3 ff ff 77 	bi 2005f84 <__sfvwrite+0x1b0>

020061ac <_fwalk>:
 20061ac:	37 9c ff e0 	addi sp,sp,-32
 20061b0:	5b 8b 00 20 	sw (sp+32),r11
 20061b4:	5b 8c 00 1c 	sw (sp+28),r12
 20061b8:	5b 8d 00 18 	sw (sp+24),r13
 20061bc:	5b 8e 00 14 	sw (sp+20),r14
 20061c0:	5b 8f 00 10 	sw (sp+16),r15
 20061c4:	5b 90 00 0c 	sw (sp+12),r16
 20061c8:	5b 91 00 08 	sw (sp+8),r17
 20061cc:	5b 9d 00 04 	sw (sp+4),ra
 20061d0:	34 0f 00 00 	mvi r15,0
 20061d4:	34 2e 02 e0 	addi r14,r1,736
 20061d8:	b8 40 88 00 	mv r17,r2
 20061dc:	fb ff fe 04 	calli 20059ec <__sfp_lock_acquire>
 20061e0:	45 cf 00 12 	be r14,r15,2006228 <_fwalk+0x7c>
 20061e4:	34 10 ff ff 	mvi r16,-1
 20061e8:	29 cd 00 04 	lw r13,(r14+4)
 20061ec:	29 cb 00 08 	lw r11,(r14+8)
 20061f0:	4c 0d 00 0c 	bge r0,r13,2006220 <_fwalk+0x74>
 20061f4:	34 0c 00 00 	mvi r12,0
 20061f8:	1d 61 00 0c 	lh r1,(r11+12)
 20061fc:	35 8c 00 01 	addi r12,r12,1
 2006200:	44 20 00 06 	be r1,r0,2006218 <_fwalk+0x6c>
 2006204:	1d 62 00 0e 	lh r2,(r11+14)
 2006208:	b9 60 08 00 	mv r1,r11
 200620c:	44 50 00 03 	be r2,r16,2006218 <_fwalk+0x6c>
 2006210:	da 20 00 00 	call r17
 2006214:	b9 e1 78 00 	or r15,r15,r1
 2006218:	35 6b 00 5c 	addi r11,r11,92
 200621c:	5d 8d ff f7 	bne r12,r13,20061f8 <_fwalk+0x4c>
 2006220:	29 ce 00 00 	lw r14,(r14+0)
 2006224:	5d c0 ff f1 	bne r14,r0,20061e8 <_fwalk+0x3c>
 2006228:	fb ff fd f2 	calli 20059f0 <__sfp_lock_release>
 200622c:	b9 e0 08 00 	mv r1,r15
 2006230:	2b 9d 00 04 	lw ra,(sp+4)
 2006234:	2b 8b 00 20 	lw r11,(sp+32)
 2006238:	2b 8c 00 1c 	lw r12,(sp+28)
 200623c:	2b 8d 00 18 	lw r13,(sp+24)
 2006240:	2b 8e 00 14 	lw r14,(sp+20)
 2006244:	2b 8f 00 10 	lw r15,(sp+16)
 2006248:	2b 90 00 0c 	lw r16,(sp+12)
 200624c:	2b 91 00 08 	lw r17,(sp+8)
 2006250:	37 9c 00 20 	addi sp,sp,32
 2006254:	c3 a0 00 00 	ret

02006258 <localeconv>:
 2006258:	78 01 02 00 	mvhi r1,0x200
 200625c:	38 21 a4 a8 	ori r1,r1,0xa4a8
 2006260:	c3 a0 00 00 	ret

02006264 <__smakebuf>:
 2006264:	37 9c ff b4 	addi sp,sp,-76
 2006268:	5b 8b 00 10 	sw (sp+16),r11
 200626c:	5b 8c 00 0c 	sw (sp+12),r12
 2006270:	5b 8d 00 08 	sw (sp+8),r13
 2006274:	5b 9d 00 04 	sw (sp+4),ra
 2006278:	b8 20 58 00 	mv r11,r1
 200627c:	1c 21 00 0c 	lh r1,(r1+12)
 2006280:	20 23 00 02 	andi r3,r1,0x2
 2006284:	5c 60 00 27 	bne r3,r0,2006320 <__smakebuf+0xbc>
 2006288:	1d 62 00 0e 	lh r2,(r11+14)
 200628c:	48 62 00 09 	bg r3,r2,20062b0 <__smakebuf+0x4c>
 2006290:	78 0c 02 00 	mvhi r12,0x200
 2006294:	39 8c aa e8 	ori r12,r12,0xaae8
 2006298:	29 81 00 00 	lw r1,(r12+0)
 200629c:	37 83 00 14 	addi r3,sp,20
 20062a0:	f8 00 08 d3 	calli 20085ec <_fstat_r>
 20062a4:	4c 20 00 2a 	bge r1,r0,200634c <__smakebuf+0xe8>
 20062a8:	1d 61 00 0c 	lh r1,(r11+12)
 20062ac:	e0 00 00 03 	bi 20062b8 <__smakebuf+0x54>
 20062b0:	78 0c 02 00 	mvhi r12,0x200
 20062b4:	39 8c aa e8 	ori r12,r12,0xaae8
 20062b8:	38 21 08 00 	ori r1,r1,0x800
 20062bc:	0d 61 00 0c 	sh (r11+12),r1
 20062c0:	34 0d 00 00 	mvi r13,0
 20062c4:	29 81 00 00 	lw r1,(r12+0)
 20062c8:	34 02 04 00 	mvi r2,1024
 20062cc:	f8 00 00 43 	calli 20063d8 <_malloc_r>
 20062d0:	b8 20 20 00 	mv r4,r1
 20062d4:	44 20 00 2e 	be r1,r0,200638c <__smakebuf+0x128>
 20062d8:	2d 62 00 0c 	lhu r2,(r11+12)
 20062dc:	29 83 00 00 	lw r3,(r12+0)
 20062e0:	78 01 02 00 	mvhi r1,0x200
 20062e4:	38 21 59 f4 	ori r1,r1,0x59f4
 20062e8:	38 42 00 80 	ori r2,r2,0x80
 20062ec:	58 61 00 3c 	sw (r3+60),r1
 20062f0:	34 01 04 00 	mvi r1,1024
 20062f4:	0d 62 00 0c 	sh (r11+12),r2
 20062f8:	59 64 00 10 	sw (r11+16),r4
 20062fc:	59 61 00 14 	sw (r11+20),r1
 2006300:	59 64 00 00 	sw (r11+0),r4
 2006304:	5d a0 00 1b 	bne r13,r0,2006370 <__smakebuf+0x10c>
 2006308:	2b 9d 00 04 	lw ra,(sp+4)
 200630c:	2b 8b 00 10 	lw r11,(sp+16)
 2006310:	2b 8c 00 0c 	lw r12,(sp+12)
 2006314:	2b 8d 00 08 	lw r13,(sp+8)
 2006318:	37 9c 00 4c 	addi sp,sp,76
 200631c:	c3 a0 00 00 	ret
 2006320:	35 62 00 43 	addi r2,r11,67
 2006324:	34 01 00 01 	mvi r1,1
 2006328:	59 61 00 14 	sw (r11+20),r1
 200632c:	59 62 00 10 	sw (r11+16),r2
 2006330:	59 62 00 00 	sw (r11+0),r2
 2006334:	2b 9d 00 04 	lw ra,(sp+4)
 2006338:	2b 8b 00 10 	lw r11,(sp+16)
 200633c:	2b 8c 00 0c 	lw r12,(sp+12)
 2006340:	2b 8d 00 08 	lw r13,(sp+8)
 2006344:	37 9c 00 4c 	addi sp,sp,76
 2006348:	c3 a0 00 00 	ret
 200634c:	2b 81 00 18 	lw r1,(sp+24)
 2006350:	38 02 80 00 	mvu r2,0x8000
 2006354:	20 21 f0 00 	andi r1,r1,0xf000
 2006358:	64 2d 20 00 	cmpei r13,r1,8192
 200635c:	44 22 00 15 	be r1,r2,20063b0 <__smakebuf+0x14c>
 2006360:	2d 61 00 0c 	lhu r1,(r11+12)
 2006364:	38 21 08 00 	ori r1,r1,0x800
 2006368:	0d 61 00 0c 	sh (r11+12),r1
 200636c:	e3 ff ff d6 	bi 20062c4 <__smakebuf+0x60>
 2006370:	1d 61 00 0e 	lh r1,(r11+14)
 2006374:	f8 00 0f 01 	calli 2009f78 <isatty>
 2006378:	44 20 ff e4 	be r1,r0,2006308 <__smakebuf+0xa4>
 200637c:	2d 61 00 0c 	lhu r1,(r11+12)
 2006380:	38 21 00 01 	ori r1,r1,0x1
 2006384:	0d 61 00 0c 	sh (r11+12),r1
 2006388:	e3 ff ff e0 	bi 2006308 <__smakebuf+0xa4>
 200638c:	2d 61 00 0c 	lhu r1,(r11+12)
 2006390:	35 63 00 43 	addi r3,r11,67
 2006394:	34 02 00 01 	mvi r2,1
 2006398:	38 21 00 02 	ori r1,r1,0x2
 200639c:	59 62 00 14 	sw (r11+20),r2
 20063a0:	0d 61 00 0c 	sh (r11+12),r1
 20063a4:	59 63 00 10 	sw (r11+16),r3
 20063a8:	59 63 00 00 	sw (r11+0),r3
 20063ac:	e3 ff ff d7 	bi 2006308 <__smakebuf+0xa4>
 20063b0:	29 62 00 28 	lw r2,(r11+40)
 20063b4:	78 01 02 00 	mvhi r1,0x200
 20063b8:	38 21 80 84 	ori r1,r1,0x8084
 20063bc:	5c 41 ff e9 	bne r2,r1,2006360 <__smakebuf+0xfc>
 20063c0:	2d 61 00 0c 	lhu r1,(r11+12)
 20063c4:	34 02 04 00 	mvi r2,1024
 20063c8:	59 62 00 4c 	sw (r11+76),r2
 20063cc:	b8 22 08 00 	or r1,r1,r2
 20063d0:	0d 61 00 0c 	sh (r11+12),r1
 20063d4:	e3 ff ff bc 	bi 20062c4 <__smakebuf+0x60>

020063d8 <_malloc_r>:
 20063d8:	37 9c ff d8 	addi sp,sp,-40
 20063dc:	5b 8b 00 28 	sw (sp+40),r11
 20063e0:	5b 8c 00 24 	sw (sp+36),r12
 20063e4:	5b 8d 00 20 	sw (sp+32),r13
 20063e8:	5b 8e 00 1c 	sw (sp+28),r14
 20063ec:	5b 8f 00 18 	sw (sp+24),r15
 20063f0:	5b 90 00 14 	sw (sp+20),r16
 20063f4:	5b 91 00 10 	sw (sp+16),r17
 20063f8:	5b 92 00 0c 	sw (sp+12),r18
 20063fc:	5b 93 00 08 	sw (sp+8),r19
 2006400:	5b 9d 00 04 	sw (sp+4),ra
 2006404:	b8 40 28 00 	mv r5,r2
 2006408:	b8 20 68 00 	mv r13,r1
 200640c:	34 42 00 0b 	addi r2,r2,11
 2006410:	34 01 00 16 	mvi r1,22
 2006414:	54 41 00 14 	bgu r2,r1,2006464 <_malloc_r+0x8c>
 2006418:	34 0c 00 10 	mvi r12,16
 200641c:	f4 ac 08 00 	cmpgu r1,r5,r12
 2006420:	34 03 00 00 	mvi r3,0
 2006424:	34 02 00 00 	mvi r2,0
 2006428:	b8 61 08 00 	or r1,r3,r1
 200642c:	44 22 00 15 	be r1,r2,2006480 <_malloc_r+0xa8>
 2006430:	b8 40 08 00 	mv r1,r2
 2006434:	2b 9d 00 04 	lw ra,(sp+4)
 2006438:	2b 8b 00 28 	lw r11,(sp+40)
 200643c:	2b 8c 00 24 	lw r12,(sp+36)
 2006440:	2b 8d 00 20 	lw r13,(sp+32)
 2006444:	2b 8e 00 1c 	lw r14,(sp+28)
 2006448:	2b 8f 00 18 	lw r15,(sp+24)
 200644c:	2b 90 00 14 	lw r16,(sp+20)
 2006450:	2b 91 00 10 	lw r17,(sp+16)
 2006454:	2b 92 00 0c 	lw r18,(sp+12)
 2006458:	2b 93 00 08 	lw r19,(sp+8)
 200645c:	37 9c 00 28 	addi sp,sp,40
 2006460:	c3 a0 00 00 	ret
 2006464:	34 01 ff f8 	mvi r1,-8
 2006468:	a0 41 60 00 	and r12,r2,r1
 200646c:	01 83 00 1f 	srui r3,r12,31
 2006470:	f4 ac 08 00 	cmpgu r1,r5,r12
 2006474:	34 02 00 00 	mvi r2,0
 2006478:	b8 61 08 00 	or r1,r3,r1
 200647c:	5c 22 ff ed 	bne r1,r2,2006430 <_malloc_r+0x58>
 2006480:	b9 a0 08 00 	mv r1,r13
 2006484:	f8 00 02 6d 	calli 2006e38 <__malloc_lock>
 2006488:	34 01 01 f7 	mvi r1,503
 200648c:	55 81 00 16 	bgu r12,r1,20064e4 <_malloc_r+0x10c>
 2006490:	78 07 02 00 	mvhi r7,0x200
 2006494:	38 e7 af 00 	ori r7,r7,0xaf00
 2006498:	b5 87 08 00 	add r1,r12,r7
 200649c:	28 2b 00 0c 	lw r11,(r1+12)
 20064a0:	01 82 00 03 	srui r2,r12,3
 20064a4:	45 61 00 f3 	be r11,r1,2006870 <_malloc_r+0x498>
 20064a8:	29 63 00 04 	lw r3,(r11+4)
 20064ac:	34 01 ff fc 	mvi r1,-4
 20064b0:	29 65 00 0c 	lw r5,(r11+12)
 20064b4:	a0 61 18 00 	and r3,r3,r1
 20064b8:	b5 63 18 00 	add r3,r11,r3
 20064bc:	28 62 00 04 	lw r2,(r3+4)
 20064c0:	29 64 00 08 	lw r4,(r11+8)
 20064c4:	b9 a0 08 00 	mv r1,r13
 20064c8:	38 42 00 01 	ori r2,r2,0x1
 20064cc:	58 62 00 04 	sw (r3+4),r2
 20064d0:	58 a4 00 08 	sw (r5+8),r4
 20064d4:	58 85 00 0c 	sw (r4+12),r5
 20064d8:	f8 00 02 59 	calli 2006e3c <__malloc_unlock>
 20064dc:	35 62 00 08 	addi r2,r11,8
 20064e0:	e3 ff ff d4 	bi 2006430 <_malloc_r+0x58>
 20064e4:	01 82 00 09 	srui r2,r12,9
 20064e8:	5c 40 00 81 	bne r2,r0,20066ec <_malloc_r+0x314>
 20064ec:	01 82 00 03 	srui r2,r12,3
 20064f0:	3c 41 00 03 	sli r1,r2,3
 20064f4:	78 07 02 00 	mvhi r7,0x200
 20064f8:	38 e7 af 00 	ori r7,r7,0xaf00
 20064fc:	b4 27 20 00 	add r4,r1,r7
 2006500:	28 8b 00 0c 	lw r11,(r4+12)
 2006504:	44 8b 00 11 	be r4,r11,2006548 <_malloc_r+0x170>
 2006508:	29 61 00 04 	lw r1,(r11+4)
 200650c:	34 05 ff fc 	mvi r5,-4
 2006510:	34 08 00 0f 	mvi r8,15
 2006514:	a0 25 08 00 	and r1,r1,r5
 2006518:	c8 2c 18 00 	sub r3,r1,r12
 200651c:	48 68 00 0a 	bg r3,r8,2006544 <_malloc_r+0x16c>
 2006520:	4c 60 00 26 	bge r3,r0,20065b8 <_malloc_r+0x1e0>
 2006524:	b8 a0 30 00 	mv r6,r5
 2006528:	b9 00 28 00 	mv r5,r8
 200652c:	29 6b 00 0c 	lw r11,(r11+12)
 2006530:	44 8b 00 06 	be r4,r11,2006548 <_malloc_r+0x170>
 2006534:	29 61 00 04 	lw r1,(r11+4)
 2006538:	a0 26 08 00 	and r1,r1,r6
 200653c:	c8 2c 18 00 	sub r3,r1,r12
 2006540:	4c a3 00 1d 	bge r5,r3,20065b4 <_malloc_r+0x1dc>
 2006544:	34 42 ff ff 	addi r2,r2,-1
 2006548:	34 4a 00 01 	addi r10,r2,1
 200654c:	78 06 02 00 	mvhi r6,0x200
 2006550:	38 c6 af 08 	ori r6,r6,0xaf08
 2006554:	28 cb 00 08 	lw r11,(r6+8)
 2006558:	b8 e0 70 00 	mv r14,r7
 200655c:	44 cb 00 3f 	be r6,r11,2006658 <_malloc_r+0x280>
 2006560:	29 61 00 04 	lw r1,(r11+4)
 2006564:	34 02 ff fc 	mvi r2,-4
 2006568:	a0 22 10 00 	and r2,r1,r2
 200656c:	c8 4c 28 00 	sub r5,r2,r12
 2006570:	34 01 00 0f 	mvi r1,15
 2006574:	4c 25 00 1d 	bge r1,r5,20065e8 <_malloc_r+0x210>
 2006578:	39 82 00 01 	ori r2,r12,0x1
 200657c:	b5 6c 08 00 	add r1,r11,r12
 2006580:	59 62 00 04 	sw (r11+4),r2
 2006584:	b4 25 10 00 	add r2,r1,r5
 2006588:	58 c1 00 0c 	sw (r6+12),r1
 200658c:	58 c1 00 08 	sw (r6+8),r1
 2006590:	38 a3 00 01 	ori r3,r5,0x1
 2006594:	58 45 00 00 	sw (r2+0),r5
 2006598:	58 26 00 08 	sw (r1+8),r6
 200659c:	58 23 00 04 	sw (r1+4),r3
 20065a0:	58 26 00 0c 	sw (r1+12),r6
 20065a4:	b9 a0 08 00 	mv r1,r13
 20065a8:	f8 00 02 25 	calli 2006e3c <__malloc_unlock>
 20065ac:	35 62 00 08 	addi r2,r11,8
 20065b0:	e3 ff ff a0 	bi 2006430 <_malloc_r+0x58>
 20065b4:	48 03 ff de 	bg r0,r3,200652c <_malloc_r+0x154>
 20065b8:	b5 61 18 00 	add r3,r11,r1
 20065bc:	28 61 00 04 	lw r1,(r3+4)
 20065c0:	29 62 00 08 	lw r2,(r11+8)
 20065c4:	29 64 00 0c 	lw r4,(r11+12)
 20065c8:	38 21 00 01 	ori r1,r1,0x1
 20065cc:	58 61 00 04 	sw (r3+4),r1
 20065d0:	58 82 00 08 	sw (r4+8),r2
 20065d4:	58 44 00 0c 	sw (r2+12),r4
 20065d8:	b9 a0 08 00 	mv r1,r13
 20065dc:	f8 00 02 18 	calli 2006e3c <__malloc_unlock>
 20065e0:	35 62 00 08 	addi r2,r11,8
 20065e4:	e3 ff ff 93 	bi 2006430 <_malloc_r+0x58>
 20065e8:	58 c6 00 0c 	sw (r6+12),r6
 20065ec:	58 c6 00 08 	sw (r6+8),r6
 20065f0:	48 05 00 09 	bg r0,r5,2006614 <_malloc_r+0x23c>
 20065f4:	b5 62 18 00 	add r3,r11,r2
 20065f8:	28 62 00 04 	lw r2,(r3+4)
 20065fc:	b9 a0 08 00 	mv r1,r13
 2006600:	38 42 00 01 	ori r2,r2,0x1
 2006604:	58 62 00 04 	sw (r3+4),r2
 2006608:	f8 00 02 0d 	calli 2006e3c <__malloc_unlock>
 200660c:	35 62 00 08 	addi r2,r11,8
 2006610:	e3 ff ff 88 	bi 2006430 <_malloc_r+0x58>
 2006614:	34 01 01 ff 	mvi r1,511
 2006618:	54 41 00 74 	bgu r2,r1,20067e8 <_malloc_r+0x410>
 200661c:	00 42 00 03 	srui r2,r2,3
 2006620:	28 e3 00 04 	lw r3,(r7+4)
 2006624:	3c 44 00 03 	sli r4,r2,3
 2006628:	14 42 00 02 	sri r2,r2,2
 200662c:	b4 e4 20 00 	add r4,r7,r4
 2006630:	28 85 00 08 	lw r5,(r4+8)
 2006634:	34 01 00 01 	mvi r1,1
 2006638:	bc 22 08 00 	sl r1,r1,r2
 200663c:	59 64 00 0c 	sw (r11+12),r4
 2006640:	b8 61 18 00 	or r3,r3,r1
 2006644:	59 65 00 08 	sw (r11+8),r5
 2006648:	b8 e0 70 00 	mv r14,r7
 200664c:	58 ab 00 0c 	sw (r5+12),r11
 2006650:	58 e3 00 04 	sw (r7+4),r3
 2006654:	58 8b 00 08 	sw (r4+8),r11
 2006658:	15 42 00 02 	sri r2,r10,2
 200665c:	34 01 00 01 	mvi r1,1
 2006660:	29 c4 00 04 	lw r4,(r14+4)
 2006664:	bc 22 18 00 	sl r3,r1,r2
 2006668:	54 64 00 2c 	bgu r3,r4,2006718 <_malloc_r+0x340>
 200666c:	a0 64 28 00 	and r5,r3,r4
 2006670:	5c a0 00 0b 	bne r5,r0,200669c <_malloc_r+0x2c4>
 2006674:	b4 63 18 00 	add r3,r3,r3
 2006678:	34 01 ff fc 	mvi r1,-4
 200667c:	a1 41 08 00 	and r1,r10,r1
 2006680:	a0 64 10 00 	and r2,r3,r4
 2006684:	34 2a 00 04 	addi r10,r1,4
 2006688:	5c 45 00 05 	bne r2,r5,200669c <_malloc_r+0x2c4>
 200668c:	b4 63 18 00 	add r3,r3,r3
 2006690:	a0 64 08 00 	and r1,r3,r4
 2006694:	35 4a 00 04 	addi r10,r10,4
 2006698:	44 20 ff fd 	be r1,r0,200668c <_malloc_r+0x2b4>
 200669c:	34 07 ff fc 	mvi r7,-4
 20066a0:	34 08 00 0f 	mvi r8,15
 20066a4:	3d 41 00 03 	sli r1,r10,3
 20066a8:	b9 40 48 00 	mv r9,r10
 20066ac:	b5 c1 20 00 	add r4,r14,r1
 20066b0:	b8 80 10 00 	mv r2,r4
 20066b4:	28 4b 00 0c 	lw r11,(r2+12)
 20066b8:	44 4b 00 66 	be r2,r11,2006850 <_malloc_r+0x478>
 20066bc:	29 61 00 04 	lw r1,(r11+4)
 20066c0:	a0 27 08 00 	and r1,r1,r7
 20066c4:	c8 2c 28 00 	sub r5,r1,r12
 20066c8:	4d 05 00 5e 	bge r8,r5,2006840 <_malloc_r+0x468>
 20066cc:	29 63 00 0c 	lw r3,(r11+12)
 20066d0:	29 62 00 08 	lw r2,(r11+8)
 20066d4:	39 84 00 01 	ori r4,r12,0x1
 20066d8:	b5 6c 08 00 	add r1,r11,r12
 20066dc:	58 62 00 08 	sw (r3+8),r2
 20066e0:	58 43 00 0c 	sw (r2+12),r3
 20066e4:	59 64 00 04 	sw (r11+4),r4
 20066e8:	e3 ff ff a7 	bi 2006584 <_malloc_r+0x1ac>
 20066ec:	34 01 00 04 	mvi r1,4
 20066f0:	54 41 00 05 	bgu r2,r1,2006704 <_malloc_r+0x32c>
 20066f4:	01 81 00 06 	srui r1,r12,6
 20066f8:	34 22 00 38 	addi r2,r1,56
 20066fc:	3c 41 00 03 	sli r1,r2,3
 2006700:	e3 ff ff 7d 	bi 20064f4 <_malloc_r+0x11c>
 2006704:	34 01 00 14 	mvi r1,20
 2006708:	54 41 00 5f 	bgu r2,r1,2006884 <_malloc_r+0x4ac>
 200670c:	34 42 00 5b 	addi r2,r2,91
 2006710:	3c 41 00 03 	sli r1,r2,3
 2006714:	e3 ff ff 78 	bi 20064f4 <_malloc_r+0x11c>
 2006718:	29 cb 00 08 	lw r11,(r14+8)
 200671c:	34 01 ff fc 	mvi r1,-4
 2006720:	29 62 00 04 	lw r2,(r11+4)
 2006724:	a0 41 90 00 	and r18,r2,r1
 2006728:	ca 4c 18 00 	sub r3,r18,r12
 200672c:	34 02 00 0f 	mvi r2,15
 2006730:	ec 43 10 00 	cmpge r2,r2,r3
 2006734:	f5 92 08 00 	cmpgu r1,r12,r18
 2006738:	b8 22 08 00 	or r1,r1,r2
 200673c:	44 20 00 21 	be r1,r0,20067c0 <_malloc_r+0x3e8>
 2006740:	78 01 02 00 	mvhi r1,0x200
 2006744:	38 21 b3 20 	ori r1,r1,0xb320
 2006748:	78 11 02 00 	mvhi r17,0x200
 200674c:	28 22 00 00 	lw r2,(r1+0)
 2006750:	3a 31 b3 0c 	ori r17,r17,0xb30c
 2006754:	2a 23 00 00 	lw r3,(r17+0)
 2006758:	34 42 00 10 	addi r2,r2,16
 200675c:	34 01 ff ff 	mvi r1,-1
 2006760:	b4 4c 80 00 	add r16,r2,r12
 2006764:	44 61 00 04 	be r3,r1,2006774 <_malloc_r+0x39c>
 2006768:	36 02 0f ff 	addi r2,r16,4095
 200676c:	34 01 f0 00 	mvi r1,-4096
 2006770:	a0 41 80 00 	and r16,r2,r1
 2006774:	b9 a0 08 00 	mv r1,r13
 2006778:	ba 00 10 00 	mv r2,r16
 200677c:	f8 00 06 20 	calli 2007ffc <_sbrk_r>
 2006780:	b8 20 78 00 	mv r15,r1
 2006784:	34 01 ff ff 	mvi r1,-1
 2006788:	45 e1 00 04 	be r15,r1,2006798 <_malloc_r+0x3c0>
 200678c:	b5 72 18 00 	add r3,r11,r18
 2006790:	51 e3 00 49 	bgeu r15,r3,20068b4 <_malloc_r+0x4dc>
 2006794:	45 6e 00 c5 	be r11,r14,2006aa8 <_malloc_r+0x6d0>
 2006798:	29 cb 00 08 	lw r11,(r14+8)
 200679c:	34 02 ff fc 	mvi r2,-4
 20067a0:	29 61 00 04 	lw r1,(r11+4)
 20067a4:	a0 22 08 00 	and r1,r1,r2
 20067a8:	c8 2c 18 00 	sub r3,r1,r12
 20067ac:	34 02 00 0f 	mvi r2,15
 20067b0:	f5 81 08 00 	cmpgu r1,r12,r1
 20067b4:	ec 43 10 00 	cmpge r2,r2,r3
 20067b8:	b8 22 08 00 	or r1,r1,r2
 20067bc:	5c 20 00 d7 	bne r1,r0,2006b18 <_malloc_r+0x740>
 20067c0:	39 81 00 01 	ori r1,r12,0x1
 20067c4:	b5 6c 10 00 	add r2,r11,r12
 20067c8:	59 61 00 04 	sw (r11+4),r1
 20067cc:	38 61 00 01 	ori r1,r3,0x1
 20067d0:	58 41 00 04 	sw (r2+4),r1
 20067d4:	59 c2 00 08 	sw (r14+8),r2
 20067d8:	b9 a0 08 00 	mv r1,r13
 20067dc:	f8 00 01 98 	calli 2006e3c <__malloc_unlock>
 20067e0:	35 62 00 08 	addi r2,r11,8
 20067e4:	e3 ff ff 13 	bi 2006430 <_malloc_r+0x58>
 20067e8:	00 43 00 09 	srui r3,r2,9
 20067ec:	34 01 00 04 	mvi r1,4
 20067f0:	54 61 00 5b 	bgu r3,r1,200695c <_malloc_r+0x584>
 20067f4:	00 41 00 06 	srui r1,r2,6
 20067f8:	34 21 00 38 	addi r1,r1,56
 20067fc:	3c 24 00 03 	sli r4,r1,3
 2006800:	b4 e4 28 00 	add r5,r7,r4
 2006804:	28 a8 00 08 	lw r8,(r5+8)
 2006808:	b8 e0 70 00 	mv r14,r7
 200680c:	34 09 ff fc 	mvi r9,-4
 2006810:	b9 00 20 00 	mv r4,r8
 2006814:	45 05 00 77 	be r8,r5,20069f0 <_malloc_r+0x618>
 2006818:	28 81 00 04 	lw r1,(r4+4)
 200681c:	a0 29 08 00 	and r1,r1,r9
 2006820:	54 22 00 11 	bgu r1,r2,2006864 <_malloc_r+0x48c>
 2006824:	b8 80 40 00 	mv r8,r4
 2006828:	28 84 00 0c 	lw r4,(r4+12)
 200682c:	59 64 00 0c 	sw (r11+12),r4
 2006830:	59 68 00 08 	sw (r11+8),r8
 2006834:	59 0b 00 0c 	sw (r8+12),r11
 2006838:	58 8b 00 08 	sw (r4+8),r11
 200683c:	e3 ff ff 87 	bi 2006658 <_malloc_r+0x280>
 2006840:	48 05 00 02 	bg r0,r5,2006848 <_malloc_r+0x470>
 2006844:	e3 ff ff 5d 	bi 20065b8 <_malloc_r+0x1e0>
 2006848:	29 6b 00 0c 	lw r11,(r11+12)
 200684c:	5c 4b ff 9c 	bne r2,r11,20066bc <_malloc_r+0x2e4>
 2006850:	35 29 00 01 	addi r9,r9,1
 2006854:	21 21 00 03 	andi r1,r9,0x3
 2006858:	44 20 00 74 	be r1,r0,2006a28 <_malloc_r+0x650>
 200685c:	34 42 00 08 	addi r2,r2,8
 2006860:	e3 ff ff 95 	bi 20066b4 <_malloc_r+0x2dc>
 2006864:	28 84 00 08 	lw r4,(r4+8)
 2006868:	5c a4 ff ec 	bne r5,r4,2006818 <_malloc_r+0x440>
 200686c:	e3 ff ff ee 	bi 2006824 <_malloc_r+0x44c>
 2006870:	35 61 00 08 	addi r1,r11,8
 2006874:	28 2b 00 0c 	lw r11,(r1+12)
 2006878:	34 4a 00 02 	addi r10,r2,2
 200687c:	44 2b ff 34 	be r1,r11,200654c <_malloc_r+0x174>
 2006880:	e3 ff ff 0a 	bi 20064a8 <_malloc_r+0xd0>
 2006884:	34 01 00 54 	mvi r1,84
 2006888:	54 41 00 05 	bgu r2,r1,200689c <_malloc_r+0x4c4>
 200688c:	01 81 00 0c 	srui r1,r12,12
 2006890:	34 22 00 6e 	addi r2,r1,110
 2006894:	3c 41 00 03 	sli r1,r2,3
 2006898:	e3 ff ff 17 	bi 20064f4 <_malloc_r+0x11c>
 200689c:	34 01 01 54 	mvi r1,340
 20068a0:	54 41 00 4f 	bgu r2,r1,20069dc <_malloc_r+0x604>
 20068a4:	01 81 00 0f 	srui r1,r12,15
 20068a8:	34 22 00 77 	addi r2,r1,119
 20068ac:	3c 41 00 03 	sli r1,r2,3
 20068b0:	e3 ff ff 11 	bi 20064f4 <_malloc_r+0x11c>
 20068b4:	78 13 02 00 	mvhi r19,0x200
 20068b8:	3a 73 b3 2c 	ori r19,r19,0xb32c
 20068bc:	2a 61 00 00 	lw r1,(r19+0)
 20068c0:	b6 01 20 00 	add r4,r16,r1
 20068c4:	5a 64 00 00 	sw (r19+0),r4
 20068c8:	44 6f 00 7e 	be r3,r15,2006ac0 <_malloc_r+0x6e8>
 20068cc:	2a 22 00 00 	lw r2,(r17+0)
 20068d0:	34 01 ff ff 	mvi r1,-1
 20068d4:	44 41 00 82 	be r2,r1,2006adc <_malloc_r+0x704>
 20068d8:	c9 e3 08 00 	sub r1,r15,r3
 20068dc:	b4 24 08 00 	add r1,r1,r4
 20068e0:	5a 61 00 00 	sw (r19+0),r1
 20068e4:	21 e3 00 07 	andi r3,r15,0x7
 20068e8:	34 02 10 00 	mvi r2,4096
 20068ec:	44 60 00 05 	be r3,r0,2006900 <_malloc_r+0x528>
 20068f0:	34 01 00 08 	mvi r1,8
 20068f4:	c8 23 08 00 	sub r1,r1,r3
 20068f8:	b5 e1 78 00 	add r15,r15,r1
 20068fc:	34 22 10 00 	addi r2,r1,4096
 2006900:	b5 f0 08 00 	add r1,r15,r16
 2006904:	20 21 0f ff 	andi r1,r1,0xfff
 2006908:	c8 41 80 00 	sub r16,r2,r1
 200690c:	ba 00 10 00 	mv r2,r16
 2006910:	b9 a0 08 00 	mv r1,r13
 2006914:	f8 00 05 ba 	calli 2007ffc <_sbrk_r>
 2006918:	b8 20 10 00 	mv r2,r1
 200691c:	34 01 ff ff 	mvi r1,-1
 2006920:	44 41 00 71 	be r2,r1,2006ae4 <_malloc_r+0x70c>
 2006924:	c8 4f 08 00 	sub r1,r2,r15
 2006928:	b4 30 08 00 	add r1,r1,r16
 200692c:	38 22 00 01 	ori r2,r1,0x1
 2006930:	2a 61 00 00 	lw r1,(r19+0)
 2006934:	59 cf 00 08 	sw (r14+8),r15
 2006938:	b6 01 08 00 	add r1,r16,r1
 200693c:	5a 61 00 00 	sw (r19+0),r1
 2006940:	59 e2 00 04 	sw (r15+4),r2
 2006944:	45 6e 00 1a 	be r11,r14,20069ac <_malloc_r+0x5d4>
 2006948:	34 04 00 0f 	mvi r4,15
 200694c:	56 44 00 09 	bgu r18,r4,2006970 <_malloc_r+0x598>
 2006950:	34 01 00 01 	mvi r1,1
 2006954:	59 e1 00 04 	sw (r15+4),r1
 2006958:	e3 ff ff 90 	bi 2006798 <_malloc_r+0x3c0>
 200695c:	34 01 00 14 	mvi r1,20
 2006960:	54 61 00 2c 	bgu r3,r1,2006a10 <_malloc_r+0x638>
 2006964:	34 61 00 5b 	addi r1,r3,91
 2006968:	3c 24 00 03 	sli r4,r1,3
 200696c:	e3 ff ff a5 	bi 2006800 <_malloc_r+0x428>
 2006970:	29 61 00 04 	lw r1,(r11+4)
 2006974:	34 02 ff f8 	mvi r2,-8
 2006978:	36 43 ff f4 	addi r3,r18,-12
 200697c:	a0 62 18 00 	and r3,r3,r2
 2006980:	20 21 00 01 	andi r1,r1,0x1
 2006984:	b8 61 08 00 	or r1,r3,r1
 2006988:	59 61 00 04 	sw (r11+4),r1
 200698c:	b5 63 10 00 	add r2,r11,r3
 2006990:	34 01 00 05 	mvi r1,5
 2006994:	58 41 00 08 	sw (r2+8),r1
 2006998:	58 41 00 04 	sw (r2+4),r1
 200699c:	50 83 00 04 	bgeu r4,r3,20069ac <_malloc_r+0x5d4>
 20069a0:	35 62 00 08 	addi r2,r11,8
 20069a4:	b9 a0 08 00 	mv r1,r13
 20069a8:	fb ff fc 65 	calli 2005b3c <_free_r>
 20069ac:	78 02 02 00 	mvhi r2,0x200
 20069b0:	38 42 b3 24 	ori r2,r2,0xb324
 20069b4:	2a 63 00 00 	lw r3,(r19+0)
 20069b8:	28 41 00 00 	lw r1,(r2+0)
 20069bc:	50 23 00 02 	bgeu r1,r3,20069c4 <_malloc_r+0x5ec>
 20069c0:	58 43 00 00 	sw (r2+0),r3
 20069c4:	78 02 02 00 	mvhi r2,0x200
 20069c8:	38 42 b3 28 	ori r2,r2,0xb328
 20069cc:	28 41 00 00 	lw r1,(r2+0)
 20069d0:	50 23 ff 72 	bgeu r1,r3,2006798 <_malloc_r+0x3c0>
 20069d4:	58 43 00 00 	sw (r2+0),r3
 20069d8:	e3 ff ff 70 	bi 2006798 <_malloc_r+0x3c0>
 20069dc:	34 01 05 54 	mvi r1,1364
 20069e0:	50 22 00 28 	bgeu r1,r2,2006a80 <_malloc_r+0x6a8>
 20069e4:	34 02 00 7e 	mvi r2,126
 20069e8:	34 01 03 f0 	mvi r1,1008
 20069ec:	e3 ff fe c2 	bi 20064f4 <_malloc_r+0x11c>
 20069f0:	14 23 00 02 	sri r3,r1,2
 20069f4:	28 e2 00 04 	lw r2,(r7+4)
 20069f8:	34 01 00 01 	mvi r1,1
 20069fc:	bc 23 08 00 	sl r1,r1,r3
 2006a00:	b9 00 20 00 	mv r4,r8
 2006a04:	b8 41 10 00 	or r2,r2,r1
 2006a08:	58 e2 00 04 	sw (r7+4),r2
 2006a0c:	e3 ff ff 88 	bi 200682c <_malloc_r+0x454>
 2006a10:	34 01 00 54 	mvi r1,84
 2006a14:	54 61 00 1f 	bgu r3,r1,2006a90 <_malloc_r+0x6b8>
 2006a18:	00 41 00 0c 	srui r1,r2,12
 2006a1c:	34 21 00 6e 	addi r1,r1,110
 2006a20:	3c 24 00 03 	sli r4,r1,3
 2006a24:	e3 ff ff 77 	bi 2006800 <_malloc_r+0x428>
 2006a28:	b9 40 10 00 	mv r2,r10
 2006a2c:	b8 80 08 00 	mv r1,r4
 2006a30:	34 24 ff f8 	addi r4,r1,-8
 2006a34:	20 41 00 03 	andi r1,r2,0x3
 2006a38:	34 42 ff ff 	addi r2,r2,-1
 2006a3c:	44 20 00 2d 	be r1,r0,2006af0 <_malloc_r+0x718>
 2006a40:	28 81 00 08 	lw r1,(r4+8)
 2006a44:	44 24 ff fb 	be r1,r4,2006a30 <_malloc_r+0x658>
 2006a48:	29 c2 00 04 	lw r2,(r14+4)
 2006a4c:	b4 63 18 00 	add r3,r3,r3
 2006a50:	54 62 ff 32 	bgu r3,r2,2006718 <_malloc_r+0x340>
 2006a54:	44 60 ff 31 	be r3,r0,2006718 <_malloc_r+0x340>
 2006a58:	a0 62 08 00 	and r1,r3,r2
 2006a5c:	44 20 00 03 	be r1,r0,2006a68 <_malloc_r+0x690>
 2006a60:	b9 20 50 00 	mv r10,r9
 2006a64:	e3 ff ff 10 	bi 20066a4 <_malloc_r+0x2cc>
 2006a68:	b4 63 18 00 	add r3,r3,r3
 2006a6c:	a0 62 08 00 	and r1,r3,r2
 2006a70:	35 29 00 04 	addi r9,r9,4
 2006a74:	44 20 ff fd 	be r1,r0,2006a68 <_malloc_r+0x690>
 2006a78:	b9 20 50 00 	mv r10,r9
 2006a7c:	e3 ff ff 0a 	bi 20066a4 <_malloc_r+0x2cc>
 2006a80:	01 81 00 12 	srui r1,r12,18
 2006a84:	34 22 00 7c 	addi r2,r1,124
 2006a88:	3c 41 00 03 	sli r1,r2,3
 2006a8c:	e3 ff fe 9a 	bi 20064f4 <_malloc_r+0x11c>
 2006a90:	34 01 01 54 	mvi r1,340
 2006a94:	54 61 00 1c 	bgu r3,r1,2006b04 <_malloc_r+0x72c>
 2006a98:	00 41 00 0f 	srui r1,r2,15
 2006a9c:	34 21 00 77 	addi r1,r1,119
 2006aa0:	3c 24 00 03 	sli r4,r1,3
 2006aa4:	e3 ff ff 57 	bi 2006800 <_malloc_r+0x428>
 2006aa8:	78 13 02 00 	mvhi r19,0x200
 2006aac:	3a 73 b3 2c 	ori r19,r19,0xb32c
 2006ab0:	2a 61 00 00 	lw r1,(r19+0)
 2006ab4:	b6 01 20 00 	add r4,r16,r1
 2006ab8:	5a 64 00 00 	sw (r19+0),r4
 2006abc:	e3 ff ff 84 	bi 20068cc <_malloc_r+0x4f4>
 2006ac0:	20 61 0f ff 	andi r1,r3,0xfff
 2006ac4:	5c 20 ff 82 	bne r1,r0,20068cc <_malloc_r+0x4f4>
 2006ac8:	29 c2 00 08 	lw r2,(r14+8)
 2006acc:	b6 12 08 00 	add r1,r16,r18
 2006ad0:	38 21 00 01 	ori r1,r1,0x1
 2006ad4:	58 41 00 04 	sw (r2+4),r1
 2006ad8:	e3 ff ff b5 	bi 20069ac <_malloc_r+0x5d4>
 2006adc:	5a 2f 00 00 	sw (r17+0),r15
 2006ae0:	e3 ff ff 81 	bi 20068e4 <_malloc_r+0x50c>
 2006ae4:	34 10 00 00 	mvi r16,0
 2006ae8:	34 02 00 01 	mvi r2,1
 2006aec:	e3 ff ff 91 	bi 2006930 <_malloc_r+0x558>
 2006af0:	29 c1 00 04 	lw r1,(r14+4)
 2006af4:	a4 60 10 00 	not r2,r3
 2006af8:	a0 22 08 00 	and r1,r1,r2
 2006afc:	59 c1 00 04 	sw (r14+4),r1
 2006b00:	e3 ff ff d2 	bi 2006a48 <_malloc_r+0x670>
 2006b04:	34 01 05 54 	mvi r1,1364
 2006b08:	50 23 00 08 	bgeu r1,r3,2006b28 <_malloc_r+0x750>
 2006b0c:	34 01 00 7e 	mvi r1,126
 2006b10:	34 04 03 f0 	mvi r4,1008
 2006b14:	e3 ff ff 3b 	bi 2006800 <_malloc_r+0x428>
 2006b18:	b9 a0 08 00 	mv r1,r13
 2006b1c:	f8 00 00 c8 	calli 2006e3c <__malloc_unlock>
 2006b20:	34 02 00 00 	mvi r2,0
 2006b24:	e3 ff fe 43 	bi 2006430 <_malloc_r+0x58>
 2006b28:	00 41 00 12 	srui r1,r2,18
 2006b2c:	34 21 00 7c 	addi r1,r1,124
 2006b30:	3c 24 00 03 	sli r4,r1,3
 2006b34:	e3 ff ff 33 	bi 2006800 <_malloc_r+0x428>

02006b38 <memchr>:
 2006b38:	b8 20 20 00 	mv r4,r1
 2006b3c:	20 45 00 ff 	andi r5,r2,0xff
 2006b40:	b8 20 10 00 	mv r2,r1
 2006b44:	34 01 00 03 	mvi r1,3
 2006b48:	50 23 00 25 	bgeu r1,r3,2006bdc <memchr+0xa4>
 2006b4c:	a0 81 08 00 	and r1,r4,r1
 2006b50:	5c 20 00 28 	bne r1,r0,2006bf0 <memchr+0xb8>
 2006b54:	b8 20 38 00 	mv r7,r1
 2006b58:	b8 20 10 00 	mv r2,r1
 2006b5c:	34 06 00 04 	mvi r6,4
 2006b60:	3c e1 00 08 	sli r1,r7,8
 2006b64:	34 42 00 01 	addi r2,r2,1
 2006b68:	b4 25 38 00 	add r7,r1,r5
 2006b6c:	5c 46 ff fd 	bne r2,r6,2006b60 <memchr+0x28>
 2006b70:	78 09 fe fe 	mvhi r9,0xfefe
 2006b74:	78 08 80 80 	mvhi r8,0x8080
 2006b78:	39 29 fe ff 	ori r9,r9,0xfeff
 2006b7c:	39 08 80 80 	ori r8,r8,0x8080
 2006b80:	34 0a 00 03 	mvi r10,3
 2006b84:	28 81 00 00 	lw r1,(r4+0)
 2006b88:	34 63 ff fc 	addi r3,r3,-4
 2006b8c:	34 86 00 01 	addi r6,r4,1
 2006b90:	98 e1 08 00 	xor r1,r7,r1
 2006b94:	a4 20 10 00 	not r2,r1
 2006b98:	b4 29 08 00 	add r1,r1,r9
 2006b9c:	a0 22 08 00 	and r1,r1,r2
 2006ba0:	a0 28 08 00 	and r1,r1,r8
 2006ba4:	44 20 00 0b 	be r1,r0,2006bd0 <memchr+0x98>
 2006ba8:	40 81 00 00 	lbu r1,(r4+0)
 2006bac:	44 25 00 16 	be r1,r5,2006c04 <memchr+0xcc>
 2006bb0:	40 81 00 01 	lbu r1,(r4+1)
 2006bb4:	44 25 00 15 	be r1,r5,2006c08 <memchr+0xd0>
 2006bb8:	40 81 00 02 	lbu r1,(r4+2)
 2006bbc:	34 86 00 02 	addi r6,r4,2
 2006bc0:	44 25 00 12 	be r1,r5,2006c08 <memchr+0xd0>
 2006bc4:	40 81 00 03 	lbu r1,(r4+3)
 2006bc8:	34 86 00 03 	addi r6,r4,3
 2006bcc:	44 25 00 0f 	be r1,r5,2006c08 <memchr+0xd0>
 2006bd0:	34 84 00 04 	addi r4,r4,4
 2006bd4:	54 6a ff ec 	bgu r3,r10,2006b84 <memchr+0x4c>
 2006bd8:	b8 80 10 00 	mv r2,r4
 2006bdc:	5c 60 00 05 	bne r3,r0,2006bf0 <memchr+0xb8>
 2006be0:	34 01 00 00 	mvi r1,0
 2006be4:	c3 a0 00 00 	ret
 2006be8:	34 42 00 01 	addi r2,r2,1
 2006bec:	44 60 ff fd 	be r3,r0,2006be0 <memchr+0xa8>
 2006bf0:	40 41 00 00 	lbu r1,(r2+0)
 2006bf4:	34 63 ff ff 	addi r3,r3,-1
 2006bf8:	5c 25 ff fc 	bne r1,r5,2006be8 <memchr+0xb0>
 2006bfc:	b8 40 08 00 	mv r1,r2
 2006c00:	c3 a0 00 00 	ret
 2006c04:	b8 80 30 00 	mv r6,r4
 2006c08:	b8 c0 08 00 	mv r1,r6
 2006c0c:	c3 a0 00 00 	ret

02006c10 <memmove>:
 2006c10:	b8 40 38 00 	mv r7,r2
 2006c14:	b8 20 40 00 	mv r8,r1
 2006c18:	b8 60 10 00 	mv r2,r3
 2006c1c:	b8 20 30 00 	mv r6,r1
 2006c20:	b8 e0 28 00 	mv r5,r7
 2006c24:	50 e1 00 0f 	bgeu r7,r1,2006c60 <memmove+0x50>
 2006c28:	b4 e2 20 00 	add r4,r7,r2
 2006c2c:	50 24 00 0d 	bgeu r1,r4,2006c60 <memmove+0x50>
 2006c30:	44 40 00 0a 	be r2,r0,2006c58 <memmove+0x48>
 2006c34:	34 41 ff ff 	addi r1,r2,-1
 2006c38:	34 03 ff ff 	mvi r3,-1
 2006c3c:	b5 02 10 00 	add r2,r8,r2
 2006c40:	34 84 ff ff 	addi r4,r4,-1
 2006c44:	40 85 00 00 	lbu r5,(r4+0)
 2006c48:	34 42 ff ff 	addi r2,r2,-1
 2006c4c:	34 21 ff ff 	addi r1,r1,-1
 2006c50:	30 45 00 00 	sb (r2+0),r5
 2006c54:	5c 23 ff fb 	bne r1,r3,2006c40 <memmove+0x30>
 2006c58:	b9 00 08 00 	mv r1,r8
 2006c5c:	c3 a0 00 00 	ret
 2006c60:	34 04 00 0f 	mvi r4,15
 2006c64:	50 82 00 04 	bgeu r4,r2,2006c74 <memmove+0x64>
 2006c68:	b8 e8 08 00 	or r1,r7,r8
 2006c6c:	20 21 00 03 	andi r1,r1,0x3
 2006c70:	44 20 00 0b 	be r1,r0,2006c9c <memmove+0x8c>
 2006c74:	44 60 ff f9 	be r3,r0,2006c58 <memmove+0x48>
 2006c78:	34 04 00 00 	mvi r4,0
 2006c7c:	b4 a4 08 00 	add r1,r5,r4
 2006c80:	40 21 00 00 	lbu r1,(r1+0)
 2006c84:	b4 c4 10 00 	add r2,r6,r4
 2006c88:	34 84 00 01 	addi r4,r4,1
 2006c8c:	30 41 00 00 	sb (r2+0),r1
 2006c90:	5c 83 ff fb 	bne r4,r3,2006c7c <memmove+0x6c>
 2006c94:	b9 00 08 00 	mv r1,r8
 2006c98:	c3 a0 00 00 	ret
 2006c9c:	b8 80 18 00 	mv r3,r4
 2006ca0:	b8 e0 08 00 	mv r1,r7
 2006ca4:	b9 00 20 00 	mv r4,r8
 2006ca8:	b8 40 28 00 	mv r5,r2
 2006cac:	28 26 00 00 	lw r6,(r1+0)
 2006cb0:	34 a5 ff f0 	addi r5,r5,-16
 2006cb4:	58 86 00 00 	sw (r4+0),r6
 2006cb8:	28 26 00 04 	lw r6,(r1+4)
 2006cbc:	58 86 00 04 	sw (r4+4),r6
 2006cc0:	28 26 00 08 	lw r6,(r1+8)
 2006cc4:	58 86 00 08 	sw (r4+8),r6
 2006cc8:	28 26 00 0c 	lw r6,(r1+12)
 2006ccc:	34 21 00 10 	addi r1,r1,16
 2006cd0:	58 86 00 0c 	sw (r4+12),r6
 2006cd4:	34 84 00 10 	addi r4,r4,16
 2006cd8:	54 a3 ff f5 	bgu r5,r3,2006cac <memmove+0x9c>
 2006cdc:	34 42 ff f0 	addi r2,r2,-16
 2006ce0:	00 41 00 04 	srui r1,r2,4
 2006ce4:	20 43 00 0f 	andi r3,r2,0xf
 2006ce8:	34 21 00 01 	addi r1,r1,1
 2006cec:	3c 21 00 04 	sli r1,r1,4
 2006cf0:	34 02 00 03 	mvi r2,3
 2006cf4:	b4 e1 38 00 	add r7,r7,r1
 2006cf8:	b5 01 28 00 	add r5,r8,r1
 2006cfc:	50 43 00 11 	bgeu r2,r3,2006d40 <memmove+0x130>
 2006d00:	b8 40 30 00 	mv r6,r2
 2006d04:	34 04 00 00 	mvi r4,0
 2006d08:	b4 e4 10 00 	add r2,r7,r4
 2006d0c:	28 42 00 00 	lw r2,(r2+0)
 2006d10:	b4 a4 08 00 	add r1,r5,r4
 2006d14:	34 84 00 04 	addi r4,r4,4
 2006d18:	58 22 00 00 	sw (r1+0),r2
 2006d1c:	c8 64 08 00 	sub r1,r3,r4
 2006d20:	54 26 ff fa 	bgu r1,r6,2006d08 <memmove+0xf8>
 2006d24:	34 62 ff fc 	addi r2,r3,-4
 2006d28:	00 41 00 02 	srui r1,r2,2
 2006d2c:	20 43 00 03 	andi r3,r2,0x3
 2006d30:	34 21 00 01 	addi r1,r1,1
 2006d34:	3c 21 00 02 	sli r1,r1,2
 2006d38:	b4 a1 28 00 	add r5,r5,r1
 2006d3c:	b4 e1 38 00 	add r7,r7,r1
 2006d40:	b8 a0 30 00 	mv r6,r5
 2006d44:	b8 e0 28 00 	mv r5,r7
 2006d48:	e3 ff ff cb 	bi 2006c74 <memmove+0x64>

02006d4c <memset>:
 2006d4c:	b8 20 40 00 	mv r8,r1
 2006d50:	b8 20 28 00 	mv r5,r1
 2006d54:	34 01 00 03 	mvi r1,3
 2006d58:	b8 60 20 00 	mv r4,r3
 2006d5c:	20 49 00 ff 	andi r9,r2,0xff
 2006d60:	50 23 00 23 	bgeu r1,r3,2006dec <memset+0xa0>
 2006d64:	a1 01 08 00 	and r1,r8,r1
 2006d68:	44 20 00 09 	be r1,r0,2006d8c <memset+0x40>
 2006d6c:	21 22 00 ff 	andi r2,r9,0xff
 2006d70:	34 03 00 00 	mvi r3,0
 2006d74:	b4 a3 08 00 	add r1,r5,r3
 2006d78:	30 22 00 00 	sb (r1+0),r2
 2006d7c:	34 63 00 01 	addi r3,r3,1
 2006d80:	5c 64 ff fd 	bne r3,r4,2006d74 <memset+0x28>
 2006d84:	b9 00 08 00 	mv r1,r8
 2006d88:	c3 a0 00 00 	ret
 2006d8c:	3d 21 00 08 	sli r1,r9,8
 2006d90:	34 03 00 0f 	mvi r3,15
 2006d94:	b8 29 08 00 	or r1,r1,r9
 2006d98:	3c 22 00 10 	sli r2,r1,16
 2006d9c:	b9 00 38 00 	mv r7,r8
 2006da0:	b8 41 28 00 	or r5,r2,r1
 2006da4:	b8 60 30 00 	mv r6,r3
 2006da8:	b9 00 08 00 	mv r1,r8
 2006dac:	b8 80 10 00 	mv r2,r4
 2006db0:	54 83 00 11 	bgu r4,r3,2006df4 <memset+0xa8>
 2006db4:	34 03 00 00 	mvi r3,0
 2006db8:	34 06 00 03 	mvi r6,3
 2006dbc:	b4 e3 10 00 	add r2,r7,r3
 2006dc0:	34 63 00 04 	addi r3,r3,4
 2006dc4:	58 45 00 00 	sw (r2+0),r5
 2006dc8:	c8 83 08 00 	sub r1,r4,r3
 2006dcc:	54 26 ff fc 	bgu r1,r6,2006dbc <memset+0x70>
 2006dd0:	34 82 ff fc 	addi r2,r4,-4
 2006dd4:	00 41 00 02 	srui r1,r2,2
 2006dd8:	20 44 00 03 	andi r4,r2,0x3
 2006ddc:	34 21 00 01 	addi r1,r1,1
 2006de0:	3c 21 00 02 	sli r1,r1,2
 2006de4:	b4 e1 38 00 	add r7,r7,r1
 2006de8:	b8 e0 28 00 	mv r5,r7
 2006dec:	5c 80 ff e0 	bne r4,r0,2006d6c <memset+0x20>
 2006df0:	e3 ff ff e5 	bi 2006d84 <memset+0x38>
 2006df4:	58 25 00 00 	sw (r1+0),r5
 2006df8:	58 25 00 04 	sw (r1+4),r5
 2006dfc:	58 25 00 08 	sw (r1+8),r5
 2006e00:	58 25 00 0c 	sw (r1+12),r5
 2006e04:	34 42 ff f0 	addi r2,r2,-16
 2006e08:	34 21 00 10 	addi r1,r1,16
 2006e0c:	54 46 ff fa 	bgu r2,r6,2006df4 <memset+0xa8>
 2006e10:	34 81 ff f0 	addi r1,r4,-16
 2006e14:	00 22 00 04 	srui r2,r1,4
 2006e18:	20 24 00 0f 	andi r4,r1,0xf
 2006e1c:	34 42 00 01 	addi r2,r2,1
 2006e20:	3c 42 00 04 	sli r2,r2,4
 2006e24:	34 01 00 03 	mvi r1,3
 2006e28:	b5 02 38 00 	add r7,r8,r2
 2006e2c:	54 81 ff e2 	bgu r4,r1,2006db4 <memset+0x68>
 2006e30:	b8 e0 28 00 	mv r5,r7
 2006e34:	e3 ff ff ee 	bi 2006dec <memset+0xa0>

02006e38 <__malloc_lock>:
 2006e38:	c3 a0 00 00 	ret

02006e3c <__malloc_unlock>:
 2006e3c:	c3 a0 00 00 	ret

02006e40 <_Bfree>:
 2006e40:	b8 40 18 00 	mv r3,r2
 2006e44:	b8 20 10 00 	mv r2,r1
 2006e48:	44 60 00 08 	be r3,r0,2006e68 <_Bfree+0x28>
 2006e4c:	28 61 00 04 	lw r1,(r3+4)
 2006e50:	28 42 00 4c 	lw r2,(r2+76)
 2006e54:	3c 21 00 02 	sli r1,r1,2
 2006e58:	b4 41 10 00 	add r2,r2,r1
 2006e5c:	28 41 00 00 	lw r1,(r2+0)
 2006e60:	58 61 00 00 	sw (r3+0),r1
 2006e64:	58 43 00 00 	sw (r2+0),r3
 2006e68:	c3 a0 00 00 	ret

02006e6c <_hi0bits>:
 2006e6c:	78 02 ff ff 	mvhi r2,0xffff
 2006e70:	38 42 00 00 	ori r2,r2,0x0
 2006e74:	a0 22 10 00 	and r2,r1,r2
 2006e78:	34 04 00 00 	mvi r4,0
 2006e7c:	b8 20 18 00 	mv r3,r1
 2006e80:	5c 44 00 03 	bne r2,r4,2006e8c <_hi0bits+0x20>
 2006e84:	3c 23 00 10 	sli r3,r1,16
 2006e88:	34 04 00 10 	mvi r4,16
 2006e8c:	78 01 ff 00 	mvhi r1,0xff00
 2006e90:	38 21 00 00 	ori r1,r1,0x0
 2006e94:	a0 61 08 00 	and r1,r3,r1
 2006e98:	5c 20 00 03 	bne r1,r0,2006ea4 <_hi0bits+0x38>
 2006e9c:	3c 63 00 08 	sli r3,r3,8
 2006ea0:	34 84 00 08 	addi r4,r4,8
 2006ea4:	78 01 f0 00 	mvhi r1,0xf000
 2006ea8:	38 21 00 00 	ori r1,r1,0x0
 2006eac:	a0 61 08 00 	and r1,r3,r1
 2006eb0:	5c 20 00 03 	bne r1,r0,2006ebc <_hi0bits+0x50>
 2006eb4:	3c 63 00 04 	sli r3,r3,4
 2006eb8:	34 84 00 04 	addi r4,r4,4
 2006ebc:	78 01 c0 00 	mvhi r1,0xc000
 2006ec0:	38 21 00 00 	ori r1,r1,0x0
 2006ec4:	a0 61 08 00 	and r1,r3,r1
 2006ec8:	5c 20 00 03 	bne r1,r0,2006ed4 <_hi0bits+0x68>
 2006ecc:	3c 63 00 02 	sli r3,r3,2
 2006ed0:	34 84 00 02 	addi r4,r4,2
 2006ed4:	48 03 00 05 	bg r0,r3,2006ee8 <_hi0bits+0x7c>
 2006ed8:	00 61 00 1e 	srui r1,r3,30
 2006edc:	34 84 00 01 	addi r4,r4,1
 2006ee0:	20 21 00 01 	andi r1,r1,0x1
 2006ee4:	44 20 00 03 	be r1,r0,2006ef0 <_hi0bits+0x84>
 2006ee8:	b8 80 08 00 	mv r1,r4
 2006eec:	c3 a0 00 00 	ret
 2006ef0:	34 04 00 20 	mvi r4,32
 2006ef4:	b8 80 08 00 	mv r1,r4
 2006ef8:	c3 a0 00 00 	ret

02006efc <_lo0bits>:
 2006efc:	28 23 00 00 	lw r3,(r1+0)
 2006f00:	b8 20 28 00 	mv r5,r1
 2006f04:	20 62 00 07 	andi r2,r3,0x7
 2006f08:	44 40 00 0b 	be r2,r0,2006f34 <_lo0bits+0x38>
 2006f0c:	20 62 00 01 	andi r2,r3,0x1
 2006f10:	34 04 00 00 	mvi r4,0
 2006f14:	5c 44 00 06 	bne r2,r4,2006f2c <_lo0bits+0x30>
 2006f18:	20 61 00 02 	andi r1,r3,0x2
 2006f1c:	5c 22 00 25 	bne r1,r2,2006fb0 <_lo0bits+0xb4>
 2006f20:	00 61 00 02 	srui r1,r3,2
 2006f24:	34 04 00 02 	mvi r4,2
 2006f28:	58 a1 00 00 	sw (r5+0),r1
 2006f2c:	b8 80 08 00 	mv r1,r4
 2006f30:	c3 a0 00 00 	ret
 2006f34:	20 61 ff ff 	andi r1,r3,0xffff
 2006f38:	b8 40 20 00 	mv r4,r2
 2006f3c:	44 22 00 15 	be r1,r2,2006f90 <_lo0bits+0x94>
 2006f40:	20 61 00 ff 	andi r1,r3,0xff
 2006f44:	5c 20 00 03 	bne r1,r0,2006f50 <_lo0bits+0x54>
 2006f48:	00 63 00 08 	srui r3,r3,8
 2006f4c:	34 84 00 08 	addi r4,r4,8
 2006f50:	20 61 00 0f 	andi r1,r3,0xf
 2006f54:	5c 20 00 03 	bne r1,r0,2006f60 <_lo0bits+0x64>
 2006f58:	00 63 00 04 	srui r3,r3,4
 2006f5c:	34 84 00 04 	addi r4,r4,4
 2006f60:	20 61 00 03 	andi r1,r3,0x3
 2006f64:	5c 20 00 03 	bne r1,r0,2006f70 <_lo0bits+0x74>
 2006f68:	00 63 00 02 	srui r3,r3,2
 2006f6c:	34 84 00 02 	addi r4,r4,2
 2006f70:	20 61 00 01 	andi r1,r3,0x1
 2006f74:	5c 20 00 04 	bne r1,r0,2006f84 <_lo0bits+0x88>
 2006f78:	00 63 00 01 	srui r3,r3,1
 2006f7c:	34 84 00 01 	addi r4,r4,1
 2006f80:	44 61 00 09 	be r3,r1,2006fa4 <_lo0bits+0xa8>
 2006f84:	58 a3 00 00 	sw (r5+0),r3
 2006f88:	b8 80 08 00 	mv r1,r4
 2006f8c:	c3 a0 00 00 	ret
 2006f90:	00 63 00 10 	srui r3,r3,16
 2006f94:	34 04 00 10 	mvi r4,16
 2006f98:	20 61 00 ff 	andi r1,r3,0xff
 2006f9c:	5c 20 ff ed 	bne r1,r0,2006f50 <_lo0bits+0x54>
 2006fa0:	e3 ff ff ea 	bi 2006f48 <_lo0bits+0x4c>
 2006fa4:	34 04 00 20 	mvi r4,32
 2006fa8:	b8 80 08 00 	mv r1,r4
 2006fac:	c3 a0 00 00 	ret
 2006fb0:	00 61 00 01 	srui r1,r3,1
 2006fb4:	34 04 00 01 	mvi r4,1
 2006fb8:	58 a1 00 00 	sw (r5+0),r1
 2006fbc:	e3 ff ff dc 	bi 2006f2c <_lo0bits+0x30>

02006fc0 <__mcmp>:
 2006fc0:	b8 20 20 00 	mv r4,r1
 2006fc4:	28 43 00 10 	lw r3,(r2+16)
 2006fc8:	28 21 00 10 	lw r1,(r1+16)
 2006fcc:	c8 23 28 00 	sub r5,r1,r3
 2006fd0:	5c a0 00 0e 	bne r5,r0,2007008 <__mcmp+0x48>
 2006fd4:	34 61 00 04 	addi r1,r3,4
 2006fd8:	3c 21 00 02 	sli r1,r1,2
 2006fdc:	34 86 00 14 	addi r6,r4,20
 2006fe0:	b4 41 10 00 	add r2,r2,r1
 2006fe4:	b4 81 08 00 	add r1,r4,r1
 2006fe8:	34 21 00 04 	addi r1,r1,4
 2006fec:	34 42 00 04 	addi r2,r2,4
 2006ff0:	34 21 ff fc 	addi r1,r1,-4
 2006ff4:	34 42 ff fc 	addi r2,r2,-4
 2006ff8:	28 24 00 00 	lw r4,(r1+0)
 2006ffc:	28 43 00 00 	lw r3,(r2+0)
 2007000:	5c 83 00 04 	bne r4,r3,2007010 <__mcmp+0x50>
 2007004:	54 26 ff fb 	bgu r1,r6,2006ff0 <__mcmp+0x30>
 2007008:	b8 a0 08 00 	mv r1,r5
 200700c:	c3 a0 00 00 	ret
 2007010:	f4 64 08 00 	cmpgu r1,r3,r4
 2007014:	c8 01 08 00 	sub r1,r0,r1
 2007018:	38 25 00 01 	ori r5,r1,0x1
 200701c:	b8 a0 08 00 	mv r1,r5
 2007020:	c3 a0 00 00 	ret

02007024 <_Balloc>:
 2007024:	37 9c ff f0 	addi sp,sp,-16
 2007028:	5b 8b 00 10 	sw (sp+16),r11
 200702c:	5b 8c 00 0c 	sw (sp+12),r12
 2007030:	5b 8d 00 08 	sw (sp+8),r13
 2007034:	5b 9d 00 04 	sw (sp+4),ra
 2007038:	28 23 00 4c 	lw r3,(r1+76)
 200703c:	b8 20 58 00 	mv r11,r1
 2007040:	b8 40 60 00 	mv r12,r2
 2007044:	44 60 00 11 	be r3,r0,2007088 <_Balloc+0x64>
 2007048:	3d 81 00 02 	sli r1,r12,2
 200704c:	b4 61 08 00 	add r1,r3,r1
 2007050:	28 22 00 00 	lw r2,(r1+0)
 2007054:	44 40 00 15 	be r2,r0,20070a8 <_Balloc+0x84>
 2007058:	28 43 00 00 	lw r3,(r2+0)
 200705c:	58 23 00 00 	sw (r1+0),r3
 2007060:	34 01 00 00 	mvi r1,0
 2007064:	58 41 00 0c 	sw (r2+12),r1
 2007068:	58 41 00 10 	sw (r2+16),r1
 200706c:	b8 40 08 00 	mv r1,r2
 2007070:	2b 9d 00 04 	lw ra,(sp+4)
 2007074:	2b 8b 00 10 	lw r11,(sp+16)
 2007078:	2b 8c 00 0c 	lw r12,(sp+12)
 200707c:	2b 8d 00 08 	lw r13,(sp+8)
 2007080:	37 9c 00 10 	addi sp,sp,16
 2007084:	c3 a0 00 00 	ret
 2007088:	34 02 00 04 	mvi r2,4
 200708c:	34 03 00 10 	mvi r3,16
 2007090:	f8 00 04 b1 	calli 2008354 <_calloc_r>
 2007094:	59 61 00 4c 	sw (r11+76),r1
 2007098:	b8 20 18 00 	mv r3,r1
 200709c:	b8 20 10 00 	mv r2,r1
 20070a0:	5c 20 ff ea 	bne r1,r0,2007048 <_Balloc+0x24>
 20070a4:	e3 ff ff f2 	bi 200706c <_Balloc+0x48>
 20070a8:	34 02 00 01 	mvi r2,1
 20070ac:	bc 4c 68 00 	sl r13,r2,r12
 20070b0:	b9 60 08 00 	mv r1,r11
 20070b4:	35 a3 00 05 	addi r3,r13,5
 20070b8:	3c 63 00 02 	sli r3,r3,2
 20070bc:	f8 00 04 a6 	calli 2008354 <_calloc_r>
 20070c0:	b8 20 10 00 	mv r2,r1
 20070c4:	44 20 ff ea 	be r1,r0,200706c <_Balloc+0x48>
 20070c8:	58 2c 00 04 	sw (r1+4),r12
 20070cc:	58 2d 00 08 	sw (r1+8),r13
 20070d0:	e3 ff ff e4 	bi 2007060 <_Balloc+0x3c>

020070d4 <_d2b>:
 20070d4:	37 9c ff dc 	addi sp,sp,-36
 20070d8:	5b 8b 00 1c 	sw (sp+28),r11
 20070dc:	5b 8c 00 18 	sw (sp+24),r12
 20070e0:	5b 8d 00 14 	sw (sp+20),r13
 20070e4:	5b 8e 00 10 	sw (sp+16),r14
 20070e8:	5b 8f 00 0c 	sw (sp+12),r15
 20070ec:	5b 90 00 08 	sw (sp+8),r16
 20070f0:	5b 9d 00 04 	sw (sp+4),ra
 20070f4:	b8 40 58 00 	mv r11,r2
 20070f8:	34 02 00 01 	mvi r2,1
 20070fc:	b8 60 70 00 	mv r14,r3
 2007100:	b8 80 78 00 	mv r15,r4
 2007104:	b8 a0 80 00 	mv r16,r5
 2007108:	fb ff ff c7 	calli 2007024 <_Balloc>
 200710c:	78 02 7f ff 	mvhi r2,0x7fff
 2007110:	b8 20 60 00 	mv r12,r1
 2007114:	38 42 ff ff 	ori r2,r2,0xffff
 2007118:	78 01 00 0f 	mvhi r1,0xf
 200711c:	a1 62 10 00 	and r2,r11,r2
 2007120:	38 21 ff ff 	ori r1,r1,0xffff
 2007124:	a1 61 58 00 	and r11,r11,r1
 2007128:	00 4d 00 14 	srui r13,r2,20
 200712c:	5b 8b 00 20 	sw (sp+32),r11
 2007130:	45 a0 00 05 	be r13,r0,2007144 <_d2b+0x70>
 2007134:	78 01 00 10 	mvhi r1,0x10
 2007138:	38 21 00 00 	ori r1,r1,0x0
 200713c:	b9 61 08 00 	or r1,r11,r1
 2007140:	5b 81 00 20 	sw (sp+32),r1
 2007144:	45 c0 00 1e 	be r14,r0,20071bc <_d2b+0xe8>
 2007148:	37 81 00 24 	addi r1,sp,36
 200714c:	5b 8e 00 24 	sw (sp+36),r14
 2007150:	fb ff ff 6b 	calli 2006efc <_lo0bits>
 2007154:	b8 20 20 00 	mv r4,r1
 2007158:	5c 20 00 2d 	bne r1,r0,200720c <_d2b+0x138>
 200715c:	2b 81 00 24 	lw r1,(sp+36)
 2007160:	59 81 00 14 	sw (r12+20),r1
 2007164:	2b 81 00 20 	lw r1,(sp+32)
 2007168:	7c 2b 00 00 	cmpnei r11,r1,0
 200716c:	59 81 00 18 	sw (r12+24),r1
 2007170:	35 6b 00 01 	addi r11,r11,1
 2007174:	59 8b 00 10 	sw (r12+16),r11
 2007178:	45 a0 00 1a 	be r13,r0,20071e0 <_d2b+0x10c>
 200717c:	35 a1 fb cd 	addi r1,r13,-1075
 2007180:	b4 24 08 00 	add r1,r1,r4
 2007184:	34 02 00 35 	mvi r2,53
 2007188:	59 e1 00 00 	sw (r15+0),r1
 200718c:	c8 44 10 00 	sub r2,r2,r4
 2007190:	5a 02 00 00 	sw (r16+0),r2
 2007194:	b9 80 08 00 	mv r1,r12
 2007198:	2b 9d 00 04 	lw ra,(sp+4)
 200719c:	2b 8b 00 1c 	lw r11,(sp+28)
 20071a0:	2b 8c 00 18 	lw r12,(sp+24)
 20071a4:	2b 8d 00 14 	lw r13,(sp+20)
 20071a8:	2b 8e 00 10 	lw r14,(sp+16)
 20071ac:	2b 8f 00 0c 	lw r15,(sp+12)
 20071b0:	2b 90 00 08 	lw r16,(sp+8)
 20071b4:	37 9c 00 24 	addi sp,sp,36
 20071b8:	c3 a0 00 00 	ret
 20071bc:	37 81 00 20 	addi r1,sp,32
 20071c0:	fb ff ff 4f 	calli 2006efc <_lo0bits>
 20071c4:	2b 82 00 20 	lw r2,(sp+32)
 20071c8:	34 24 00 20 	addi r4,r1,32
 20071cc:	59 82 00 14 	sw (r12+20),r2
 20071d0:	34 02 00 01 	mvi r2,1
 20071d4:	59 82 00 10 	sw (r12+16),r2
 20071d8:	b8 40 58 00 	mv r11,r2
 20071dc:	5d a0 ff e8 	bne r13,r0,200717c <_d2b+0xa8>
 20071e0:	35 62 ff ff 	addi r2,r11,-1
 20071e4:	3c 42 00 02 	sli r2,r2,2
 20071e8:	34 83 fb ce 	addi r3,r4,-1074
 20071ec:	b5 82 10 00 	add r2,r12,r2
 20071f0:	28 41 00 14 	lw r1,(r2+20)
 20071f4:	59 e3 00 00 	sw (r15+0),r3
 20071f8:	fb ff ff 1d 	calli 2006e6c <_hi0bits>
 20071fc:	3d 62 00 05 	sli r2,r11,5
 2007200:	c8 41 10 00 	sub r2,r2,r1
 2007204:	5a 02 00 00 	sw (r16+0),r2
 2007208:	e3 ff ff e3 	bi 2007194 <_d2b+0xc0>
 200720c:	2b 81 00 20 	lw r1,(sp+32)
 2007210:	2b 83 00 24 	lw r3,(sp+36)
 2007214:	c8 04 10 00 	sub r2,r0,r4
 2007218:	bc 22 10 00 	sl r2,r1,r2
 200721c:	80 24 08 00 	sru r1,r1,r4
 2007220:	b8 43 10 00 	or r2,r2,r3
 2007224:	59 82 00 14 	sw (r12+20),r2
 2007228:	5b 81 00 20 	sw (sp+32),r1
 200722c:	e3 ff ff ce 	bi 2007164 <_d2b+0x90>

02007230 <__mdiff>:
 2007230:	37 9c ff ec 	addi sp,sp,-20
 2007234:	5b 8b 00 14 	sw (sp+20),r11
 2007238:	5b 8c 00 10 	sw (sp+16),r12
 200723c:	5b 8d 00 0c 	sw (sp+12),r13
 2007240:	5b 8e 00 08 	sw (sp+8),r14
 2007244:	5b 9d 00 04 	sw (sp+4),ra
 2007248:	b8 40 58 00 	mv r11,r2
 200724c:	b8 60 60 00 	mv r12,r3
 2007250:	28 42 00 10 	lw r2,(r2+16)
 2007254:	28 63 00 10 	lw r3,(r3+16)
 2007258:	b8 20 28 00 	mv r5,r1
 200725c:	c8 43 70 00 	sub r14,r2,r3
 2007260:	45 c0 00 03 	be r14,r0,200726c <__mdiff+0x3c>
 2007264:	4d c0 00 17 	bge r14,r0,20072c0 <__mdiff+0x90>
 2007268:	e0 00 00 10 	bi 20072a8 <__mdiff+0x78>
 200726c:	34 61 00 04 	addi r1,r3,4
 2007270:	3c 21 00 02 	sli r1,r1,2
 2007274:	35 6d 00 14 	addi r13,r11,20
 2007278:	b5 81 10 00 	add r2,r12,r1
 200727c:	b5 61 08 00 	add r1,r11,r1
 2007280:	34 21 00 04 	addi r1,r1,4
 2007284:	34 42 00 04 	addi r2,r2,4
 2007288:	e0 00 00 02 	bi 2007290 <__mdiff+0x60>
 200728c:	51 a1 00 52 	bgeu r13,r1,20073d4 <__mdiff+0x1a4>
 2007290:	34 21 ff fc 	addi r1,r1,-4
 2007294:	34 42 ff fc 	addi r2,r2,-4
 2007298:	28 24 00 00 	lw r4,(r1+0)
 200729c:	28 43 00 00 	lw r3,(r2+0)
 20072a0:	44 83 ff fb 	be r4,r3,200728c <__mdiff+0x5c>
 20072a4:	50 83 00 09 	bgeu r4,r3,20072c8 <__mdiff+0x98>
 20072a8:	b9 80 08 00 	mv r1,r12
 20072ac:	34 0e 00 01 	mvi r14,1
 20072b0:	b9 60 60 00 	mv r12,r11
 20072b4:	34 2d 00 14 	addi r13,r1,20
 20072b8:	b8 20 58 00 	mv r11,r1
 20072bc:	e0 00 00 03 	bi 20072c8 <__mdiff+0x98>
 20072c0:	34 0e 00 00 	mvi r14,0
 20072c4:	35 6d 00 14 	addi r13,r11,20
 20072c8:	29 62 00 04 	lw r2,(r11+4)
 20072cc:	b8 a0 08 00 	mv r1,r5
 20072d0:	fb ff ff 55 	calli 2007024 <_Balloc>
 20072d4:	b8 20 e8 00 	mv ra,r1
 20072d8:	29 69 00 10 	lw r9,(r11+16)
 20072dc:	29 81 00 10 	lw r1,(r12+16)
 20072e0:	5b ae 00 0c 	sw (ra+12),r14
 20072e4:	35 22 00 04 	addi r2,r9,4
 20072e8:	34 21 00 04 	addi r1,r1,4
 20072ec:	3c 42 00 02 	sli r2,r2,2
 20072f0:	3c 21 00 02 	sli r1,r1,2
 20072f4:	b5 62 10 00 	add r2,r11,r2
 20072f8:	b5 81 08 00 	add r1,r12,r1
 20072fc:	b9 a0 30 00 	mv r6,r13
 2007300:	34 4b 00 04 	addi r11,r2,4
 2007304:	34 2a 00 04 	addi r10,r1,4
 2007308:	35 88 00 14 	addi r8,r12,20
 200730c:	37 a5 00 14 	addi r5,ra,20
 2007310:	34 07 00 00 	mvi r7,0
 2007314:	28 c2 00 00 	lw r2,(r6+0)
 2007318:	29 04 00 00 	lw r4,(r8+0)
 200731c:	35 08 00 04 	addi r8,r8,4
 2007320:	20 43 ff ff 	andi r3,r2,0xffff
 2007324:	20 81 ff ff 	andi r1,r4,0xffff
 2007328:	c8 61 18 00 	sub r3,r3,r1
 200732c:	b4 67 18 00 	add r3,r3,r7
 2007330:	00 42 00 10 	srui r2,r2,16
 2007334:	00 84 00 10 	srui r4,r4,16
 2007338:	14 61 00 10 	sri r1,r3,16
 200733c:	c8 44 10 00 	sub r2,r2,r4
 2007340:	b4 41 10 00 	add r2,r2,r1
 2007344:	0c a2 00 00 	sh (r5+0),r2
 2007348:	0c a3 00 02 	sh (r5+2),r3
 200734c:	34 c6 00 04 	addi r6,r6,4
 2007350:	34 a5 00 04 	addi r5,r5,4
 2007354:	14 47 00 10 	sri r7,r2,16
 2007358:	55 48 ff ef 	bgu r10,r8,2007314 <__mdiff+0xe4>
 200735c:	55 66 00 11 	bgu r11,r6,20073a0 <__mdiff+0x170>
 2007360:	28 a1 ff fc 	lw r1,(r5+-4)
 2007364:	34 a2 ff fc 	addi r2,r5,-4
 2007368:	5c 20 00 05 	bne r1,r0,200737c <__mdiff+0x14c>
 200736c:	34 42 ff fc 	addi r2,r2,-4
 2007370:	28 41 00 00 	lw r1,(r2+0)
 2007374:	35 29 ff ff 	addi r9,r9,-1
 2007378:	44 20 ff fd 	be r1,r0,200736c <__mdiff+0x13c>
 200737c:	bb a0 08 00 	mv r1,ra
 2007380:	5b a9 00 10 	sw (ra+16),r9
 2007384:	2b 9d 00 04 	lw ra,(sp+4)
 2007388:	2b 8b 00 14 	lw r11,(sp+20)
 200738c:	2b 8c 00 10 	lw r12,(sp+16)
 2007390:	2b 8d 00 0c 	lw r13,(sp+12)
 2007394:	2b 8e 00 08 	lw r14,(sp+8)
 2007398:	37 9c 00 14 	addi sp,sp,20
 200739c:	c3 a0 00 00 	ret
 20073a0:	28 c1 00 00 	lw r1,(r6+0)
 20073a4:	34 c6 00 04 	addi r6,r6,4
 20073a8:	20 22 ff ff 	andi r2,r1,0xffff
 20073ac:	b4 e2 10 00 	add r2,r7,r2
 20073b0:	00 21 00 10 	srui r1,r1,16
 20073b4:	14 43 00 10 	sri r3,r2,16
 20073b8:	0c a2 00 02 	sh (r5+2),r2
 20073bc:	b4 61 18 00 	add r3,r3,r1
 20073c0:	0c a3 00 00 	sh (r5+0),r3
 20073c4:	14 67 00 10 	sri r7,r3,16
 20073c8:	34 a5 00 04 	addi r5,r5,4
 20073cc:	55 66 ff f5 	bgu r11,r6,20073a0 <__mdiff+0x170>
 20073d0:	e3 ff ff e4 	bi 2007360 <__mdiff+0x130>
 20073d4:	b8 a0 08 00 	mv r1,r5
 20073d8:	34 02 00 00 	mvi r2,0
 20073dc:	fb ff ff 12 	calli 2007024 <_Balloc>
 20073e0:	b8 20 e8 00 	mv ra,r1
 20073e4:	34 01 00 01 	mvi r1,1
 20073e8:	5b a1 00 10 	sw (ra+16),r1
 20073ec:	34 02 00 00 	mvi r2,0
 20073f0:	bb a0 08 00 	mv r1,ra
 20073f4:	5b a2 00 14 	sw (ra+20),r2
 20073f8:	2b 9d 00 04 	lw ra,(sp+4)
 20073fc:	2b 8b 00 14 	lw r11,(sp+20)
 2007400:	2b 8c 00 10 	lw r12,(sp+16)
 2007404:	2b 8d 00 0c 	lw r13,(sp+12)
 2007408:	2b 8e 00 08 	lw r14,(sp+8)
 200740c:	37 9c 00 14 	addi sp,sp,20
 2007410:	c3 a0 00 00 	ret

02007414 <_lshift>:
 2007414:	37 9c ff e8 	addi sp,sp,-24
 2007418:	5b 8b 00 18 	sw (sp+24),r11
 200741c:	5b 8c 00 14 	sw (sp+20),r12
 2007420:	5b 8d 00 10 	sw (sp+16),r13
 2007424:	5b 8e 00 0c 	sw (sp+12),r14
 2007428:	5b 8f 00 08 	sw (sp+8),r15
 200742c:	5b 9d 00 04 	sw (sp+4),ra
 2007430:	b8 40 68 00 	mv r13,r2
 2007434:	28 42 00 10 	lw r2,(r2+16)
 2007438:	14 6b 00 05 	sri r11,r3,5
 200743c:	29 a4 00 08 	lw r4,(r13+8)
 2007440:	34 42 00 01 	addi r2,r2,1
 2007444:	b4 4b 60 00 	add r12,r2,r11
 2007448:	b8 60 70 00 	mv r14,r3
 200744c:	b8 20 78 00 	mv r15,r1
 2007450:	29 a2 00 04 	lw r2,(r13+4)
 2007454:	4c 8c 00 04 	bge r4,r12,2007464 <_lshift+0x50>
 2007458:	b4 84 20 00 	add r4,r4,r4
 200745c:	34 42 00 01 	addi r2,r2,1
 2007460:	49 84 ff fe 	bg r12,r4,2007458 <_lshift+0x44>
 2007464:	b9 e0 08 00 	mv r1,r15
 2007468:	fb ff fe ef 	calli 2007024 <_Balloc>
 200746c:	b8 20 40 00 	mv r8,r1
 2007470:	34 24 00 14 	addi r4,r1,20
 2007474:	4c 0b 00 0b 	bge r0,r11,20074a0 <_lshift+0x8c>
 2007478:	34 01 00 00 	mvi r1,0
 200747c:	b8 20 10 00 	mv r2,r1
 2007480:	58 82 00 00 	sw (r4+0),r2
 2007484:	34 21 00 01 	addi r1,r1,1
 2007488:	34 84 00 04 	addi r4,r4,4
 200748c:	49 61 ff fd 	bg r11,r1,2007480 <_lshift+0x6c>
 2007490:	35 61 00 04 	addi r1,r11,4
 2007494:	3c 21 00 02 	sli r1,r1,2
 2007498:	b5 01 08 00 	add r1,r8,r1
 200749c:	34 24 00 04 	addi r4,r1,4
 20074a0:	29 a1 00 10 	lw r1,(r13+16)
 20074a4:	21 c3 00 1f 	andi r3,r14,0x1f
 20074a8:	35 a5 00 14 	addi r5,r13,20
 20074ac:	34 21 00 04 	addi r1,r1,4
 20074b0:	3c 21 00 02 	sli r1,r1,2
 20074b4:	b5 a1 08 00 	add r1,r13,r1
 20074b8:	34 26 00 04 	addi r6,r1,4
 20074bc:	44 60 00 22 	be r3,r0,2007544 <_lshift+0x130>
 20074c0:	34 01 00 20 	mvi r1,32
 20074c4:	c8 23 38 00 	sub r7,r1,r3
 20074c8:	34 02 00 00 	mvi r2,0
 20074cc:	28 a1 00 00 	lw r1,(r5+0)
 20074d0:	bc 23 08 00 	sl r1,r1,r3
 20074d4:	b8 41 08 00 	or r1,r2,r1
 20074d8:	58 81 00 00 	sw (r4+0),r1
 20074dc:	28 a2 00 00 	lw r2,(r5+0)
 20074e0:	34 a5 00 04 	addi r5,r5,4
 20074e4:	34 84 00 04 	addi r4,r4,4
 20074e8:	80 47 10 00 	sru r2,r2,r7
 20074ec:	54 c5 ff f8 	bgu r6,r5,20074cc <_lshift+0xb8>
 20074f0:	7c 41 00 00 	cmpnei r1,r2,0
 20074f4:	58 82 00 00 	sw (r4+0),r2
 20074f8:	b5 81 60 00 	add r12,r12,r1
 20074fc:	29 a1 00 04 	lw r1,(r13+4)
 2007500:	29 e2 00 4c 	lw r2,(r15+76)
 2007504:	35 83 ff ff 	addi r3,r12,-1
 2007508:	3c 21 00 02 	sli r1,r1,2
 200750c:	59 03 00 10 	sw (r8+16),r3
 2007510:	b4 41 10 00 	add r2,r2,r1
 2007514:	28 41 00 00 	lw r1,(r2+0)
 2007518:	59 a1 00 00 	sw (r13+0),r1
 200751c:	b9 00 08 00 	mv r1,r8
 2007520:	58 4d 00 00 	sw (r2+0),r13
 2007524:	2b 9d 00 04 	lw ra,(sp+4)
 2007528:	2b 8b 00 18 	lw r11,(sp+24)
 200752c:	2b 8c 00 14 	lw r12,(sp+20)
 2007530:	2b 8d 00 10 	lw r13,(sp+16)
 2007534:	2b 8e 00 0c 	lw r14,(sp+12)
 2007538:	2b 8f 00 08 	lw r15,(sp+8)
 200753c:	37 9c 00 18 	addi sp,sp,24
 2007540:	c3 a0 00 00 	ret
 2007544:	28 a1 00 00 	lw r1,(r5+0)
 2007548:	34 a5 00 04 	addi r5,r5,4
 200754c:	58 81 00 00 	sw (r4+0),r1
 2007550:	34 84 00 04 	addi r4,r4,4
 2007554:	54 c5 ff fc 	bgu r6,r5,2007544 <_lshift+0x130>
 2007558:	e3 ff ff e9 	bi 20074fc <_lshift+0xe8>

0200755c <_multiply>:
 200755c:	37 9c ff e0 	addi sp,sp,-32
 2007560:	5b 8b 00 20 	sw (sp+32),r11
 2007564:	5b 8c 00 1c 	sw (sp+28),r12
 2007568:	5b 8d 00 18 	sw (sp+24),r13
 200756c:	5b 8e 00 14 	sw (sp+20),r14
 2007570:	5b 8f 00 10 	sw (sp+16),r15
 2007574:	5b 90 00 0c 	sw (sp+12),r16
 2007578:	5b 91 00 08 	sw (sp+8),r17
 200757c:	5b 9d 00 04 	sw (sp+4),ra
 2007580:	28 4e 00 10 	lw r14,(r2+16)
 2007584:	28 6f 00 10 	lw r15,(r3+16)
 2007588:	b8 40 60 00 	mv r12,r2
 200758c:	b8 60 80 00 	mv r16,r3
 2007590:	b8 20 20 00 	mv r4,r1
 2007594:	49 ee 00 73 	bg r15,r14,2007760 <_multiply+0x204>
 2007598:	b9 c0 08 00 	mv r1,r14
 200759c:	b9 e0 70 00 	mv r14,r15
 20075a0:	b8 20 78 00 	mv r15,r1
 20075a4:	29 82 00 08 	lw r2,(r12+8)
 20075a8:	29 83 00 04 	lw r3,(r12+4)
 20075ac:	b5 cf 58 00 	add r11,r14,r15
 20075b0:	e9 62 10 00 	cmpg r2,r11,r2
 20075b4:	b8 80 08 00 	mv r1,r4
 20075b8:	b4 62 10 00 	add r2,r3,r2
 20075bc:	fb ff fe 9a 	calli 2007024 <_Balloc>
 20075c0:	b8 20 88 00 	mv r17,r1
 20075c4:	35 61 00 04 	addi r1,r11,4
 20075c8:	3c 21 00 02 	sli r1,r1,2
 20075cc:	36 23 00 14 	addi r3,r17,20
 20075d0:	b6 21 08 00 	add r1,r17,r1
 20075d4:	34 2d 00 04 	addi r13,r1,4
 20075d8:	50 6d 00 06 	bgeu r3,r13,20075f0 <_multiply+0x94>
 20075dc:	b8 60 08 00 	mv r1,r3
 20075e0:	34 02 00 00 	mvi r2,0
 20075e4:	58 22 00 00 	sw (r1+0),r2
 20075e8:	34 21 00 04 	addi r1,r1,4
 20075ec:	55 a1 ff fe 	bgu r13,r1,20075e4 <_multiply+0x88>
 20075f0:	35 c1 00 04 	addi r1,r14,4
 20075f4:	35 e2 00 04 	addi r2,r15,4
 20075f8:	3c 21 00 02 	sli r1,r1,2
 20075fc:	3c 42 00 02 	sli r2,r2,2
 2007600:	b6 01 08 00 	add r1,r16,r1
 2007604:	b5 82 10 00 	add r2,r12,r2
 2007608:	34 2e 00 04 	addi r14,r1,4
 200760c:	36 09 00 14 	addi r9,r16,20
 2007610:	34 4a 00 04 	addi r10,r2,4
 2007614:	35 8c 00 14 	addi r12,r12,20
 2007618:	51 2e 00 3c 	bgeu r9,r14,2007708 <_multiply+0x1ac>
 200761c:	b8 60 e8 00 	mv ra,r3
 2007620:	29 21 00 00 	lw r1,(r9+0)
 2007624:	20 28 ff ff 	andi r8,r1,0xffff
 2007628:	45 00 00 19 	be r8,r0,200768c <_multiply+0x130>
 200762c:	b9 80 30 00 	mv r6,r12
 2007630:	bb a0 28 00 	mv r5,ra
 2007634:	34 07 00 00 	mvi r7,0
 2007638:	28 c2 00 00 	lw r2,(r6+0)
 200763c:	28 a4 00 00 	lw r4,(r5+0)
 2007640:	34 c6 00 04 	addi r6,r6,4
 2007644:	20 41 ff ff 	andi r1,r2,0xffff
 2007648:	88 28 08 00 	mul r1,r1,r8
 200764c:	00 42 00 10 	srui r2,r2,16
 2007650:	20 83 ff ff 	andi r3,r4,0xffff
 2007654:	b4 23 08 00 	add r1,r1,r3
 2007658:	88 48 10 00 	mul r2,r2,r8
 200765c:	b4 27 08 00 	add r1,r1,r7
 2007660:	00 84 00 10 	srui r4,r4,16
 2007664:	00 23 00 10 	srui r3,r1,16
 2007668:	b4 44 10 00 	add r2,r2,r4
 200766c:	b4 43 10 00 	add r2,r2,r3
 2007670:	0c a2 00 00 	sh (r5+0),r2
 2007674:	0c a1 00 02 	sh (r5+2),r1
 2007678:	00 47 00 10 	srui r7,r2,16
 200767c:	34 a5 00 04 	addi r5,r5,4
 2007680:	55 46 ff ee 	bgu r10,r6,2007638 <_multiply+0xdc>
 2007684:	58 a7 00 00 	sw (r5+0),r7
 2007688:	29 21 00 00 	lw r1,(r9+0)
 200768c:	00 27 00 10 	srui r7,r1,16
 2007690:	44 e0 00 1a 	be r7,r0,20076f8 <_multiply+0x19c>
 2007694:	2b a5 00 00 	lw r5,(ra+0)
 2007698:	b9 80 30 00 	mv r6,r12
 200769c:	bb a0 20 00 	mv r4,ra
 20076a0:	b8 a0 08 00 	mv r1,r5
 20076a4:	34 08 00 00 	mvi r8,0
 20076a8:	28 c3 00 00 	lw r3,(r6+0)
 20076ac:	0c 81 00 02 	sh (r4+2),r1
 20076b0:	00 a2 00 10 	srui r2,r5,16
 20076b4:	20 61 ff ff 	andi r1,r3,0xffff
 20076b8:	88 e1 08 00 	mul r1,r7,r1
 20076bc:	00 63 00 10 	srui r3,r3,16
 20076c0:	34 c6 00 04 	addi r6,r6,4
 20076c4:	b5 01 08 00 	add r1,r8,r1
 20076c8:	b4 22 08 00 	add r1,r1,r2
 20076cc:	0c 81 00 00 	sh (r4+0),r1
 20076d0:	34 84 00 04 	addi r4,r4,4
 20076d4:	28 85 00 00 	lw r5,(r4+0)
 20076d8:	88 e3 18 00 	mul r3,r7,r3
 20076dc:	00 21 00 10 	srui r1,r1,16
 20076e0:	20 a2 ff ff 	andi r2,r5,0xffff
 20076e4:	b4 62 18 00 	add r3,r3,r2
 20076e8:	b4 61 08 00 	add r1,r3,r1
 20076ec:	00 28 00 10 	srui r8,r1,16
 20076f0:	55 46 ff ee 	bgu r10,r6,20076a8 <_multiply+0x14c>
 20076f4:	58 81 00 00 	sw (r4+0),r1
 20076f8:	35 29 00 04 	addi r9,r9,4
 20076fc:	51 2e 00 03 	bgeu r9,r14,2007708 <_multiply+0x1ac>
 2007700:	37 bd 00 04 	addi ra,ra,4
 2007704:	e3 ff ff c7 	bi 2007620 <_multiply+0xc4>
 2007708:	4c 0b 00 0a 	bge r0,r11,2007730 <_multiply+0x1d4>
 200770c:	29 a1 ff fc 	lw r1,(r13+-4)
 2007710:	35 a2 ff fc 	addi r2,r13,-4
 2007714:	44 20 00 04 	be r1,r0,2007724 <_multiply+0x1c8>
 2007718:	e0 00 00 06 	bi 2007730 <_multiply+0x1d4>
 200771c:	28 41 00 00 	lw r1,(r2+0)
 2007720:	5c 20 00 04 	bne r1,r0,2007730 <_multiply+0x1d4>
 2007724:	35 6b ff ff 	addi r11,r11,-1
 2007728:	34 42 ff fc 	addi r2,r2,-4
 200772c:	5d 60 ff fc 	bne r11,r0,200771c <_multiply+0x1c0>
 2007730:	ba 20 08 00 	mv r1,r17
 2007734:	5a 2b 00 10 	sw (r17+16),r11
 2007738:	2b 9d 00 04 	lw ra,(sp+4)
 200773c:	2b 8b 00 20 	lw r11,(sp+32)
 2007740:	2b 8c 00 1c 	lw r12,(sp+28)
 2007744:	2b 8d 00 18 	lw r13,(sp+24)
 2007748:	2b 8e 00 14 	lw r14,(sp+20)
 200774c:	2b 8f 00 10 	lw r15,(sp+16)
 2007750:	2b 90 00 0c 	lw r16,(sp+12)
 2007754:	2b 91 00 08 	lw r17,(sp+8)
 2007758:	37 9c 00 20 	addi sp,sp,32
 200775c:	c3 a0 00 00 	ret
 2007760:	b8 40 80 00 	mv r16,r2
 2007764:	b8 60 60 00 	mv r12,r3
 2007768:	e3 ff ff 8f 	bi 20075a4 <_multiply+0x48>

0200776c <_i2b>:
 200776c:	37 9c ff f8 	addi sp,sp,-8
 2007770:	5b 8b 00 08 	sw (sp+8),r11
 2007774:	5b 9d 00 04 	sw (sp+4),ra
 2007778:	b8 40 58 00 	mv r11,r2
 200777c:	34 02 00 01 	mvi r2,1
 2007780:	fb ff fe 29 	calli 2007024 <_Balloc>
 2007784:	34 02 00 01 	mvi r2,1
 2007788:	58 22 00 10 	sw (r1+16),r2
 200778c:	58 2b 00 14 	sw (r1+20),r11
 2007790:	2b 9d 00 04 	lw ra,(sp+4)
 2007794:	2b 8b 00 08 	lw r11,(sp+8)
 2007798:	37 9c 00 08 	addi sp,sp,8
 200779c:	c3 a0 00 00 	ret

020077a0 <_multadd>:
 20077a0:	37 9c ff e8 	addi sp,sp,-24
 20077a4:	5b 8b 00 18 	sw (sp+24),r11
 20077a8:	5b 8c 00 14 	sw (sp+20),r12
 20077ac:	5b 8d 00 10 	sw (sp+16),r13
 20077b0:	5b 8e 00 0c 	sw (sp+12),r14
 20077b4:	5b 8f 00 08 	sw (sp+8),r15
 20077b8:	5b 9d 00 04 	sw (sp+4),ra
 20077bc:	28 4d 00 10 	lw r13,(r2+16)
 20077c0:	b8 40 70 00 	mv r14,r2
 20077c4:	b8 20 78 00 	mv r15,r1
 20077c8:	b8 60 38 00 	mv r7,r3
 20077cc:	b8 80 60 00 	mv r12,r4
 20077d0:	34 45 00 14 	addi r5,r2,20
 20077d4:	34 06 00 00 	mvi r6,0
 20077d8:	28 a4 00 00 	lw r4,(r5+0)
 20077dc:	34 c6 00 01 	addi r6,r6,1
 20077e0:	20 81 ff ff 	andi r1,r4,0xffff
 20077e4:	88 e1 08 00 	mul r1,r7,r1
 20077e8:	00 84 00 10 	srui r4,r4,16
 20077ec:	b5 81 08 00 	add r1,r12,r1
 20077f0:	88 e4 20 00 	mul r4,r7,r4
 20077f4:	00 23 00 10 	srui r3,r1,16
 20077f8:	20 21 ff ff 	andi r1,r1,0xffff
 20077fc:	b4 64 18 00 	add r3,r3,r4
 2007800:	3c 62 00 10 	sli r2,r3,16
 2007804:	00 6c 00 10 	srui r12,r3,16
 2007808:	b4 41 10 00 	add r2,r2,r1
 200780c:	58 a2 00 00 	sw (r5+0),r2
 2007810:	34 a5 00 04 	addi r5,r5,4
 2007814:	49 a6 ff f1 	bg r13,r6,20077d8 <_multadd+0x38>
 2007818:	45 80 00 1c 	be r12,r0,2007888 <_multadd+0xe8>
 200781c:	29 c1 00 08 	lw r1,(r14+8)
 2007820:	48 2d 00 14 	bg r1,r13,2007870 <_multadd+0xd0>
 2007824:	29 c2 00 04 	lw r2,(r14+4)
 2007828:	b9 e0 08 00 	mv r1,r15
 200782c:	34 42 00 01 	addi r2,r2,1
 2007830:	fb ff fd fd 	calli 2007024 <_Balloc>
 2007834:	29 c3 00 10 	lw r3,(r14+16)
 2007838:	35 c2 00 0c 	addi r2,r14,12
 200783c:	b8 20 58 00 	mv r11,r1
 2007840:	34 63 00 02 	addi r3,r3,2
 2007844:	3c 63 00 02 	sli r3,r3,2
 2007848:	34 21 00 0c 	addi r1,r1,12
 200784c:	fb ff e8 b9 	calli 2001b30 <memcpy>
 2007850:	29 c2 00 04 	lw r2,(r14+4)
 2007854:	29 e1 00 4c 	lw r1,(r15+76)
 2007858:	3c 42 00 02 	sli r2,r2,2
 200785c:	b4 22 08 00 	add r1,r1,r2
 2007860:	28 22 00 00 	lw r2,(r1+0)
 2007864:	59 c2 00 00 	sw (r14+0),r2
 2007868:	58 2e 00 00 	sw (r1+0),r14
 200786c:	b9 60 70 00 	mv r14,r11
 2007870:	35 a1 00 04 	addi r1,r13,4
 2007874:	3c 21 00 02 	sli r1,r1,2
 2007878:	35 a2 00 01 	addi r2,r13,1
 200787c:	b5 c1 08 00 	add r1,r14,r1
 2007880:	58 2c 00 04 	sw (r1+4),r12
 2007884:	59 c2 00 10 	sw (r14+16),r2
 2007888:	b9 c0 08 00 	mv r1,r14
 200788c:	2b 9d 00 04 	lw ra,(sp+4)
 2007890:	2b 8b 00 18 	lw r11,(sp+24)
 2007894:	2b 8c 00 14 	lw r12,(sp+20)
 2007898:	2b 8d 00 10 	lw r13,(sp+16)
 200789c:	2b 8e 00 0c 	lw r14,(sp+12)
 20078a0:	2b 8f 00 08 	lw r15,(sp+8)
 20078a4:	37 9c 00 18 	addi sp,sp,24
 20078a8:	c3 a0 00 00 	ret

020078ac <_pow5mult>:
 20078ac:	37 9c ff e8 	addi sp,sp,-24
 20078b0:	5b 8b 00 18 	sw (sp+24),r11
 20078b4:	5b 8c 00 14 	sw (sp+20),r12
 20078b8:	5b 8d 00 10 	sw (sp+16),r13
 20078bc:	5b 8e 00 0c 	sw (sp+12),r14
 20078c0:	5b 8f 00 08 	sw (sp+8),r15
 20078c4:	5b 9d 00 04 	sw (sp+4),ra
 20078c8:	b8 60 58 00 	mv r11,r3
 20078cc:	20 63 00 03 	andi r3,r3,0x3
 20078d0:	b8 20 78 00 	mv r15,r1
 20078d4:	b8 40 68 00 	mv r13,r2
 20078d8:	5c 60 00 30 	bne r3,r0,2007998 <_pow5mult+0xec>
 20078dc:	15 6c 00 02 	sri r12,r11,2
 20078e0:	45 80 00 1d 	be r12,r0,2007954 <_pow5mult+0xa8>
 20078e4:	29 eb 00 48 	lw r11,(r15+72)
 20078e8:	45 60 00 36 	be r11,r0,20079c0 <_pow5mult+0x114>
 20078ec:	21 81 00 01 	andi r1,r12,0x1
 20078f0:	5c 20 00 09 	bne r1,r0,2007914 <_pow5mult+0x68>
 20078f4:	15 8c 00 01 	sri r12,r12,1
 20078f8:	45 80 00 17 	be r12,r0,2007954 <_pow5mult+0xa8>
 20078fc:	29 61 00 00 	lw r1,(r11+0)
 2007900:	b8 20 70 00 	mv r14,r1
 2007904:	44 20 00 1d 	be r1,r0,2007978 <_pow5mult+0xcc>
 2007908:	b8 20 58 00 	mv r11,r1
 200790c:	21 81 00 01 	andi r1,r12,0x1
 2007910:	44 20 ff f9 	be r1,r0,20078f4 <_pow5mult+0x48>
 2007914:	b9 60 18 00 	mv r3,r11
 2007918:	b9 a0 10 00 	mv r2,r13
 200791c:	b9 e0 08 00 	mv r1,r15
 2007920:	fb ff ff 0f 	calli 200755c <_multiply>
 2007924:	b8 20 18 00 	mv r3,r1
 2007928:	45 a0 00 08 	be r13,r0,2007948 <_pow5mult+0x9c>
 200792c:	29 a1 00 04 	lw r1,(r13+4)
 2007930:	29 e2 00 4c 	lw r2,(r15+76)
 2007934:	3c 21 00 02 	sli r1,r1,2
 2007938:	b4 41 10 00 	add r2,r2,r1
 200793c:	28 41 00 00 	lw r1,(r2+0)
 2007940:	59 a1 00 00 	sw (r13+0),r1
 2007944:	58 4d 00 00 	sw (r2+0),r13
 2007948:	15 8c 00 01 	sri r12,r12,1
 200794c:	b8 60 68 00 	mv r13,r3
 2007950:	5d 80 ff eb 	bne r12,r0,20078fc <_pow5mult+0x50>
 2007954:	b9 a0 08 00 	mv r1,r13
 2007958:	2b 9d 00 04 	lw ra,(sp+4)
 200795c:	2b 8b 00 18 	lw r11,(sp+24)
 2007960:	2b 8c 00 14 	lw r12,(sp+20)
 2007964:	2b 8d 00 10 	lw r13,(sp+16)
 2007968:	2b 8e 00 0c 	lw r14,(sp+12)
 200796c:	2b 8f 00 08 	lw r15,(sp+8)
 2007970:	37 9c 00 18 	addi sp,sp,24
 2007974:	c3 a0 00 00 	ret
 2007978:	b9 60 10 00 	mv r2,r11
 200797c:	b9 60 18 00 	mv r3,r11
 2007980:	b9 e0 08 00 	mv r1,r15
 2007984:	fb ff fe f6 	calli 200755c <_multiply>
 2007988:	59 61 00 00 	sw (r11+0),r1
 200798c:	58 2e 00 00 	sw (r1+0),r14
 2007990:	b8 20 58 00 	mv r11,r1
 2007994:	e3 ff ff de 	bi 200790c <_pow5mult+0x60>
 2007998:	34 63 ff ff 	addi r3,r3,-1
 200799c:	3c 63 00 02 	sli r3,r3,2
 20079a0:	78 04 02 00 	mvhi r4,0x200
 20079a4:	38 84 a5 f8 	ori r4,r4,0xa5f8
 20079a8:	b4 83 20 00 	add r4,r4,r3
 20079ac:	28 83 00 00 	lw r3,(r4+0)
 20079b0:	34 04 00 00 	mvi r4,0
 20079b4:	fb ff ff 7b 	calli 20077a0 <_multadd>
 20079b8:	b8 20 68 00 	mv r13,r1
 20079bc:	e3 ff ff c8 	bi 20078dc <_pow5mult+0x30>
 20079c0:	b9 e0 08 00 	mv r1,r15
 20079c4:	34 02 02 71 	mvi r2,625
 20079c8:	fb ff ff 69 	calli 200776c <_i2b>
 20079cc:	b8 20 58 00 	mv r11,r1
 20079d0:	59 e1 00 48 	sw (r15+72),r1
 20079d4:	34 01 00 00 	mvi r1,0
 20079d8:	59 61 00 00 	sw (r11+0),r1
 20079dc:	e3 ff ff c4 	bi 20078ec <_pow5mult+0x40>

020079e0 <_realloc_r>:
 20079e0:	37 9c ff d0 	addi sp,sp,-48
 20079e4:	5b 8b 00 30 	sw (sp+48),r11
 20079e8:	5b 8c 00 2c 	sw (sp+44),r12
 20079ec:	5b 8d 00 28 	sw (sp+40),r13
 20079f0:	5b 8e 00 24 	sw (sp+36),r14
 20079f4:	5b 8f 00 20 	sw (sp+32),r15
 20079f8:	5b 90 00 1c 	sw (sp+28),r16
 20079fc:	5b 91 00 18 	sw (sp+24),r17
 2007a00:	5b 92 00 14 	sw (sp+20),r18
 2007a04:	5b 93 00 10 	sw (sp+16),r19
 2007a08:	5b 94 00 0c 	sw (sp+12),r20
 2007a0c:	5b 95 00 08 	sw (sp+8),r21
 2007a10:	5b 9d 00 04 	sw (sp+4),ra
 2007a14:	b8 40 68 00 	mv r13,r2
 2007a18:	b8 60 60 00 	mv r12,r3
 2007a1c:	b8 20 88 00 	mv r17,r1
 2007a20:	5c 40 00 13 	bne r2,r0,2007a6c <_realloc_r+0x8c>
 2007a24:	b8 60 10 00 	mv r2,r3
 2007a28:	fb ff fa 6c 	calli 20063d8 <_malloc_r>
 2007a2c:	b8 20 58 00 	mv r11,r1
 2007a30:	b9 60 08 00 	mv r1,r11
 2007a34:	2b 9d 00 04 	lw ra,(sp+4)
 2007a38:	2b 8b 00 30 	lw r11,(sp+48)
 2007a3c:	2b 8c 00 2c 	lw r12,(sp+44)
 2007a40:	2b 8d 00 28 	lw r13,(sp+40)
 2007a44:	2b 8e 00 24 	lw r14,(sp+36)
 2007a48:	2b 8f 00 20 	lw r15,(sp+32)
 2007a4c:	2b 90 00 1c 	lw r16,(sp+28)
 2007a50:	2b 91 00 18 	lw r17,(sp+24)
 2007a54:	2b 92 00 14 	lw r18,(sp+20)
 2007a58:	2b 93 00 10 	lw r19,(sp+16)
 2007a5c:	2b 94 00 0c 	lw r20,(sp+12)
 2007a60:	2b 95 00 08 	lw r21,(sp+8)
 2007a64:	37 9c 00 30 	addi sp,sp,48
 2007a68:	c3 a0 00 00 	ret
 2007a6c:	34 4e ff f8 	addi r14,r2,-8
 2007a70:	fb ff fc f2 	calli 2006e38 <__malloc_lock>
 2007a74:	29 c5 00 04 	lw r5,(r14+4)
 2007a78:	35 82 00 0b 	addi r2,r12,11
 2007a7c:	34 01 00 16 	mvi r1,22
 2007a80:	b8 a0 18 00 	mv r3,r5
 2007a84:	54 41 00 64 	bgu r2,r1,2007c14 <_realloc_r+0x234>
 2007a88:	34 10 00 10 	mvi r16,16
 2007a8c:	ba 00 38 00 	mv r7,r16
 2007a90:	34 02 00 00 	mvi r2,0
 2007a94:	f5 90 08 00 	cmpgu r1,r12,r16
 2007a98:	34 0b 00 00 	mvi r11,0
 2007a9c:	b8 41 30 00 	or r6,r2,r1
 2007aa0:	5c cb ff e4 	bne r6,r11,2007a30 <_realloc_r+0x50>
 2007aa4:	34 08 ff fc 	mvi r8,-4
 2007aa8:	a0 a8 78 00 	and r15,r5,r8
 2007aac:	b9 c0 58 00 	mv r11,r14
 2007ab0:	b9 e0 90 00 	mv r18,r15
 2007ab4:	4d e7 00 47 	bge r15,r7,2007bd0 <_realloc_r+0x1f0>
 2007ab8:	78 14 02 00 	mvhi r20,0x200
 2007abc:	3a 94 af 00 	ori r20,r20,0xaf00
 2007ac0:	2a 89 00 08 	lw r9,(r20+8)
 2007ac4:	b5 cf 20 00 	add r4,r14,r15
 2007ac8:	45 24 00 63 	be r9,r4,2007c54 <_realloc_r+0x274>
 2007acc:	28 83 00 04 	lw r3,(r4+4)
 2007ad0:	34 01 ff fe 	mvi r1,-2
 2007ad4:	a0 61 08 00 	and r1,r3,r1
 2007ad8:	b4 81 08 00 	add r1,r4,r1
 2007adc:	28 22 00 04 	lw r2,(r1+4)
 2007ae0:	20 42 00 01 	andi r2,r2,0x1
 2007ae4:	5c 40 00 63 	bne r2,r0,2007c70 <_realloc_r+0x290>
 2007ae8:	a0 68 18 00 	and r3,r3,r8
 2007aec:	b4 6f 90 00 	add r18,r3,r15
 2007af0:	4e 47 00 96 	bge r18,r7,2007d48 <_realloc_r+0x368>
 2007af4:	20 a5 00 01 	andi r5,r5,0x1
 2007af8:	5c a0 00 61 	bne r5,r0,2007c7c <_realloc_r+0x29c>
 2007afc:	29 a1 ff f8 	lw r1,(r13+-8)
 2007b00:	c9 c1 98 00 	sub r19,r14,r1
 2007b04:	2a 62 00 04 	lw r2,(r19+4)
 2007b08:	34 01 ff fc 	mvi r1,-4
 2007b0c:	a0 41 08 00 	and r1,r2,r1
 2007b10:	44 85 00 c4 	be r4,r5,2007e20 <_realloc_r+0x440>
 2007b14:	44 89 00 c5 	be r4,r9,2007e28 <_realloc_r+0x448>
 2007b18:	b4 2f 08 00 	add r1,r1,r15
 2007b1c:	b4 61 90 00 	add r18,r3,r1
 2007b20:	4e 47 00 90 	bge r18,r7,2007d60 <_realloc_r+0x380>
 2007b24:	b8 20 90 00 	mv r18,r1
 2007b28:	48 f2 00 55 	bg r7,r18,2007c7c <_realloc_r+0x29c>
 2007b2c:	2a 61 00 08 	lw r1,(r19+8)
 2007b30:	2a 62 00 0c 	lw r2,(r19+12)
 2007b34:	35 e3 ff fc 	addi r3,r15,-4
 2007b38:	34 05 00 24 	mvi r5,36
 2007b3c:	58 41 00 08 	sw (r2+8),r1
 2007b40:	58 22 00 0c 	sw (r1+12),r2
 2007b44:	36 61 00 08 	addi r1,r19,8
 2007b48:	54 65 00 fc 	bgu r3,r5,2007f38 <_realloc_r+0x558>
 2007b4c:	b8 20 20 00 	mv r4,r1
 2007b50:	34 01 00 13 	mvi r1,19
 2007b54:	b9 a0 10 00 	mv r2,r13
 2007b58:	50 23 00 16 	bgeu r1,r3,2007bb0 <_realloc_r+0x1d0>
 2007b5c:	29 a1 00 00 	lw r1,(r13+0)
 2007b60:	35 a2 00 08 	addi r2,r13,8
 2007b64:	36 64 00 10 	addi r4,r19,16
 2007b68:	5a 61 00 08 	sw (r19+8),r1
 2007b6c:	29 ad 00 04 	lw r13,(r13+4)
 2007b70:	34 01 00 1b 	mvi r1,27
 2007b74:	5a 6d 00 0c 	sw (r19+12),r13
 2007b78:	50 23 00 0e 	bgeu r1,r3,2007bb0 <_realloc_r+0x1d0>
 2007b7c:	28 41 00 00 	lw r1,(r2+0)
 2007b80:	36 64 00 18 	addi r4,r19,24
 2007b84:	5a 61 00 10 	sw (r19+16),r1
 2007b88:	28 41 00 04 	lw r1,(r2+4)
 2007b8c:	34 42 00 08 	addi r2,r2,8
 2007b90:	5a 61 00 14 	sw (r19+20),r1
 2007b94:	5c 65 00 07 	bne r3,r5,2007bb0 <_realloc_r+0x1d0>
 2007b98:	28 41 00 00 	lw r1,(r2+0)
 2007b9c:	36 64 00 20 	addi r4,r19,32
 2007ba0:	5a 61 00 18 	sw (r19+24),r1
 2007ba4:	28 41 00 04 	lw r1,(r2+4)
 2007ba8:	34 42 00 08 	addi r2,r2,8
 2007bac:	5a 61 00 1c 	sw (r19+28),r1
 2007bb0:	28 41 00 00 	lw r1,(r2+0)
 2007bb4:	ba 60 58 00 	mv r11,r19
 2007bb8:	58 81 00 00 	sw (r4+0),r1
 2007bbc:	28 41 00 04 	lw r1,(r2+4)
 2007bc0:	58 81 00 04 	sw (r4+4),r1
 2007bc4:	28 42 00 08 	lw r2,(r2+8)
 2007bc8:	58 82 00 08 	sw (r4+8),r2
 2007bcc:	2a 63 00 04 	lw r3,(r19+4)
 2007bd0:	ca 50 20 00 	sub r4,r18,r16
 2007bd4:	34 01 00 0f 	mvi r1,15
 2007bd8:	50 24 00 14 	bgeu r1,r4,2007c28 <_realloc_r+0x248>
 2007bdc:	20 61 00 01 	andi r1,r3,0x1
 2007be0:	b8 30 08 00 	or r1,r1,r16
 2007be4:	59 61 00 04 	sw (r11+4),r1
 2007be8:	b5 70 10 00 	add r2,r11,r16
 2007bec:	38 81 00 01 	ori r1,r4,0x1
 2007bf0:	58 41 00 04 	sw (r2+4),r1
 2007bf4:	b4 44 20 00 	add r4,r2,r4
 2007bf8:	28 83 00 04 	lw r3,(r4+4)
 2007bfc:	34 42 00 08 	addi r2,r2,8
 2007c00:	ba 20 08 00 	mv r1,r17
 2007c04:	38 63 00 01 	ori r3,r3,0x1
 2007c08:	58 83 00 04 	sw (r4+4),r3
 2007c0c:	fb ff f7 cc 	calli 2005b3c <_free_r>
 2007c10:	e0 00 00 0d 	bi 2007c44 <_realloc_r+0x264>
 2007c14:	34 01 ff f8 	mvi r1,-8
 2007c18:	a0 41 80 00 	and r16,r2,r1
 2007c1c:	02 02 00 1f 	srui r2,r16,31
 2007c20:	ba 00 38 00 	mv r7,r16
 2007c24:	e3 ff ff 9c 	bi 2007a94 <_realloc_r+0xb4>
 2007c28:	20 61 00 01 	andi r1,r3,0x1
 2007c2c:	b8 32 08 00 	or r1,r1,r18
 2007c30:	59 61 00 04 	sw (r11+4),r1
 2007c34:	b5 72 10 00 	add r2,r11,r18
 2007c38:	28 41 00 04 	lw r1,(r2+4)
 2007c3c:	38 21 00 01 	ori r1,r1,0x1
 2007c40:	58 41 00 04 	sw (r2+4),r1
 2007c44:	ba 20 08 00 	mv r1,r17
 2007c48:	fb ff fc 7d 	calli 2006e3c <__malloc_unlock>
 2007c4c:	35 6b 00 08 	addi r11,r11,8
 2007c50:	e3 ff ff 78 	bi 2007a30 <_realloc_r+0x50>
 2007c54:	29 21 00 04 	lw r1,(r9+4)
 2007c58:	36 02 00 10 	addi r2,r16,16
 2007c5c:	a0 28 18 00 	and r3,r1,r8
 2007c60:	b4 6f 08 00 	add r1,r3,r15
 2007c64:	4c 22 00 ba 	bge r1,r2,2007f4c <_realloc_r+0x56c>
 2007c68:	b9 20 20 00 	mv r4,r9
 2007c6c:	e3 ff ff a2 	bi 2007af4 <_realloc_r+0x114>
 2007c70:	b8 c0 20 00 	mv r4,r6
 2007c74:	b8 c0 18 00 	mv r3,r6
 2007c78:	e3 ff ff 9f 	bi 2007af4 <_realloc_r+0x114>
 2007c7c:	b9 80 10 00 	mv r2,r12
 2007c80:	ba 20 08 00 	mv r1,r17
 2007c84:	fb ff f9 d5 	calli 20063d8 <_malloc_r>
 2007c88:	b8 20 58 00 	mv r11,r1
 2007c8c:	44 20 00 2c 	be r1,r0,2007d3c <_realloc_r+0x35c>
 2007c90:	29 c3 00 04 	lw r3,(r14+4)
 2007c94:	34 02 ff fe 	mvi r2,-2
 2007c98:	34 24 ff f8 	addi r4,r1,-8
 2007c9c:	a0 62 10 00 	and r2,r3,r2
 2007ca0:	b5 c2 10 00 	add r2,r14,r2
 2007ca4:	44 82 00 98 	be r4,r2,2007f04 <_realloc_r+0x524>
 2007ca8:	35 e3 ff fc 	addi r3,r15,-4
 2007cac:	34 05 00 24 	mvi r5,36
 2007cb0:	54 65 00 59 	bgu r3,r5,2007e14 <_realloc_r+0x434>
 2007cb4:	b8 20 20 00 	mv r4,r1
 2007cb8:	34 01 00 13 	mvi r1,19
 2007cbc:	b9 a0 10 00 	mv r2,r13
 2007cc0:	50 23 00 16 	bgeu r1,r3,2007d18 <_realloc_r+0x338>
 2007cc4:	29 a1 00 00 	lw r1,(r13+0)
 2007cc8:	35 64 00 08 	addi r4,r11,8
 2007ccc:	35 a2 00 08 	addi r2,r13,8
 2007cd0:	59 61 00 00 	sw (r11+0),r1
 2007cd4:	29 a1 00 04 	lw r1,(r13+4)
 2007cd8:	59 61 00 04 	sw (r11+4),r1
 2007cdc:	34 01 00 1b 	mvi r1,27
 2007ce0:	50 23 00 0e 	bgeu r1,r3,2007d18 <_realloc_r+0x338>
 2007ce4:	29 a1 00 08 	lw r1,(r13+8)
 2007ce8:	35 64 00 10 	addi r4,r11,16
 2007cec:	35 a2 00 10 	addi r2,r13,16
 2007cf0:	59 61 00 08 	sw (r11+8),r1
 2007cf4:	29 a1 00 0c 	lw r1,(r13+12)
 2007cf8:	59 61 00 0c 	sw (r11+12),r1
 2007cfc:	5c 65 00 07 	bne r3,r5,2007d18 <_realloc_r+0x338>
 2007d00:	29 a1 00 10 	lw r1,(r13+16)
 2007d04:	35 64 00 18 	addi r4,r11,24
 2007d08:	35 a2 00 18 	addi r2,r13,24
 2007d0c:	59 61 00 10 	sw (r11+16),r1
 2007d10:	29 a1 00 14 	lw r1,(r13+20)
 2007d14:	59 61 00 14 	sw (r11+20),r1
 2007d18:	28 41 00 00 	lw r1,(r2+0)
 2007d1c:	58 81 00 00 	sw (r4+0),r1
 2007d20:	28 41 00 04 	lw r1,(r2+4)
 2007d24:	58 81 00 04 	sw (r4+4),r1
 2007d28:	28 42 00 08 	lw r2,(r2+8)
 2007d2c:	58 82 00 08 	sw (r4+8),r2
 2007d30:	b9 a0 10 00 	mv r2,r13
 2007d34:	ba 20 08 00 	mv r1,r17
 2007d38:	fb ff f7 81 	calli 2005b3c <_free_r>
 2007d3c:	ba 20 08 00 	mv r1,r17
 2007d40:	fb ff fc 3f 	calli 2006e3c <__malloc_unlock>
 2007d44:	e3 ff ff 3b 	bi 2007a30 <_realloc_r+0x50>
 2007d48:	28 82 00 08 	lw r2,(r4+8)
 2007d4c:	28 81 00 0c 	lw r1,(r4+12)
 2007d50:	b8 a0 18 00 	mv r3,r5
 2007d54:	58 22 00 08 	sw (r1+8),r2
 2007d58:	58 41 00 0c 	sw (r2+12),r1
 2007d5c:	e3 ff ff 9d 	bi 2007bd0 <_realloc_r+0x1f0>
 2007d60:	28 83 00 08 	lw r3,(r4+8)
 2007d64:	28 81 00 0c 	lw r1,(r4+12)
 2007d68:	34 05 00 24 	mvi r5,36
 2007d6c:	35 e4 ff fc 	addi r4,r15,-4
 2007d70:	58 61 00 0c 	sw (r3+12),r1
 2007d74:	58 23 00 08 	sw (r1+8),r3
 2007d78:	2a 62 00 0c 	lw r2,(r19+12)
 2007d7c:	2a 61 00 08 	lw r1,(r19+8)
 2007d80:	36 63 00 08 	addi r3,r19,8
 2007d84:	58 41 00 08 	sw (r2+8),r1
 2007d88:	58 22 00 0c 	sw (r1+12),r2
 2007d8c:	54 85 00 64 	bgu r4,r5,2007f1c <_realloc_r+0x53c>
 2007d90:	34 01 00 13 	mvi r1,19
 2007d94:	b9 a0 10 00 	mv r2,r13
 2007d98:	50 24 00 16 	bgeu r1,r4,2007df0 <_realloc_r+0x410>
 2007d9c:	29 a1 00 00 	lw r1,(r13+0)
 2007da0:	35 a2 00 08 	addi r2,r13,8
 2007da4:	36 63 00 10 	addi r3,r19,16
 2007da8:	5a 61 00 08 	sw (r19+8),r1
 2007dac:	29 ad 00 04 	lw r13,(r13+4)
 2007db0:	34 01 00 1b 	mvi r1,27
 2007db4:	5a 6d 00 0c 	sw (r19+12),r13
 2007db8:	50 24 00 0e 	bgeu r1,r4,2007df0 <_realloc_r+0x410>
 2007dbc:	28 41 00 00 	lw r1,(r2+0)
 2007dc0:	36 63 00 18 	addi r3,r19,24
 2007dc4:	5a 61 00 10 	sw (r19+16),r1
 2007dc8:	28 41 00 04 	lw r1,(r2+4)
 2007dcc:	34 42 00 08 	addi r2,r2,8
 2007dd0:	5a 61 00 14 	sw (r19+20),r1
 2007dd4:	5c 85 00 07 	bne r4,r5,2007df0 <_realloc_r+0x410>
 2007dd8:	28 41 00 00 	lw r1,(r2+0)
 2007ddc:	36 63 00 20 	addi r3,r19,32
 2007de0:	5a 61 00 18 	sw (r19+24),r1
 2007de4:	28 41 00 04 	lw r1,(r2+4)
 2007de8:	34 42 00 08 	addi r2,r2,8
 2007dec:	5a 61 00 1c 	sw (r19+28),r1
 2007df0:	28 41 00 00 	lw r1,(r2+0)
 2007df4:	ba 60 58 00 	mv r11,r19
 2007df8:	58 61 00 00 	sw (r3+0),r1
 2007dfc:	28 41 00 04 	lw r1,(r2+4)
 2007e00:	58 61 00 04 	sw (r3+4),r1
 2007e04:	28 42 00 08 	lw r2,(r2+8)
 2007e08:	58 62 00 08 	sw (r3+8),r2
 2007e0c:	2a 63 00 04 	lw r3,(r19+4)
 2007e10:	e3 ff ff 70 	bi 2007bd0 <_realloc_r+0x1f0>
 2007e14:	b9 a0 10 00 	mv r2,r13
 2007e18:	fb ff e7 46 	calli 2001b30 <memcpy>
 2007e1c:	e3 ff ff c5 	bi 2007d30 <_realloc_r+0x350>
 2007e20:	b4 2f 90 00 	add r18,r1,r15
 2007e24:	e3 ff ff 41 	bi 2007b28 <_realloc_r+0x148>
 2007e28:	b4 2f 90 00 	add r18,r1,r15
 2007e2c:	b4 72 a8 00 	add r21,r3,r18
 2007e30:	36 01 00 10 	addi r1,r16,16
 2007e34:	48 35 ff 3d 	bg r1,r21,2007b28 <_realloc_r+0x148>
 2007e38:	2a 61 00 0c 	lw r1,(r19+12)
 2007e3c:	2a 62 00 08 	lw r2,(r19+8)
 2007e40:	35 e3 ff fc 	addi r3,r15,-4
 2007e44:	34 05 00 24 	mvi r5,36
 2007e48:	58 22 00 08 	sw (r1+8),r2
 2007e4c:	58 41 00 0c 	sw (r2+12),r1
 2007e50:	36 6b 00 08 	addi r11,r19,8
 2007e54:	54 65 00 4b 	bgu r3,r5,2007f80 <_realloc_r+0x5a0>
 2007e58:	34 01 00 13 	mvi r1,19
 2007e5c:	b9 a0 10 00 	mv r2,r13
 2007e60:	b9 60 20 00 	mv r4,r11
 2007e64:	50 23 00 16 	bgeu r1,r3,2007ebc <_realloc_r+0x4dc>
 2007e68:	29 a1 00 00 	lw r1,(r13+0)
 2007e6c:	35 a2 00 08 	addi r2,r13,8
 2007e70:	36 64 00 10 	addi r4,r19,16
 2007e74:	5a 61 00 08 	sw (r19+8),r1
 2007e78:	29 ad 00 04 	lw r13,(r13+4)
 2007e7c:	34 01 00 1b 	mvi r1,27
 2007e80:	5a 6d 00 0c 	sw (r19+12),r13
 2007e84:	50 23 00 0e 	bgeu r1,r3,2007ebc <_realloc_r+0x4dc>
 2007e88:	28 41 00 00 	lw r1,(r2+0)
 2007e8c:	36 64 00 18 	addi r4,r19,24
 2007e90:	5a 61 00 10 	sw (r19+16),r1
 2007e94:	28 41 00 04 	lw r1,(r2+4)
 2007e98:	34 42 00 08 	addi r2,r2,8
 2007e9c:	5a 61 00 14 	sw (r19+20),r1
 2007ea0:	5c 65 00 07 	bne r3,r5,2007ebc <_realloc_r+0x4dc>
 2007ea4:	28 41 00 00 	lw r1,(r2+0)
 2007ea8:	36 64 00 20 	addi r4,r19,32
 2007eac:	5a 61 00 18 	sw (r19+24),r1
 2007eb0:	28 41 00 04 	lw r1,(r2+4)
 2007eb4:	34 42 00 08 	addi r2,r2,8
 2007eb8:	5a 61 00 1c 	sw (r19+28),r1
 2007ebc:	28 41 00 00 	lw r1,(r2+0)
 2007ec0:	58 81 00 00 	sw (r4+0),r1
 2007ec4:	28 41 00 04 	lw r1,(r2+4)
 2007ec8:	58 81 00 04 	sw (r4+4),r1
 2007ecc:	28 42 00 08 	lw r2,(r2+8)
 2007ed0:	58 82 00 08 	sw (r4+8),r2
 2007ed4:	ca b0 08 00 	sub r1,r21,r16
 2007ed8:	b6 70 18 00 	add r3,r19,r16
 2007edc:	38 21 00 01 	ori r1,r1,0x1
 2007ee0:	58 61 00 04 	sw (r3+4),r1
 2007ee4:	2a 62 00 04 	lw r2,(r19+4)
 2007ee8:	ba 20 08 00 	mv r1,r17
 2007eec:	5a 83 00 08 	sw (r20+8),r3
 2007ef0:	20 42 00 01 	andi r2,r2,0x1
 2007ef4:	ba 02 10 00 	or r2,r16,r2
 2007ef8:	5a 62 00 04 	sw (r19+4),r2
 2007efc:	fb ff fb d0 	calli 2006e3c <__malloc_unlock>
 2007f00:	e3 ff fe cc 	bi 2007a30 <_realloc_r+0x50>
 2007f04:	28 81 00 04 	lw r1,(r4+4)
 2007f08:	34 02 ff fc 	mvi r2,-4
 2007f0c:	b9 c0 58 00 	mv r11,r14
 2007f10:	a0 22 08 00 	and r1,r1,r2
 2007f14:	b4 2f 90 00 	add r18,r1,r15
 2007f18:	e3 ff ff 2e 	bi 2007bd0 <_realloc_r+0x1f0>
 2007f1c:	b8 60 08 00 	mv r1,r3
 2007f20:	b9 a0 10 00 	mv r2,r13
 2007f24:	b8 80 18 00 	mv r3,r4
 2007f28:	fb ff e7 02 	calli 2001b30 <memcpy>
 2007f2c:	ba 60 58 00 	mv r11,r19
 2007f30:	2a 63 00 04 	lw r3,(r19+4)
 2007f34:	e3 ff ff 27 	bi 2007bd0 <_realloc_r+0x1f0>
 2007f38:	b9 a0 10 00 	mv r2,r13
 2007f3c:	fb ff e6 fd 	calli 2001b30 <memcpy>
 2007f40:	ba 60 58 00 	mv r11,r19
 2007f44:	2a 63 00 04 	lw r3,(r19+4)
 2007f48:	e3 ff ff 22 	bi 2007bd0 <_realloc_r+0x1f0>
 2007f4c:	c8 30 08 00 	sub r1,r1,r16
 2007f50:	b5 d0 18 00 	add r3,r14,r16
 2007f54:	38 21 00 01 	ori r1,r1,0x1
 2007f58:	58 61 00 04 	sw (r3+4),r1
 2007f5c:	29 c2 00 04 	lw r2,(r14+4)
 2007f60:	ba 20 08 00 	mv r1,r17
 2007f64:	5a 83 00 08 	sw (r20+8),r3
 2007f68:	20 42 00 01 	andi r2,r2,0x1
 2007f6c:	ba 02 10 00 	or r2,r16,r2
 2007f70:	59 c2 00 04 	sw (r14+4),r2
 2007f74:	fb ff fb b2 	calli 2006e3c <__malloc_unlock>
 2007f78:	35 cb 00 08 	addi r11,r14,8
 2007f7c:	e3 ff fe ad 	bi 2007a30 <_realloc_r+0x50>
 2007f80:	b9 a0 10 00 	mv r2,r13
 2007f84:	b9 60 08 00 	mv r1,r11
 2007f88:	fb ff e6 ea 	calli 2001b30 <memcpy>
 2007f8c:	e3 ff ff d2 	bi 2007ed4 <_realloc_r+0x4f4>

02007f90 <isinf>:
 2007f90:	c8 02 18 00 	sub r3,r0,r2
 2007f94:	b8 62 18 00 	or r3,r3,r2
 2007f98:	78 04 7f ff 	mvhi r4,0x7fff
 2007f9c:	38 84 ff ff 	ori r4,r4,0xffff
 2007fa0:	00 63 00 1f 	srui r3,r3,31
 2007fa4:	a0 24 08 00 	and r1,r1,r4
 2007fa8:	78 02 7f f0 	mvhi r2,0x7ff0
 2007fac:	b8 61 18 00 	or r3,r3,r1
 2007fb0:	38 42 00 00 	ori r2,r2,0x0
 2007fb4:	c8 43 10 00 	sub r2,r2,r3
 2007fb8:	c8 02 08 00 	sub r1,r0,r2
 2007fbc:	b8 22 08 00 	or r1,r1,r2
 2007fc0:	14 21 00 1f 	sri r1,r1,31
 2007fc4:	34 21 00 01 	addi r1,r1,1
 2007fc8:	c3 a0 00 00 	ret

02007fcc <isnan>:
 2007fcc:	c8 02 18 00 	sub r3,r0,r2
 2007fd0:	b8 62 18 00 	or r3,r3,r2
 2007fd4:	78 02 7f ff 	mvhi r2,0x7fff
 2007fd8:	38 42 ff ff 	ori r2,r2,0xffff
 2007fdc:	00 63 00 1f 	srui r3,r3,31
 2007fe0:	a0 22 20 00 	and r4,r1,r2
 2007fe4:	78 01 7f f0 	mvhi r1,0x7ff0
 2007fe8:	b8 64 18 00 	or r3,r3,r4
 2007fec:	38 21 00 00 	ori r1,r1,0x0
 2007ff0:	c8 23 08 00 	sub r1,r1,r3
 2007ff4:	00 21 00 1f 	srui r1,r1,31
 2007ff8:	c3 a0 00 00 	ret

02007ffc <_sbrk_r>:
 2007ffc:	37 9c ff f4 	addi sp,sp,-12
 2008000:	5b 8b 00 0c 	sw (sp+12),r11
 2008004:	5b 8c 00 08 	sw (sp+8),r12
 2008008:	5b 9d 00 04 	sw (sp+4),ra
 200800c:	78 0b 02 00 	mvhi r11,0x200
 2008010:	b8 20 60 00 	mv r12,r1
 2008014:	39 6b b5 bc 	ori r11,r11,0xb5bc
 2008018:	b8 40 08 00 	mv r1,r2
 200801c:	34 02 00 00 	mvi r2,0
 2008020:	59 62 00 00 	sw (r11+0),r2
 2008024:	f8 00 08 50 	calli 200a164 <_sbrk>
 2008028:	b8 20 10 00 	mv r2,r1
 200802c:	34 01 ff ff 	mvi r1,-1
 2008030:	44 41 00 07 	be r2,r1,200804c <_sbrk_r+0x50>
 2008034:	b8 40 08 00 	mv r1,r2
 2008038:	2b 9d 00 04 	lw ra,(sp+4)
 200803c:	2b 8b 00 0c 	lw r11,(sp+12)
 2008040:	2b 8c 00 08 	lw r12,(sp+8)
 2008044:	37 9c 00 0c 	addi sp,sp,12
 2008048:	c3 a0 00 00 	ret
 200804c:	29 61 00 00 	lw r1,(r11+0)
 2008050:	44 20 ff f9 	be r1,r0,2008034 <_sbrk_r+0x38>
 2008054:	59 81 00 00 	sw (r12+0),r1
 2008058:	e3 ff ff f7 	bi 2008034 <_sbrk_r+0x38>

0200805c <__sclose>:
 200805c:	37 9c ff fc 	addi sp,sp,-4
 2008060:	5b 9d 00 04 	sw (sp+4),ra
 2008064:	78 03 02 00 	mvhi r3,0x200
 2008068:	38 63 aa e8 	ori r3,r3,0xaae8
 200806c:	1c 22 00 0e 	lh r2,(r1+14)
 2008070:	28 61 00 00 	lw r1,(r3+0)
 2008074:	f8 00 00 e6 	calli 200840c <_close_r>
 2008078:	2b 9d 00 04 	lw ra,(sp+4)
 200807c:	37 9c 00 04 	addi sp,sp,4
 2008080:	c3 a0 00 00 	ret

02008084 <__sseek>:
 2008084:	37 9c ff f8 	addi sp,sp,-8
 2008088:	5b 8b 00 08 	sw (sp+8),r11
 200808c:	5b 9d 00 04 	sw (sp+4),ra
 2008090:	78 04 02 00 	mvhi r4,0x200
 2008094:	b8 20 58 00 	mv r11,r1
 2008098:	38 84 aa e8 	ori r4,r4,0xaae8
 200809c:	b8 40 28 00 	mv r5,r2
 20080a0:	28 81 00 00 	lw r1,(r4+0)
 20080a4:	1d 62 00 0e 	lh r2,(r11+14)
 20080a8:	b8 60 20 00 	mv r4,r3
 20080ac:	b8 a0 18 00 	mv r3,r5
 20080b0:	f8 00 01 6d 	calli 2008664 <_lseek_r>
 20080b4:	b8 20 10 00 	mv r2,r1
 20080b8:	34 01 ff ff 	mvi r1,-1
 20080bc:	44 41 00 0a 	be r2,r1,20080e4 <__sseek+0x60>
 20080c0:	2d 61 00 0c 	lhu r1,(r11+12)
 20080c4:	59 62 00 50 	sw (r11+80),r2
 20080c8:	38 21 10 00 	ori r1,r1,0x1000
 20080cc:	0d 61 00 0c 	sh (r11+12),r1
 20080d0:	b8 40 08 00 	mv r1,r2
 20080d4:	2b 9d 00 04 	lw ra,(sp+4)
 20080d8:	2b 8b 00 08 	lw r11,(sp+8)
 20080dc:	37 9c 00 08 	addi sp,sp,8
 20080e0:	c3 a0 00 00 	ret
 20080e4:	2d 61 00 0c 	lhu r1,(r11+12)
 20080e8:	20 21 ef ff 	andi r1,r1,0xefff
 20080ec:	0d 61 00 0c 	sh (r11+12),r1
 20080f0:	b8 40 08 00 	mv r1,r2
 20080f4:	2b 9d 00 04 	lw ra,(sp+4)
 20080f8:	2b 8b 00 08 	lw r11,(sp+8)
 20080fc:	37 9c 00 08 	addi sp,sp,8
 2008100:	c3 a0 00 00 	ret

02008104 <__swrite>:
 2008104:	37 9c ff ec 	addi sp,sp,-20
 2008108:	5b 8b 00 14 	sw (sp+20),r11
 200810c:	5b 8c 00 10 	sw (sp+16),r12
 2008110:	5b 8d 00 0c 	sw (sp+12),r13
 2008114:	5b 8e 00 08 	sw (sp+8),r14
 2008118:	5b 9d 00 04 	sw (sp+4),ra
 200811c:	1c 24 00 0c 	lh r4,(r1+12)
 2008120:	b8 20 60 00 	mv r12,r1
 2008124:	b8 40 68 00 	mv r13,r2
 2008128:	20 81 01 00 	andi r1,r4,0x100
 200812c:	b8 60 70 00 	mv r14,r3
 2008130:	5c 20 00 12 	bne r1,r0,2008178 <__swrite+0x74>
 2008134:	78 0b 02 00 	mvhi r11,0x200
 2008138:	39 6b aa e8 	ori r11,r11,0xaae8
 200813c:	29 61 00 00 	lw r1,(r11+0)
 2008140:	1d 82 00 0e 	lh r2,(r12+14)
 2008144:	34 03 ef ff 	mvi r3,-4097
 2008148:	a0 83 18 00 	and r3,r4,r3
 200814c:	0d 83 00 0c 	sh (r12+12),r3
 2008150:	b9 c0 20 00 	mv r4,r14
 2008154:	b9 a0 18 00 	mv r3,r13
 2008158:	f8 00 00 60 	calli 20082d8 <_write_r>
 200815c:	2b 9d 00 04 	lw ra,(sp+4)
 2008160:	2b 8b 00 14 	lw r11,(sp+20)
 2008164:	2b 8c 00 10 	lw r12,(sp+16)
 2008168:	2b 8d 00 0c 	lw r13,(sp+12)
 200816c:	2b 8e 00 08 	lw r14,(sp+8)
 2008170:	37 9c 00 14 	addi sp,sp,20
 2008174:	c3 a0 00 00 	ret
 2008178:	78 0b 02 00 	mvhi r11,0x200
 200817c:	39 6b aa e8 	ori r11,r11,0xaae8
 2008180:	29 61 00 00 	lw r1,(r11+0)
 2008184:	1d 82 00 0e 	lh r2,(r12+14)
 2008188:	34 04 00 02 	mvi r4,2
 200818c:	34 03 00 00 	mvi r3,0
 2008190:	f8 00 01 35 	calli 2008664 <_lseek_r>
 2008194:	1d 84 00 0c 	lh r4,(r12+12)
 2008198:	e3 ff ff e9 	bi 200813c <__swrite+0x38>

0200819c <__sread>:
 200819c:	37 9c ff f8 	addi sp,sp,-8
 20081a0:	5b 8b 00 08 	sw (sp+8),r11
 20081a4:	5b 9d 00 04 	sw (sp+4),ra
 20081a8:	78 04 02 00 	mvhi r4,0x200
 20081ac:	b8 20 58 00 	mv r11,r1
 20081b0:	38 84 aa e8 	ori r4,r4,0xaae8
 20081b4:	b8 40 28 00 	mv r5,r2
 20081b8:	28 81 00 00 	lw r1,(r4+0)
 20081bc:	1d 62 00 0e 	lh r2,(r11+14)
 20081c0:	b8 60 20 00 	mv r4,r3
 20081c4:	b8 a0 18 00 	mv r3,r5
 20081c8:	f8 00 01 46 	calli 20086e0 <_read_r>
 20081cc:	b8 20 10 00 	mv r2,r1
 20081d0:	48 01 00 09 	bg r0,r1,20081f4 <__sread+0x58>
 20081d4:	29 61 00 50 	lw r1,(r11+80)
 20081d8:	b4 22 08 00 	add r1,r1,r2
 20081dc:	59 61 00 50 	sw (r11+80),r1
 20081e0:	b8 40 08 00 	mv r1,r2
 20081e4:	2b 9d 00 04 	lw ra,(sp+4)
 20081e8:	2b 8b 00 08 	lw r11,(sp+8)
 20081ec:	37 9c 00 08 	addi sp,sp,8
 20081f0:	c3 a0 00 00 	ret
 20081f4:	2d 61 00 0c 	lhu r1,(r11+12)
 20081f8:	20 21 ef ff 	andi r1,r1,0xefff
 20081fc:	0d 61 00 0c 	sh (r11+12),r1
 2008200:	b8 40 08 00 	mv r1,r2
 2008204:	2b 9d 00 04 	lw ra,(sp+4)
 2008208:	2b 8b 00 08 	lw r11,(sp+8)
 200820c:	37 9c 00 08 	addi sp,sp,8
 2008210:	c3 a0 00 00 	ret

02008214 <strcmp>:
 2008214:	b8 20 18 00 	mv r3,r1
 2008218:	b8 41 08 00 	or r1,r2,r1
 200821c:	20 21 00 03 	andi r1,r1,0x3
 2008220:	5c 20 00 1e 	bne r1,r0,2008298 <strcmp+0x84>
 2008224:	b8 40 28 00 	mv r5,r2
 2008228:	28 a1 00 00 	lw r1,(r5+0)
 200822c:	28 62 00 00 	lw r2,(r3+0)
 2008230:	b8 60 30 00 	mv r6,r3
 2008234:	5c 41 00 17 	bne r2,r1,2008290 <strcmp+0x7c>
 2008238:	78 03 fe fe 	mvhi r3,0xfefe
 200823c:	38 63 fe ff 	ori r3,r3,0xfeff
 2008240:	a4 40 20 00 	not r4,r2
 2008244:	78 01 80 80 	mvhi r1,0x8080
 2008248:	b4 43 10 00 	add r2,r2,r3
 200824c:	38 21 80 80 	ori r1,r1,0x8080
 2008250:	a0 44 10 00 	and r2,r2,r4
 2008254:	a0 41 10 00 	and r2,r2,r1
 2008258:	b8 60 40 00 	mv r8,r3
 200825c:	b8 20 38 00 	mv r7,r1
 2008260:	44 40 00 03 	be r2,r0,200826c <strcmp+0x58>
 2008264:	e0 00 00 1b 	bi 20082d0 <strcmp+0xbc>
 2008268:	5c 20 00 1a 	bne r1,r0,20082d0 <strcmp+0xbc>
 200826c:	34 c6 00 04 	addi r6,r6,4
 2008270:	28 c2 00 00 	lw r2,(r6+0)
 2008274:	34 a5 00 04 	addi r5,r5,4
 2008278:	28 a4 00 00 	lw r4,(r5+0)
 200827c:	a4 40 18 00 	not r3,r2
 2008280:	b4 48 08 00 	add r1,r2,r8
 2008284:	a0 23 08 00 	and r1,r1,r3
 2008288:	a0 27 08 00 	and r1,r1,r7
 200828c:	44 44 ff f7 	be r2,r4,2008268 <strcmp+0x54>
 2008290:	b8 c0 18 00 	mv r3,r6
 2008294:	b8 a0 10 00 	mv r2,r5
 2008298:	40 64 00 00 	lbu r4,(r3+0)
 200829c:	5c 80 00 06 	bne r4,r0,20082b4 <strcmp+0xa0>
 20082a0:	e0 00 00 09 	bi 20082c4 <strcmp+0xb0>
 20082a4:	34 63 00 01 	addi r3,r3,1
 20082a8:	40 64 00 00 	lbu r4,(r3+0)
 20082ac:	34 42 00 01 	addi r2,r2,1
 20082b0:	44 80 00 05 	be r4,r0,20082c4 <strcmp+0xb0>
 20082b4:	40 41 00 00 	lbu r1,(r2+0)
 20082b8:	44 24 ff fb 	be r1,r4,20082a4 <strcmp+0x90>
 20082bc:	c8 81 08 00 	sub r1,r4,r1
 20082c0:	c3 a0 00 00 	ret
 20082c4:	40 41 00 00 	lbu r1,(r2+0)
 20082c8:	c8 81 08 00 	sub r1,r4,r1
 20082cc:	c3 a0 00 00 	ret
 20082d0:	34 01 00 00 	mvi r1,0
 20082d4:	c3 a0 00 00 	ret

020082d8 <_write_r>:
 20082d8:	37 9c ff f4 	addi sp,sp,-12
 20082dc:	5b 8b 00 0c 	sw (sp+12),r11
 20082e0:	5b 8c 00 08 	sw (sp+8),r12
 20082e4:	5b 9d 00 04 	sw (sp+4),ra
 20082e8:	78 0b 02 00 	mvhi r11,0x200
 20082ec:	b8 20 60 00 	mv r12,r1
 20082f0:	39 6b b5 bc 	ori r11,r11,0xb5bc
 20082f4:	b8 40 08 00 	mv r1,r2
 20082f8:	b8 60 10 00 	mv r2,r3
 20082fc:	b8 80 18 00 	mv r3,r4
 2008300:	34 04 00 00 	mvi r4,0
 2008304:	59 64 00 00 	sw (r11+0),r4
 2008308:	f8 00 07 7e 	calli 200a100 <_write>
 200830c:	b8 20 10 00 	mv r2,r1
 2008310:	34 01 ff ff 	mvi r1,-1
 2008314:	44 41 00 07 	be r2,r1,2008330 <_write_r+0x58>
 2008318:	b8 40 08 00 	mv r1,r2
 200831c:	2b 9d 00 04 	lw ra,(sp+4)
 2008320:	2b 8b 00 0c 	lw r11,(sp+12)
 2008324:	2b 8c 00 08 	lw r12,(sp+8)
 2008328:	37 9c 00 0c 	addi sp,sp,12
 200832c:	c3 a0 00 00 	ret
 2008330:	29 61 00 00 	lw r1,(r11+0)
 2008334:	44 20 ff f9 	be r1,r0,2008318 <_write_r+0x40>
 2008338:	59 81 00 00 	sw (r12+0),r1
 200833c:	b8 40 08 00 	mv r1,r2
 2008340:	2b 9d 00 04 	lw ra,(sp+4)
 2008344:	2b 8b 00 0c 	lw r11,(sp+12)
 2008348:	2b 8c 00 08 	lw r12,(sp+8)
 200834c:	37 9c 00 0c 	addi sp,sp,12
 2008350:	c3 a0 00 00 	ret

02008354 <_calloc_r>:
 2008354:	37 9c ff f8 	addi sp,sp,-8
 2008358:	5b 8b 00 08 	sw (sp+8),r11
 200835c:	5b 9d 00 04 	sw (sp+4),ra
 2008360:	88 62 10 00 	mul r2,r3,r2
 2008364:	fb ff f8 1d 	calli 20063d8 <_malloc_r>
 2008368:	34 04 00 00 	mvi r4,0
 200836c:	b8 20 58 00 	mv r11,r1
 2008370:	44 24 00 1b 	be r1,r4,20083dc <_calloc_r+0x88>
 2008374:	28 22 ff fc 	lw r2,(r1+-4)
 2008378:	34 03 ff fc 	mvi r3,-4
 200837c:	34 05 00 24 	mvi r5,36
 2008380:	a0 43 10 00 	and r2,r2,r3
 2008384:	b4 43 18 00 	add r3,r2,r3
 2008388:	54 65 00 1a 	bgu r3,r5,20083f0 <_calloc_r+0x9c>
 200838c:	b8 20 10 00 	mv r2,r1
 2008390:	34 01 00 13 	mvi r1,19
 2008394:	50 23 00 0d 	bgeu r1,r3,20083c8 <_calloc_r+0x74>
 2008398:	59 64 00 00 	sw (r11+0),r4
 200839c:	59 64 00 04 	sw (r11+4),r4
 20083a0:	34 01 00 1b 	mvi r1,27
 20083a4:	35 62 00 08 	addi r2,r11,8
 20083a8:	50 23 00 08 	bgeu r1,r3,20083c8 <_calloc_r+0x74>
 20083ac:	59 64 00 08 	sw (r11+8),r4
 20083b0:	59 64 00 0c 	sw (r11+12),r4
 20083b4:	35 62 00 10 	addi r2,r11,16
 20083b8:	5c 65 00 04 	bne r3,r5,20083c8 <_calloc_r+0x74>
 20083bc:	59 64 00 14 	sw (r11+20),r4
 20083c0:	59 64 00 10 	sw (r11+16),r4
 20083c4:	35 62 00 18 	addi r2,r11,24
 20083c8:	34 01 00 00 	mvi r1,0
 20083cc:	58 41 00 04 	sw (r2+4),r1
 20083d0:	58 41 00 00 	sw (r2+0),r1
 20083d4:	34 42 00 04 	addi r2,r2,4
 20083d8:	58 41 00 04 	sw (r2+4),r1
 20083dc:	b9 60 08 00 	mv r1,r11
 20083e0:	2b 9d 00 04 	lw ra,(sp+4)
 20083e4:	2b 8b 00 08 	lw r11,(sp+8)
 20083e8:	37 9c 00 08 	addi sp,sp,8
 20083ec:	c3 a0 00 00 	ret
 20083f0:	b8 80 10 00 	mv r2,r4
 20083f4:	fb ff fa 56 	calli 2006d4c <memset>
 20083f8:	b9 60 08 00 	mv r1,r11
 20083fc:	2b 9d 00 04 	lw ra,(sp+4)
 2008400:	2b 8b 00 08 	lw r11,(sp+8)
 2008404:	37 9c 00 08 	addi sp,sp,8
 2008408:	c3 a0 00 00 	ret

0200840c <_close_r>:
 200840c:	37 9c ff f4 	addi sp,sp,-12
 2008410:	5b 8b 00 0c 	sw (sp+12),r11
 2008414:	5b 8c 00 08 	sw (sp+8),r12
 2008418:	5b 9d 00 04 	sw (sp+4),ra
 200841c:	78 0b 02 00 	mvhi r11,0x200
 2008420:	b8 20 60 00 	mv r12,r1
 2008424:	39 6b b5 bc 	ori r11,r11,0xb5bc
 2008428:	b8 40 08 00 	mv r1,r2
 200842c:	34 02 00 00 	mvi r2,0
 2008430:	59 62 00 00 	sw (r11+0),r2
 2008434:	f8 00 06 9e 	calli 2009eac <_close>
 2008438:	b8 20 10 00 	mv r2,r1
 200843c:	34 01 ff ff 	mvi r1,-1
 2008440:	44 41 00 07 	be r2,r1,200845c <_close_r+0x50>
 2008444:	b8 40 08 00 	mv r1,r2
 2008448:	2b 9d 00 04 	lw ra,(sp+4)
 200844c:	2b 8b 00 0c 	lw r11,(sp+12)
 2008450:	2b 8c 00 08 	lw r12,(sp+8)
 2008454:	37 9c 00 0c 	addi sp,sp,12
 2008458:	c3 a0 00 00 	ret
 200845c:	29 61 00 00 	lw r1,(r11+0)
 2008460:	44 20 ff f9 	be r1,r0,2008444 <_close_r+0x38>
 2008464:	59 81 00 00 	sw (r12+0),r1
 2008468:	b8 40 08 00 	mv r1,r2
 200846c:	2b 9d 00 04 	lw ra,(sp+4)
 2008470:	2b 8b 00 0c 	lw r11,(sp+12)
 2008474:	2b 8c 00 08 	lw r12,(sp+8)
 2008478:	37 9c 00 0c 	addi sp,sp,12
 200847c:	c3 a0 00 00 	ret

02008480 <_fclose_r>:
 2008480:	37 9c ff ec 	addi sp,sp,-20
 2008484:	5b 8b 00 14 	sw (sp+20),r11
 2008488:	5b 8c 00 10 	sw (sp+16),r12
 200848c:	5b 8d 00 0c 	sw (sp+12),r13
 2008490:	5b 8e 00 08 	sw (sp+8),r14
 2008494:	5b 9d 00 04 	sw (sp+4),ra
 2008498:	b8 40 58 00 	mv r11,r2
 200849c:	b8 20 70 00 	mv r14,r1
 20084a0:	b8 40 68 00 	mv r13,r2
 20084a4:	44 40 00 27 	be r2,r0,2008540 <_fclose_r+0xc0>
 20084a8:	78 0c 02 00 	mvhi r12,0x200
 20084ac:	39 8c aa e8 	ori r12,r12,0xaae8
 20084b0:	fb ff f5 4f 	calli 20059ec <__sfp_lock_acquire>
 20084b4:	29 82 00 00 	lw r2,(r12+0)
 20084b8:	44 40 00 03 	be r2,r0,20084c4 <_fclose_r+0x44>
 20084bc:	28 41 00 38 	lw r1,(r2+56)
 20084c0:	44 20 00 32 	be r1,r0,2008588 <_fclose_r+0x108>
 20084c4:	1d 61 00 0c 	lh r1,(r11+12)
 20084c8:	44 20 00 26 	be r1,r0,2008560 <_fclose_r+0xe0>
 20084cc:	20 21 00 08 	andi r1,r1,0x8
 20084d0:	b8 20 68 00 	mv r13,r1
 20084d4:	5c 20 00 30 	bne r1,r0,2008594 <_fclose_r+0x114>
 20084d8:	29 62 00 2c 	lw r2,(r11+44)
 20084dc:	44 40 00 05 	be r2,r0,20084f0 <_fclose_r+0x70>
 20084e0:	29 61 00 1c 	lw r1,(r11+28)
 20084e4:	d8 40 00 00 	call r2
 20084e8:	4c 20 00 02 	bge r1,r0,20084f0 <_fclose_r+0x70>
 20084ec:	34 0d ff ff 	mvi r13,-1
 20084f0:	2d 61 00 0c 	lhu r1,(r11+12)
 20084f4:	20 21 00 80 	andi r1,r1,0x80
 20084f8:	5c 20 00 2d 	bne r1,r0,20085ac <_fclose_r+0x12c>
 20084fc:	29 62 00 30 	lw r2,(r11+48)
 2008500:	44 40 00 07 	be r2,r0,200851c <_fclose_r+0x9c>
 2008504:	35 61 00 40 	addi r1,r11,64
 2008508:	44 41 00 03 	be r2,r1,2008514 <_fclose_r+0x94>
 200850c:	29 81 00 00 	lw r1,(r12+0)
 2008510:	fb ff f5 8b 	calli 2005b3c <_free_r>
 2008514:	34 01 00 00 	mvi r1,0
 2008518:	59 61 00 30 	sw (r11+48),r1
 200851c:	29 62 00 44 	lw r2,(r11+68)
 2008520:	44 40 00 05 	be r2,r0,2008534 <_fclose_r+0xb4>
 2008524:	29 81 00 00 	lw r1,(r12+0)
 2008528:	fb ff f5 85 	calli 2005b3c <_free_r>
 200852c:	34 01 00 00 	mvi r1,0
 2008530:	59 61 00 44 	sw (r11+68),r1
 2008534:	34 01 00 00 	mvi r1,0
 2008538:	0d 61 00 0c 	sh (r11+12),r1
 200853c:	fb ff f5 2d 	calli 20059f0 <__sfp_lock_release>
 2008540:	b9 a0 08 00 	mv r1,r13
 2008544:	2b 9d 00 04 	lw ra,(sp+4)
 2008548:	2b 8b 00 14 	lw r11,(sp+20)
 200854c:	2b 8c 00 10 	lw r12,(sp+16)
 2008550:	2b 8d 00 0c 	lw r13,(sp+12)
 2008554:	2b 8e 00 08 	lw r14,(sp+8)
 2008558:	37 9c 00 14 	addi sp,sp,20
 200855c:	c3 a0 00 00 	ret
 2008560:	b8 20 68 00 	mv r13,r1
 2008564:	fb ff f5 23 	calli 20059f0 <__sfp_lock_release>
 2008568:	b9 a0 08 00 	mv r1,r13
 200856c:	2b 9d 00 04 	lw ra,(sp+4)
 2008570:	2b 8b 00 14 	lw r11,(sp+20)
 2008574:	2b 8c 00 10 	lw r12,(sp+16)
 2008578:	2b 8d 00 0c 	lw r13,(sp+12)
 200857c:	2b 8e 00 08 	lw r14,(sp+8)
 2008580:	37 9c 00 14 	addi sp,sp,20
 2008584:	c3 a0 00 00 	ret
 2008588:	b8 40 08 00 	mv r1,r2
 200858c:	fb ff f4 d0 	calli 20058cc <__sinit>
 2008590:	e3 ff ff cd 	bi 20084c4 <_fclose_r+0x44>
 2008594:	b9 60 08 00 	mv r1,r11
 2008598:	fb ff f4 8c 	calli 20057c8 <fflush>
 200859c:	29 62 00 2c 	lw r2,(r11+44)
 20085a0:	b8 20 68 00 	mv r13,r1
 20085a4:	5c 40 ff cf 	bne r2,r0,20084e0 <_fclose_r+0x60>
 20085a8:	e3 ff ff d2 	bi 20084f0 <_fclose_r+0x70>
 20085ac:	29 62 00 10 	lw r2,(r11+16)
 20085b0:	b9 c0 08 00 	mv r1,r14
 20085b4:	fb ff f5 62 	calli 2005b3c <_free_r>
 20085b8:	29 62 00 30 	lw r2,(r11+48)
 20085bc:	5c 40 ff d2 	bne r2,r0,2008504 <_fclose_r+0x84>
 20085c0:	e3 ff ff d7 	bi 200851c <_fclose_r+0x9c>

020085c4 <fclose>:
 20085c4:	37 9c ff fc 	addi sp,sp,-4
 20085c8:	5b 9d 00 04 	sw (sp+4),ra
 20085cc:	78 03 02 00 	mvhi r3,0x200
 20085d0:	38 63 aa e8 	ori r3,r3,0xaae8
 20085d4:	b8 20 10 00 	mv r2,r1
 20085d8:	28 61 00 00 	lw r1,(r3+0)
 20085dc:	fb ff ff a9 	calli 2008480 <_fclose_r>
 20085e0:	2b 9d 00 04 	lw ra,(sp+4)
 20085e4:	37 9c 00 04 	addi sp,sp,4
 20085e8:	c3 a0 00 00 	ret

020085ec <_fstat_r>:
 20085ec:	37 9c ff f4 	addi sp,sp,-12
 20085f0:	5b 8b 00 0c 	sw (sp+12),r11
 20085f4:	5b 8c 00 08 	sw (sp+8),r12
 20085f8:	5b 9d 00 04 	sw (sp+4),ra
 20085fc:	78 0b 02 00 	mvhi r11,0x200
 2008600:	b8 20 60 00 	mv r12,r1
 2008604:	39 6b b5 bc 	ori r11,r11,0xb5bc
 2008608:	b8 40 08 00 	mv r1,r2
 200860c:	b8 60 10 00 	mv r2,r3
 2008610:	34 03 00 00 	mvi r3,0
 2008614:	59 63 00 00 	sw (r11+0),r3
 2008618:	f8 00 06 a2 	calli 200a0a0 <_fstat>
 200861c:	b8 20 10 00 	mv r2,r1
 2008620:	34 01 ff ff 	mvi r1,-1
 2008624:	44 41 00 07 	be r2,r1,2008640 <_fstat_r+0x54>
 2008628:	b8 40 08 00 	mv r1,r2
 200862c:	2b 9d 00 04 	lw ra,(sp+4)
 2008630:	2b 8b 00 0c 	lw r11,(sp+12)
 2008634:	2b 8c 00 08 	lw r12,(sp+8)
 2008638:	37 9c 00 0c 	addi sp,sp,12
 200863c:	c3 a0 00 00 	ret
 2008640:	29 61 00 00 	lw r1,(r11+0)
 2008644:	44 20 ff f9 	be r1,r0,2008628 <_fstat_r+0x3c>
 2008648:	59 81 00 00 	sw (r12+0),r1
 200864c:	b8 40 08 00 	mv r1,r2
 2008650:	2b 9d 00 04 	lw ra,(sp+4)
 2008654:	2b 8b 00 0c 	lw r11,(sp+12)
 2008658:	2b 8c 00 08 	lw r12,(sp+8)
 200865c:	37 9c 00 0c 	addi sp,sp,12
 2008660:	c3 a0 00 00 	ret

02008664 <_lseek_r>:
 2008664:	37 9c ff f4 	addi sp,sp,-12
 2008668:	5b 8b 00 0c 	sw (sp+12),r11
 200866c:	5b 8c 00 08 	sw (sp+8),r12
 2008670:	5b 9d 00 04 	sw (sp+4),ra
 2008674:	78 0b 02 00 	mvhi r11,0x200
 2008678:	b8 20 60 00 	mv r12,r1
 200867c:	39 6b b5 bc 	ori r11,r11,0xb5bc
 2008680:	b8 40 08 00 	mv r1,r2
 2008684:	b8 60 10 00 	mv r2,r3
 2008688:	b8 80 18 00 	mv r3,r4
 200868c:	34 04 00 00 	mvi r4,0
 2008690:	59 64 00 00 	sw (r11+0),r4
 2008694:	f8 00 06 65 	calli 200a028 <_lseek>
 2008698:	b8 20 10 00 	mv r2,r1
 200869c:	34 01 ff ff 	mvi r1,-1
 20086a0:	44 41 00 07 	be r2,r1,20086bc <_lseek_r+0x58>
 20086a4:	b8 40 08 00 	mv r1,r2
 20086a8:	2b 9d 00 04 	lw ra,(sp+4)
 20086ac:	2b 8b 00 0c 	lw r11,(sp+12)
 20086b0:	2b 8c 00 08 	lw r12,(sp+8)
 20086b4:	37 9c 00 0c 	addi sp,sp,12
 20086b8:	c3 a0 00 00 	ret
 20086bc:	29 61 00 00 	lw r1,(r11+0)
 20086c0:	44 20 ff f9 	be r1,r0,20086a4 <_lseek_r+0x40>
 20086c4:	59 81 00 00 	sw (r12+0),r1
 20086c8:	b8 40 08 00 	mv r1,r2
 20086cc:	2b 9d 00 04 	lw ra,(sp+4)
 20086d0:	2b 8b 00 0c 	lw r11,(sp+12)
 20086d4:	2b 8c 00 08 	lw r12,(sp+8)
 20086d8:	37 9c 00 0c 	addi sp,sp,12
 20086dc:	c3 a0 00 00 	ret

020086e0 <_read_r>:
 20086e0:	37 9c ff f4 	addi sp,sp,-12
 20086e4:	5b 8b 00 0c 	sw (sp+12),r11
 20086e8:	5b 8c 00 08 	sw (sp+8),r12
 20086ec:	5b 9d 00 04 	sw (sp+4),ra
 20086f0:	78 0b 02 00 	mvhi r11,0x200
 20086f4:	b8 20 60 00 	mv r12,r1
 20086f8:	39 6b b5 bc 	ori r11,r11,0xb5bc
 20086fc:	b8 40 08 00 	mv r1,r2
 2008700:	b8 60 10 00 	mv r2,r3
 2008704:	b8 80 18 00 	mv r3,r4
 2008708:	34 04 00 00 	mvi r4,0
 200870c:	59 64 00 00 	sw (r11+0),r4
 2008710:	f8 00 06 2d 	calli 2009fc4 <_read>
 2008714:	b8 20 10 00 	mv r2,r1
 2008718:	34 01 ff ff 	mvi r1,-1
 200871c:	44 41 00 07 	be r2,r1,2008738 <_read_r+0x58>
 2008720:	b8 40 08 00 	mv r1,r2
 2008724:	2b 9d 00 04 	lw ra,(sp+4)
 2008728:	2b 8b 00 0c 	lw r11,(sp+12)
 200872c:	2b 8c 00 08 	lw r12,(sp+8)
 2008730:	37 9c 00 0c 	addi sp,sp,12
 2008734:	c3 a0 00 00 	ret
 2008738:	29 61 00 00 	lw r1,(r11+0)
 200873c:	44 20 ff f9 	be r1,r0,2008720 <_read_r+0x40>
 2008740:	59 81 00 00 	sw (r12+0),r1
 2008744:	b8 40 08 00 	mv r1,r2
 2008748:	2b 9d 00 04 	lw ra,(sp+4)
 200874c:	2b 8b 00 0c 	lw r11,(sp+12)
 2008750:	2b 8c 00 08 	lw r12,(sp+8)
 2008754:	37 9c 00 0c 	addi sp,sp,12
 2008758:	c3 a0 00 00 	ret

0200875c <_fpadd_parts>:
 200875c:	37 9c ff d4 	addi sp,sp,-44
 2008760:	5b 8b 00 2c 	sw (sp+44),r11
 2008764:	5b 8c 00 28 	sw (sp+40),r12
 2008768:	5b 8d 00 24 	sw (sp+36),r13
 200876c:	5b 8e 00 20 	sw (sp+32),r14
 2008770:	5b 8f 00 1c 	sw (sp+28),r15
 2008774:	5b 90 00 18 	sw (sp+24),r16
 2008778:	5b 91 00 14 	sw (sp+20),r17
 200877c:	5b 92 00 10 	sw (sp+16),r18
 2008780:	5b 93 00 0c 	sw (sp+12),r19
 2008784:	5b 94 00 08 	sw (sp+8),r20
 2008788:	5b 9d 00 04 	sw (sp+4),ra
 200878c:	28 24 00 00 	lw r4,(r1+0)
 2008790:	34 05 00 01 	mvi r5,1
 2008794:	b8 20 58 00 	mv r11,r1
 2008798:	b8 40 68 00 	mv r13,r2
 200879c:	b8 60 60 00 	mv r12,r3
 20087a0:	50 a4 00 62 	bgeu r5,r4,2008928 <_fpadd_parts+0x1cc>
 20087a4:	28 41 00 00 	lw r1,(r2+0)
 20087a8:	50 a1 00 5f 	bgeu r5,r1,2008924 <_fpadd_parts+0x1c8>
 20087ac:	34 02 00 04 	mvi r2,4
 20087b0:	44 82 00 6c 	be r4,r2,2008960 <_fpadd_parts+0x204>
 20087b4:	44 22 00 5c 	be r1,r2,2008924 <_fpadd_parts+0x1c8>
 20087b8:	34 02 00 02 	mvi r2,2
 20087bc:	44 22 00 70 	be r1,r2,200897c <_fpadd_parts+0x220>
 20087c0:	44 82 00 59 	be r4,r2,2008924 <_fpadd_parts+0x1c8>
 20087c4:	29 71 00 08 	lw r17,(r11+8)
 20087c8:	29 a3 00 08 	lw r3,(r13+8)
 20087cc:	29 72 00 10 	lw r18,(r11+16)
 20087d0:	29 70 00 14 	lw r16,(r11+20)
 20087d4:	ca 23 10 00 	sub r2,r17,r3
 20087d8:	14 41 00 1f 	sri r1,r2,31
 20087dc:	29 ae 00 10 	lw r14,(r13+16)
 20087e0:	98 22 20 00 	xor r4,r1,r2
 20087e4:	c8 81 20 00 	sub r4,r4,r1
 20087e8:	34 01 00 3f 	mvi r1,63
 20087ec:	29 af 00 14 	lw r15,(r13+20)
 20087f0:	48 81 00 75 	bg r4,r1,20089c4 <_fpadd_parts+0x268>
 20087f4:	4c 02 00 92 	bge r0,r2,2008a3c <_fpadd_parts+0x2e0>
 20087f8:	20 83 00 20 	andi r3,r4,0x20
 20087fc:	34 14 00 00 	mvi r20,0
 2008800:	81 c4 98 00 	sru r19,r14,r4
 2008804:	44 74 00 c5 	be r3,r20,2008b18 <_fpadd_parts+0x3bc>
 2008808:	34 01 00 01 	mvi r1,1
 200880c:	bc 24 10 00 	sl r2,r1,r4
 2008810:	44 60 00 03 	be r3,r0,200881c <_fpadd_parts+0xc0>
 2008814:	b8 40 18 00 	mv r3,r2
 2008818:	34 02 00 00 	mvi r2,0
 200881c:	34 41 ff ff 	addi r1,r2,-1
 2008820:	f4 41 10 00 	cmpgu r2,r2,r1
 2008824:	34 63 ff ff 	addi r3,r3,-1
 2008828:	b4 43 10 00 	add r2,r2,r3
 200882c:	a0 4e 70 00 	and r14,r2,r14
 2008830:	a0 2f 78 00 	and r15,r1,r15
 2008834:	34 03 00 00 	mvi r3,0
 2008838:	b9 e0 10 00 	mv r2,r15
 200883c:	b9 c0 08 00 	mv r1,r14
 2008840:	b8 60 20 00 	mv r4,r3
 2008844:	f8 00 04 35 	calli 2009918 <__ucmpdi2>
 2008848:	34 02 00 01 	mvi r2,1
 200884c:	44 22 00 03 	be r1,r2,2008858 <_fpadd_parts+0xfc>
 2008850:	b8 40 78 00 	mv r15,r2
 2008854:	34 0e 00 00 	mvi r14,0
 2008858:	b9 d4 70 00 	or r14,r14,r20
 200885c:	b9 f3 78 00 	or r15,r15,r19
 2008860:	29 64 00 04 	lw r4,(r11+4)
 2008864:	29 a1 00 04 	lw r1,(r13+4)
 2008868:	44 81 00 97 	be r4,r1,2008ac4 <_fpadd_parts+0x368>
 200886c:	44 80 00 91 	be r4,r0,2008ab0 <_fpadd_parts+0x354>
 2008870:	c9 f0 18 00 	sub r3,r15,r16
 2008874:	f4 6f 10 00 	cmpgu r2,r3,r15
 2008878:	c9 d2 08 00 	sub r1,r14,r18
 200887c:	c8 22 10 00 	sub r2,r1,r2
 2008880:	48 02 00 9c 	bg r0,r2,2008af0 <_fpadd_parts+0x394>
 2008884:	34 01 00 00 	mvi r1,0
 2008888:	59 81 00 04 	sw (r12+4),r1
 200888c:	59 91 00 08 	sw (r12+8),r17
 2008890:	59 82 00 10 	sw (r12+16),r2
 2008894:	59 83 00 14 	sw (r12+20),r3
 2008898:	29 86 00 14 	lw r6,(r12+20)
 200889c:	29 87 00 10 	lw r7,(r12+16)
 20088a0:	78 04 0f ff 	mvhi r4,0xfff
 20088a4:	34 c3 ff ff 	addi r3,r6,-1
 20088a8:	f4 c3 10 00 	cmpgu r2,r6,r3
 20088ac:	34 e1 ff ff 	addi r1,r7,-1
 20088b0:	b4 41 10 00 	add r2,r2,r1
 20088b4:	b8 80 08 00 	mv r1,r4
 20088b8:	38 21 ff ff 	ori r1,r1,0xffff
 20088bc:	b8 e0 28 00 	mv r5,r7
 20088c0:	b8 c0 40 00 	mv r8,r6
 20088c4:	54 41 00 47 	bgu r2,r1,20089e0 <_fpadd_parts+0x284>
 20088c8:	44 41 00 9b 	be r2,r1,2008b34 <_fpadd_parts+0x3d8>
 20088cc:	29 85 00 08 	lw r5,(r12+8)
 20088d0:	b8 80 48 00 	mv r9,r4
 20088d4:	39 29 ff ff 	ori r9,r9,0xffff
 20088d8:	34 0a ff fe 	mvi r10,-2
 20088dc:	b4 c6 18 00 	add r3,r6,r6
 20088e0:	f4 c3 10 00 	cmpgu r2,r6,r3
 20088e4:	b4 e7 08 00 	add r1,r7,r7
 20088e8:	34 68 ff ff 	addi r8,r3,-1
 20088ec:	b4 41 10 00 	add r2,r2,r1
 20088f0:	f4 68 20 00 	cmpgu r4,r3,r8
 20088f4:	34 a5 ff ff 	addi r5,r5,-1
 20088f8:	34 41 ff ff 	addi r1,r2,-1
 20088fc:	b4 81 20 00 	add r4,r4,r1
 2008900:	59 82 00 10 	sw (r12+16),r2
 2008904:	59 83 00 14 	sw (r12+20),r3
 2008908:	59 85 00 08 	sw (r12+8),r5
 200890c:	b8 60 30 00 	mv r6,r3
 2008910:	b8 40 38 00 	mv r7,r2
 2008914:	54 89 00 31 	bgu r4,r9,20089d8 <_fpadd_parts+0x27c>
 2008918:	5c 89 ff f1 	bne r4,r9,20088dc <_fpadd_parts+0x180>
 200891c:	55 0a 00 2f 	bgu r8,r10,20089d8 <_fpadd_parts+0x27c>
 2008920:	e3 ff ff ef 	bi 20088dc <_fpadd_parts+0x180>
 2008924:	b9 a0 58 00 	mv r11,r13
 2008928:	b9 60 08 00 	mv r1,r11
 200892c:	2b 9d 00 04 	lw ra,(sp+4)
 2008930:	2b 8b 00 2c 	lw r11,(sp+44)
 2008934:	2b 8c 00 28 	lw r12,(sp+40)
 2008938:	2b 8d 00 24 	lw r13,(sp+36)
 200893c:	2b 8e 00 20 	lw r14,(sp+32)
 2008940:	2b 8f 00 1c 	lw r15,(sp+28)
 2008944:	2b 90 00 18 	lw r16,(sp+24)
 2008948:	2b 91 00 14 	lw r17,(sp+20)
 200894c:	2b 92 00 10 	lw r18,(sp+16)
 2008950:	2b 93 00 0c 	lw r19,(sp+12)
 2008954:	2b 94 00 08 	lw r20,(sp+8)
 2008958:	37 9c 00 2c 	addi sp,sp,44
 200895c:	c3 a0 00 00 	ret
 2008960:	5c 24 ff f2 	bne r1,r4,2008928 <_fpadd_parts+0x1cc>
 2008964:	29 a2 00 04 	lw r2,(r13+4)
 2008968:	29 61 00 04 	lw r1,(r11+4)
 200896c:	44 22 ff ef 	be r1,r2,2008928 <_fpadd_parts+0x1cc>
 2008970:	78 0b 02 00 	mvhi r11,0x200
 2008974:	39 6b a6 08 	ori r11,r11,0xa608
 2008978:	e3 ff ff ec 	bi 2008928 <_fpadd_parts+0x1cc>
 200897c:	5c 81 ff eb 	bne r4,r1,2008928 <_fpadd_parts+0x1cc>
 2008980:	58 64 00 00 	sw (r3+0),r4
 2008984:	29 61 00 04 	lw r1,(r11+4)
 2008988:	58 61 00 04 	sw (r3+4),r1
 200898c:	29 61 00 08 	lw r1,(r11+8)
 2008990:	58 61 00 08 	sw (r3+8),r1
 2008994:	29 61 00 0c 	lw r1,(r11+12)
 2008998:	58 61 00 0c 	sw (r3+12),r1
 200899c:	29 61 00 10 	lw r1,(r11+16)
 20089a0:	58 61 00 10 	sw (r3+16),r1
 20089a4:	29 61 00 14 	lw r1,(r11+20)
 20089a8:	58 61 00 14 	sw (r3+20),r1
 20089ac:	29 62 00 04 	lw r2,(r11+4)
 20089b0:	29 a1 00 04 	lw r1,(r13+4)
 20089b4:	b8 60 58 00 	mv r11,r3
 20089b8:	a0 22 08 00 	and r1,r1,r2
 20089bc:	58 61 00 04 	sw (r3+4),r1
 20089c0:	e3 ff ff da 	bi 2008928 <_fpadd_parts+0x1cc>
 20089c4:	4a 23 00 1b 	bg r17,r3,2008a30 <_fpadd_parts+0x2d4>
 20089c8:	34 12 00 00 	mvi r18,0
 20089cc:	b8 60 88 00 	mv r17,r3
 20089d0:	ba 40 80 00 	mv r16,r18
 20089d4:	e3 ff ff a3 	bi 2008860 <_fpadd_parts+0x104>
 20089d8:	b8 e0 28 00 	mv r5,r7
 20089dc:	b8 c0 40 00 	mv r8,r6
 20089e0:	78 01 1f ff 	mvhi r1,0x1fff
 20089e4:	34 02 00 03 	mvi r2,3
 20089e8:	59 82 00 00 	sw (r12+0),r2
 20089ec:	38 21 ff ff 	ori r1,r1,0xffff
 20089f0:	54 a1 00 03 	bgu r5,r1,20089fc <_fpadd_parts+0x2a0>
 20089f4:	b9 80 58 00 	mv r11,r12
 20089f8:	e3 ff ff cc 	bi 2008928 <_fpadd_parts+0x1cc>
 20089fc:	29 84 00 08 	lw r4,(r12+8)
 2008a00:	3c a3 00 1f 	sli r3,r5,31
 2008a04:	01 02 00 01 	srui r2,r8,1
 2008a08:	00 a5 00 01 	srui r5,r5,1
 2008a0c:	b8 62 10 00 	or r2,r3,r2
 2008a10:	21 01 00 01 	andi r1,r8,0x1
 2008a14:	b8 22 08 00 	or r1,r1,r2
 2008a18:	34 84 00 01 	addi r4,r4,1
 2008a1c:	59 85 00 10 	sw (r12+16),r5
 2008a20:	59 81 00 14 	sw (r12+20),r1
 2008a24:	59 84 00 08 	sw (r12+8),r4
 2008a28:	b9 80 58 00 	mv r11,r12
 2008a2c:	e3 ff ff bf 	bi 2008928 <_fpadd_parts+0x1cc>
 2008a30:	34 0e 00 00 	mvi r14,0
 2008a34:	b9 c0 78 00 	mv r15,r14
 2008a38:	e3 ff ff 8a 	bi 2008860 <_fpadd_parts+0x104>
 2008a3c:	44 40 ff 89 	be r2,r0,2008860 <_fpadd_parts+0x104>
 2008a40:	20 83 00 20 	andi r3,r4,0x20
 2008a44:	34 14 00 00 	mvi r20,0
 2008a48:	b6 24 88 00 	add r17,r17,r4
 2008a4c:	82 44 98 00 	sru r19,r18,r4
 2008a50:	44 74 00 3c 	be r3,r20,2008b40 <_fpadd_parts+0x3e4>
 2008a54:	34 01 00 01 	mvi r1,1
 2008a58:	bc 24 10 00 	sl r2,r1,r4
 2008a5c:	44 60 00 03 	be r3,r0,2008a68 <_fpadd_parts+0x30c>
 2008a60:	b8 40 18 00 	mv r3,r2
 2008a64:	34 02 00 00 	mvi r2,0
 2008a68:	34 41 ff ff 	addi r1,r2,-1
 2008a6c:	f4 41 10 00 	cmpgu r2,r2,r1
 2008a70:	34 63 ff ff 	addi r3,r3,-1
 2008a74:	b4 43 10 00 	add r2,r2,r3
 2008a78:	a0 52 90 00 	and r18,r2,r18
 2008a7c:	a0 30 80 00 	and r16,r1,r16
 2008a80:	34 03 00 00 	mvi r3,0
 2008a84:	ba 00 10 00 	mv r2,r16
 2008a88:	ba 40 08 00 	mv r1,r18
 2008a8c:	b8 60 20 00 	mv r4,r3
 2008a90:	f8 00 03 a2 	calli 2009918 <__ucmpdi2>
 2008a94:	34 02 00 01 	mvi r2,1
 2008a98:	44 22 00 03 	be r1,r2,2008aa4 <_fpadd_parts+0x348>
 2008a9c:	b8 40 80 00 	mv r16,r2
 2008aa0:	34 12 00 00 	mvi r18,0
 2008aa4:	ba 54 90 00 	or r18,r18,r20
 2008aa8:	ba 13 80 00 	or r16,r16,r19
 2008aac:	e3 ff ff 6d 	bi 2008860 <_fpadd_parts+0x104>
 2008ab0:	ca 0f 18 00 	sub r3,r16,r15
 2008ab4:	f4 70 10 00 	cmpgu r2,r3,r16
 2008ab8:	ca 4e 08 00 	sub r1,r18,r14
 2008abc:	c8 22 10 00 	sub r2,r1,r2
 2008ac0:	e3 ff ff 70 	bi 2008880 <_fpadd_parts+0x124>
 2008ac4:	b5 f0 18 00 	add r3,r15,r16
 2008ac8:	f5 e3 10 00 	cmpgu r2,r15,r3
 2008acc:	b5 d2 08 00 	add r1,r14,r18
 2008ad0:	b4 41 10 00 	add r2,r2,r1
 2008ad4:	59 84 00 04 	sw (r12+4),r4
 2008ad8:	59 91 00 08 	sw (r12+8),r17
 2008adc:	59 82 00 10 	sw (r12+16),r2
 2008ae0:	59 83 00 14 	sw (r12+20),r3
 2008ae4:	b8 40 28 00 	mv r5,r2
 2008ae8:	b8 60 40 00 	mv r8,r3
 2008aec:	e3 ff ff bd 	bi 20089e0 <_fpadd_parts+0x284>
 2008af0:	c8 03 20 00 	sub r4,r0,r3
 2008af4:	7c 83 00 00 	cmpnei r3,r4,0
 2008af8:	c8 02 10 00 	sub r2,r0,r2
 2008afc:	c8 43 10 00 	sub r2,r2,r3
 2008b00:	34 01 00 01 	mvi r1,1
 2008b04:	59 81 00 04 	sw (r12+4),r1
 2008b08:	59 91 00 08 	sw (r12+8),r17
 2008b0c:	59 82 00 10 	sw (r12+16),r2
 2008b10:	59 84 00 14 	sw (r12+20),r4
 2008b14:	e3 ff ff 61 	bi 2008898 <_fpadd_parts+0x13c>
 2008b18:	3d c2 00 01 	sli r2,r14,1
 2008b1c:	a4 80 08 00 	not r1,r4
 2008b20:	bc 41 10 00 	sl r2,r2,r1
 2008b24:	81 e4 98 00 	sru r19,r15,r4
 2008b28:	81 c4 a0 00 	sru r20,r14,r4
 2008b2c:	b8 53 98 00 	or r19,r2,r19
 2008b30:	e3 ff ff 36 	bi 2008808 <_fpadd_parts+0xac>
 2008b34:	34 01 ff fe 	mvi r1,-2
 2008b38:	54 61 ff aa 	bgu r3,r1,20089e0 <_fpadd_parts+0x284>
 2008b3c:	e3 ff ff 64 	bi 20088cc <_fpadd_parts+0x170>
 2008b40:	3e 42 00 01 	sli r2,r18,1
 2008b44:	a4 80 08 00 	not r1,r4
 2008b48:	bc 41 10 00 	sl r2,r2,r1
 2008b4c:	82 04 98 00 	sru r19,r16,r4
 2008b50:	82 44 a0 00 	sru r20,r18,r4
 2008b54:	b8 53 98 00 	or r19,r2,r19
 2008b58:	e3 ff ff bf 	bi 2008a54 <_fpadd_parts+0x2f8>

02008b5c <__subdf3>:
 2008b5c:	37 9c ff 9c 	addi sp,sp,-100
 2008b60:	5b 8b 00 0c 	sw (sp+12),r11
 2008b64:	5b 8c 00 08 	sw (sp+8),r12
 2008b68:	5b 9d 00 04 	sw (sp+4),ra
 2008b6c:	37 8c 00 40 	addi r12,sp,64
 2008b70:	5b 82 00 64 	sw (sp+100),r2
 2008b74:	5b 81 00 60 	sw (sp+96),r1
 2008b78:	b9 80 10 00 	mv r2,r12
 2008b7c:	37 81 00 60 	addi r1,sp,96
 2008b80:	5b 84 00 5c 	sw (sp+92),r4
 2008b84:	5b 83 00 58 	sw (sp+88),r3
 2008b88:	37 8b 00 28 	addi r11,sp,40
 2008b8c:	f8 00 04 2e 	calli 2009c44 <__unpack_d>
 2008b90:	37 81 00 58 	addi r1,sp,88
 2008b94:	b9 60 10 00 	mv r2,r11
 2008b98:	f8 00 04 2b 	calli 2009c44 <__unpack_d>
 2008b9c:	2b 84 00 2c 	lw r4,(sp+44)
 2008ba0:	b9 60 10 00 	mv r2,r11
 2008ba4:	37 83 00 10 	addi r3,sp,16
 2008ba8:	18 84 00 01 	xori r4,r4,0x1
 2008bac:	b9 80 08 00 	mv r1,r12
 2008bb0:	5b 84 00 2c 	sw (sp+44),r4
 2008bb4:	fb ff fe ea 	calli 200875c <_fpadd_parts>
 2008bb8:	f8 00 03 80 	calli 20099b8 <__pack_d>
 2008bbc:	2b 9d 00 04 	lw ra,(sp+4)
 2008bc0:	2b 8b 00 0c 	lw r11,(sp+12)
 2008bc4:	2b 8c 00 08 	lw r12,(sp+8)
 2008bc8:	37 9c 00 64 	addi sp,sp,100
 2008bcc:	c3 a0 00 00 	ret

02008bd0 <__adddf3>:
 2008bd0:	37 9c ff 9c 	addi sp,sp,-100
 2008bd4:	5b 8b 00 0c 	sw (sp+12),r11
 2008bd8:	5b 8c 00 08 	sw (sp+8),r12
 2008bdc:	5b 9d 00 04 	sw (sp+4),ra
 2008be0:	37 8c 00 40 	addi r12,sp,64
 2008be4:	5b 82 00 64 	sw (sp+100),r2
 2008be8:	5b 81 00 60 	sw (sp+96),r1
 2008bec:	b9 80 10 00 	mv r2,r12
 2008bf0:	37 81 00 60 	addi r1,sp,96
 2008bf4:	5b 84 00 5c 	sw (sp+92),r4
 2008bf8:	5b 83 00 58 	sw (sp+88),r3
 2008bfc:	37 8b 00 28 	addi r11,sp,40
 2008c00:	f8 00 04 11 	calli 2009c44 <__unpack_d>
 2008c04:	37 81 00 58 	addi r1,sp,88
 2008c08:	b9 60 10 00 	mv r2,r11
 2008c0c:	f8 00 04 0e 	calli 2009c44 <__unpack_d>
 2008c10:	b9 60 10 00 	mv r2,r11
 2008c14:	37 83 00 10 	addi r3,sp,16
 2008c18:	b9 80 08 00 	mv r1,r12
 2008c1c:	fb ff fe d0 	calli 200875c <_fpadd_parts>
 2008c20:	f8 00 03 66 	calli 20099b8 <__pack_d>
 2008c24:	2b 9d 00 04 	lw ra,(sp+4)
 2008c28:	2b 8b 00 0c 	lw r11,(sp+12)
 2008c2c:	2b 8c 00 08 	lw r12,(sp+8)
 2008c30:	37 9c 00 64 	addi sp,sp,100
 2008c34:	c3 a0 00 00 	ret

02008c38 <__muldf3>:
 2008c38:	37 9c ff 80 	addi sp,sp,-128
 2008c3c:	5b 8b 00 28 	sw (sp+40),r11
 2008c40:	5b 8c 00 24 	sw (sp+36),r12
 2008c44:	5b 8d 00 20 	sw (sp+32),r13
 2008c48:	5b 8e 00 1c 	sw (sp+28),r14
 2008c4c:	5b 8f 00 18 	sw (sp+24),r15
 2008c50:	5b 90 00 14 	sw (sp+20),r16
 2008c54:	5b 91 00 10 	sw (sp+16),r17
 2008c58:	5b 92 00 0c 	sw (sp+12),r18
 2008c5c:	5b 93 00 08 	sw (sp+8),r19
 2008c60:	5b 9d 00 04 	sw (sp+4),ra
 2008c64:	37 8c 00 5c 	addi r12,sp,92
 2008c68:	5b 82 00 80 	sw (sp+128),r2
 2008c6c:	5b 81 00 7c 	sw (sp+124),r1
 2008c70:	b9 80 10 00 	mv r2,r12
 2008c74:	37 81 00 7c 	addi r1,sp,124
 2008c78:	5b 84 00 78 	sw (sp+120),r4
 2008c7c:	5b 83 00 74 	sw (sp+116),r3
 2008c80:	37 8b 00 44 	addi r11,sp,68
 2008c84:	f8 00 03 f0 	calli 2009c44 <__unpack_d>
 2008c88:	37 81 00 74 	addi r1,sp,116
 2008c8c:	b9 60 10 00 	mv r2,r11
 2008c90:	f8 00 03 ed 	calli 2009c44 <__unpack_d>
 2008c94:	2b 82 00 5c 	lw r2,(sp+92)
 2008c98:	34 01 00 01 	mvi r1,1
 2008c9c:	54 41 00 14 	bgu r2,r1,2008cec <__muldf3+0xb4>
 2008ca0:	2b 81 00 60 	lw r1,(sp+96)
 2008ca4:	2b 82 00 48 	lw r2,(sp+72)
 2008ca8:	b9 80 18 00 	mv r3,r12
 2008cac:	fc 22 08 00 	cmpne r1,r1,r2
 2008cb0:	5b 81 00 60 	sw (sp+96),r1
 2008cb4:	b8 60 08 00 	mv r1,r3
 2008cb8:	f8 00 03 40 	calli 20099b8 <__pack_d>
 2008cbc:	2b 9d 00 04 	lw ra,(sp+4)
 2008cc0:	2b 8b 00 28 	lw r11,(sp+40)
 2008cc4:	2b 8c 00 24 	lw r12,(sp+36)
 2008cc8:	2b 8d 00 20 	lw r13,(sp+32)
 2008ccc:	2b 8e 00 1c 	lw r14,(sp+28)
 2008cd0:	2b 8f 00 18 	lw r15,(sp+24)
 2008cd4:	2b 90 00 14 	lw r16,(sp+20)
 2008cd8:	2b 91 00 10 	lw r17,(sp+16)
 2008cdc:	2b 92 00 0c 	lw r18,(sp+12)
 2008ce0:	2b 93 00 08 	lw r19,(sp+8)
 2008ce4:	37 9c 00 80 	addi sp,sp,128
 2008ce8:	c3 a0 00 00 	ret
 2008cec:	2b 83 00 44 	lw r3,(sp+68)
 2008cf0:	54 61 00 07 	bgu r3,r1,2008d0c <__muldf3+0xd4>
 2008cf4:	2b 82 00 48 	lw r2,(sp+72)
 2008cf8:	2b 81 00 60 	lw r1,(sp+96)
 2008cfc:	b9 60 18 00 	mv r3,r11
 2008d00:	fc 22 08 00 	cmpne r1,r1,r2
 2008d04:	5b 81 00 48 	sw (sp+72),r1
 2008d08:	e3 ff ff eb 	bi 2008cb4 <__muldf3+0x7c>
 2008d0c:	34 01 00 04 	mvi r1,4
 2008d10:	44 41 00 51 	be r2,r1,2008e54 <__muldf3+0x21c>
 2008d14:	44 61 00 75 	be r3,r1,2008ee8 <__muldf3+0x2b0>
 2008d18:	34 01 00 02 	mvi r1,2
 2008d1c:	44 41 ff e1 	be r2,r1,2008ca0 <__muldf3+0x68>
 2008d20:	44 61 ff f5 	be r3,r1,2008cf4 <__muldf3+0xbc>
 2008d24:	2b 8b 00 70 	lw r11,(sp+112)
 2008d28:	2b 8c 00 58 	lw r12,(sp+88)
 2008d2c:	34 01 00 00 	mvi r1,0
 2008d30:	b8 20 18 00 	mv r3,r1
 2008d34:	b9 80 20 00 	mv r4,r12
 2008d38:	b9 60 10 00 	mv r2,r11
 2008d3c:	2b 92 00 54 	lw r18,(sp+84)
 2008d40:	f8 00 02 da 	calli 20098a8 <__muldi3>
 2008d44:	b8 20 88 00 	mv r17,r1
 2008d48:	34 01 00 00 	mvi r1,0
 2008d4c:	b9 60 20 00 	mv r4,r11
 2008d50:	b8 20 18 00 	mv r3,r1
 2008d54:	b8 40 98 00 	mv r19,r2
 2008d58:	2b 90 00 6c 	lw r16,(sp+108)
 2008d5c:	ba 40 10 00 	mv r2,r18
 2008d60:	f8 00 02 d2 	calli 20098a8 <__muldi3>
 2008d64:	b8 20 58 00 	mv r11,r1
 2008d68:	34 01 00 00 	mvi r1,0
 2008d6c:	b8 40 70 00 	mv r14,r2
 2008d70:	b8 20 18 00 	mv r3,r1
 2008d74:	b9 80 20 00 	mv r4,r12
 2008d78:	ba 00 10 00 	mv r2,r16
 2008d7c:	f8 00 02 cb 	calli 20098a8 <__muldi3>
 2008d80:	b4 4e 18 00 	add r3,r2,r14
 2008d84:	f4 43 10 00 	cmpgu r2,r2,r3
 2008d88:	b4 2b 08 00 	add r1,r1,r11
 2008d8c:	b4 41 68 00 	add r13,r2,r1
 2008d90:	55 6d 00 5b 	bgu r11,r13,2008efc <__muldf3+0x2c4>
 2008d94:	45 6d 00 5d 	be r11,r13,2008f08 <__muldf3+0x2d0>
 2008d98:	34 0f 00 00 	mvi r15,0
 2008d9c:	b9 e0 70 00 	mv r14,r15
 2008da0:	b4 71 58 00 	add r11,r3,r17
 2008da4:	ba 60 60 00 	mv r12,r19
 2008da8:	56 2b 00 53 	bgu r17,r11,2008ef4 <__muldf3+0x2bc>
 2008dac:	34 01 00 00 	mvi r1,0
 2008db0:	ba 40 20 00 	mv r4,r18
 2008db4:	b8 20 18 00 	mv r3,r1
 2008db8:	ba 00 10 00 	mv r2,r16
 2008dbc:	f8 00 02 bb 	calli 20098a8 <__muldi3>
 2008dc0:	b5 a2 10 00 	add r2,r13,r2
 2008dc4:	f5 a2 18 00 	cmpgu r3,r13,r2
 2008dc8:	2b 84 00 4c 	lw r4,(sp+76)
 2008dcc:	b4 61 18 00 	add r3,r3,r1
 2008dd0:	2b 81 00 64 	lw r1,(sp+100)
 2008dd4:	b4 4e 28 00 	add r5,r2,r14
 2008dd8:	f4 45 10 00 	cmpgu r2,r2,r5
 2008ddc:	b4 24 08 00 	add r1,r1,r4
 2008de0:	34 28 00 04 	addi r8,r1,4
 2008de4:	b4 6f 18 00 	add r3,r3,r15
 2008de8:	78 01 1f ff 	mvhi r1,0x1fff
 2008dec:	b4 43 20 00 	add r4,r2,r3
 2008df0:	5b 88 00 34 	sw (sp+52),r8
 2008df4:	38 21 ff ff 	ori r1,r1,0xffff
 2008df8:	2b 8e 00 60 	lw r14,(sp+96)
 2008dfc:	2b 8d 00 48 	lw r13,(sp+72)
 2008e00:	54 81 00 26 	bgu r4,r1,2008e98 <__muldf3+0x260>
 2008e04:	78 01 0f ff 	mvhi r1,0xfff
 2008e08:	38 21 ff ff 	ori r1,r1,0xffff
 2008e0c:	54 81 00 18 	bgu r4,r1,2008e6c <__muldf3+0x234>
 2008e10:	2b 86 00 34 	lw r6,(sp+52)
 2008e14:	b8 20 40 00 	mv r8,r1
 2008e18:	b4 a5 18 00 	add r3,r5,r5
 2008e1c:	f4 a3 10 00 	cmpgu r2,r5,r3
 2008e20:	b4 84 08 00 	add r1,r4,r4
 2008e24:	b4 41 20 00 	add r4,r2,r1
 2008e28:	b8 60 28 00 	mv r5,r3
 2008e2c:	34 c6 ff ff 	addi r6,r6,-1
 2008e30:	b8 80 38 00 	mv r7,r4
 2008e34:	48 0b 00 2b 	bg r0,r11,2008ee0 <__muldf3+0x2a8>
 2008e38:	b5 8c 18 00 	add r3,r12,r12
 2008e3c:	f5 83 10 00 	cmpgu r2,r12,r3
 2008e40:	b5 6b 08 00 	add r1,r11,r11
 2008e44:	b4 41 58 00 	add r11,r2,r1
 2008e48:	b8 60 60 00 	mv r12,r3
 2008e4c:	54 e8 00 07 	bgu r7,r8,2008e68 <__muldf3+0x230>
 2008e50:	e3 ff ff f2 	bi 2008e18 <__muldf3+0x1e0>
 2008e54:	34 01 00 02 	mvi r1,2
 2008e58:	5c 61 ff 92 	bne r3,r1,2008ca0 <__muldf3+0x68>
 2008e5c:	78 03 02 00 	mvhi r3,0x200
 2008e60:	38 63 a6 08 	ori r3,r3,0xa608
 2008e64:	e3 ff ff 94 	bi 2008cb4 <__muldf3+0x7c>
 2008e68:	5b 86 00 34 	sw (sp+52),r6
 2008e6c:	20 a6 00 ff 	andi r6,r5,0xff
 2008e70:	34 01 00 80 	mvi r1,128
 2008e74:	44 c1 00 27 	be r6,r1,2008f10 <__muldf3+0x2d8>
 2008e78:	fd cd 08 00 	cmpne r1,r14,r13
 2008e7c:	5b 85 00 40 	sw (sp+64),r5
 2008e80:	5b 81 00 30 	sw (sp+48),r1
 2008e84:	34 01 00 03 	mvi r1,3
 2008e88:	5b 84 00 3c 	sw (sp+60),r4
 2008e8c:	5b 81 00 2c 	sw (sp+44),r1
 2008e90:	37 83 00 2c 	addi r3,sp,44
 2008e94:	e3 ff ff 88 	bi 2008cb4 <__muldf3+0x7c>
 2008e98:	78 07 80 00 	mvhi r7,0x8000
 2008e9c:	38 e7 00 00 	ori r7,r7,0x0
 2008ea0:	b8 20 e8 00 	mv ra,r1
 2008ea4:	3c 82 00 1f 	sli r2,r4,31
 2008ea8:	00 a3 00 01 	srui r3,r5,1
 2008eac:	20 a1 00 01 	andi r1,r5,0x1
 2008eb0:	01 8a 00 01 	srui r10,r12,1
 2008eb4:	01 69 00 01 	srui r9,r11,1
 2008eb8:	00 84 00 01 	srui r4,r4,1
 2008ebc:	3d 66 00 1f 	sli r6,r11,31
 2008ec0:	b8 43 28 00 	or r5,r2,r3
 2008ec4:	35 08 00 01 	addi r8,r8,1
 2008ec8:	44 20 00 03 	be r1,r0,2008ed4 <__muldf3+0x29c>
 2008ecc:	b8 ca 60 00 	or r12,r6,r10
 2008ed0:	b9 27 58 00 	or r11,r9,r7
 2008ed4:	54 9d ff f4 	bgu r4,ra,2008ea4 <__muldf3+0x26c>
 2008ed8:	5b 88 00 34 	sw (sp+52),r8
 2008edc:	e3 ff ff ca 	bi 2008e04 <__muldf3+0x1cc>
 2008ee0:	38 65 00 01 	ori r5,r3,0x1
 2008ee4:	e3 ff ff d5 	bi 2008e38 <__muldf3+0x200>
 2008ee8:	34 01 00 02 	mvi r1,2
 2008eec:	5c 41 ff 82 	bne r2,r1,2008cf4 <__muldf3+0xbc>
 2008ef0:	e3 ff ff db 	bi 2008e5c <__muldf3+0x224>
 2008ef4:	34 0e 00 01 	mvi r14,1
 2008ef8:	e3 ff ff ad 	bi 2008dac <__muldf3+0x174>
 2008efc:	34 0f 00 01 	mvi r15,1
 2008f00:	34 0e 00 00 	mvi r14,0
 2008f04:	e3 ff ff a7 	bi 2008da0 <__muldf3+0x168>
 2008f08:	55 c3 ff fd 	bgu r14,r3,2008efc <__muldf3+0x2c4>
 2008f0c:	e3 ff ff a3 	bi 2008d98 <__muldf3+0x160>
 2008f10:	20 a7 01 00 	andi r7,r5,0x100
 2008f14:	5c e0 ff d9 	bne r7,r0,2008e78 <__muldf3+0x240>
 2008f18:	b9 6c 08 00 	or r1,r11,r12
 2008f1c:	44 27 ff d7 	be r1,r7,2008e78 <__muldf3+0x240>
 2008f20:	b4 a6 08 00 	add r1,r5,r6
 2008f24:	f4 a1 10 00 	cmpgu r2,r5,r1
 2008f28:	34 03 ff 00 	mvi r3,-256
 2008f2c:	b4 44 20 00 	add r4,r2,r4
 2008f30:	a0 23 28 00 	and r5,r1,r3
 2008f34:	e3 ff ff d1 	bi 2008e78 <__muldf3+0x240>

02008f38 <__divdf3>:
 2008f38:	37 9c ff ac 	addi sp,sp,-84
 2008f3c:	5b 8b 00 14 	sw (sp+20),r11
 2008f40:	5b 8c 00 10 	sw (sp+16),r12
 2008f44:	5b 8d 00 0c 	sw (sp+12),r13
 2008f48:	5b 8e 00 08 	sw (sp+8),r14
 2008f4c:	5b 9d 00 04 	sw (sp+4),ra
 2008f50:	37 8e 00 30 	addi r14,sp,48
 2008f54:	5b 82 00 54 	sw (sp+84),r2
 2008f58:	5b 81 00 50 	sw (sp+80),r1
 2008f5c:	b9 c0 10 00 	mv r2,r14
 2008f60:	37 81 00 50 	addi r1,sp,80
 2008f64:	5b 83 00 48 	sw (sp+72),r3
 2008f68:	5b 84 00 4c 	sw (sp+76),r4
 2008f6c:	37 8b 00 18 	addi r11,sp,24
 2008f70:	f8 00 03 35 	calli 2009c44 <__unpack_d>
 2008f74:	37 81 00 48 	addi r1,sp,72
 2008f78:	b9 60 10 00 	mv r2,r11
 2008f7c:	f8 00 03 32 	calli 2009c44 <__unpack_d>
 2008f80:	2b 83 00 30 	lw r3,(sp+48)
 2008f84:	34 01 00 01 	mvi r1,1
 2008f88:	50 23 00 3e 	bgeu r1,r3,2009080 <__divdf3+0x148>
 2008f8c:	2b 84 00 18 	lw r4,(sp+24)
 2008f90:	54 81 00 0a 	bgu r4,r1,2008fb8 <__divdf3+0x80>
 2008f94:	b9 60 08 00 	mv r1,r11
 2008f98:	f8 00 02 88 	calli 20099b8 <__pack_d>
 2008f9c:	2b 9d 00 04 	lw ra,(sp+4)
 2008fa0:	2b 8b 00 14 	lw r11,(sp+20)
 2008fa4:	2b 8c 00 10 	lw r12,(sp+16)
 2008fa8:	2b 8d 00 0c 	lw r13,(sp+12)
 2008fac:	2b 8e 00 08 	lw r14,(sp+8)
 2008fb0:	37 9c 00 54 	addi sp,sp,84
 2008fb4:	c3 a0 00 00 	ret
 2008fb8:	2b 81 00 34 	lw r1,(sp+52)
 2008fbc:	2b 82 00 1c 	lw r2,(sp+28)
 2008fc0:	34 05 00 04 	mvi r5,4
 2008fc4:	98 22 08 00 	xor r1,r1,r2
 2008fc8:	5b 81 00 34 	sw (sp+52),r1
 2008fcc:	44 65 00 2c 	be r3,r5,200907c <__divdf3+0x144>
 2008fd0:	34 01 00 02 	mvi r1,2
 2008fd4:	44 61 00 2a 	be r3,r1,200907c <__divdf3+0x144>
 2008fd8:	44 85 00 36 	be r4,r5,20090b0 <__divdf3+0x178>
 2008fdc:	44 81 00 51 	be r4,r1,2009120 <__divdf3+0x1e8>
 2008fe0:	2b 82 00 20 	lw r2,(sp+32)
 2008fe4:	2b 81 00 38 	lw r1,(sp+56)
 2008fe8:	2b 85 00 40 	lw r5,(sp+64)
 2008fec:	2b 89 00 28 	lw r9,(sp+40)
 2008ff0:	c8 22 30 00 	sub r6,r1,r2
 2008ff4:	5b 86 00 38 	sw (sp+56),r6
 2008ff8:	2b 82 00 44 	lw r2,(sp+68)
 2008ffc:	2b 8d 00 2c 	lw r13,(sp+44)
 2009000:	55 25 00 40 	bgu r9,r5,2009100 <__divdf3+0x1c8>
 2009004:	45 25 00 4a 	be r9,r5,200912c <__divdf3+0x1f4>
 2009008:	34 0c 00 00 	mvi r12,0
 200900c:	78 04 10 00 	mvhi r4,0x1000
 2009010:	38 84 00 00 	ori r4,r4,0x0
 2009014:	b9 80 58 00 	mv r11,r12
 2009018:	b9 80 38 00 	mv r7,r12
 200901c:	34 06 00 3d 	mvi r6,61
 2009020:	e0 00 00 0d 	bi 2009054 <__divdf3+0x11c>
 2009024:	c8 28 28 00 	sub r5,r1,r8
 2009028:	b8 60 10 00 	mv r2,r3
 200902c:	b9 84 60 00 	or r12,r12,r4
 2009030:	b9 67 58 00 	or r11,r11,r7
 2009034:	b4 42 18 00 	add r3,r2,r2
 2009038:	f4 43 10 00 	cmpgu r2,r2,r3
 200903c:	b4 a5 08 00 	add r1,r5,r5
 2009040:	b4 41 28 00 	add r5,r2,r1
 2009044:	b9 5d 38 00 	or r7,r10,ra
 2009048:	00 84 00 01 	srui r4,r4,1
 200904c:	b8 60 10 00 	mv r2,r3
 2009050:	44 c0 00 1e 	be r6,r0,20090c8 <__divdf3+0x190>
 2009054:	c8 4d 18 00 	sub r3,r2,r13
 2009058:	00 fd 00 01 	srui ra,r7,1
 200905c:	3c 8a 00 1f 	sli r10,r4,31
 2009060:	34 c6 ff ff 	addi r6,r6,-1
 2009064:	f4 62 40 00 	cmpgu r8,r3,r2
 2009068:	c8 a9 08 00 	sub r1,r5,r9
 200906c:	55 25 ff f2 	bgu r9,r5,2009034 <__divdf3+0xfc>
 2009070:	5d 25 ff ed 	bne r9,r5,2009024 <__divdf3+0xec>
 2009074:	55 a2 ff f0 	bgu r13,r2,2009034 <__divdf3+0xfc>
 2009078:	e3 ff ff eb 	bi 2009024 <__divdf3+0xec>
 200907c:	44 64 00 0a 	be r3,r4,20090a4 <__divdf3+0x16c>
 2009080:	b9 c0 08 00 	mv r1,r14
 2009084:	f8 00 02 4d 	calli 20099b8 <__pack_d>
 2009088:	2b 9d 00 04 	lw ra,(sp+4)
 200908c:	2b 8b 00 14 	lw r11,(sp+20)
 2009090:	2b 8c 00 10 	lw r12,(sp+16)
 2009094:	2b 8d 00 0c 	lw r13,(sp+12)
 2009098:	2b 8e 00 08 	lw r14,(sp+8)
 200909c:	37 9c 00 54 	addi sp,sp,84
 20090a0:	c3 a0 00 00 	ret
 20090a4:	78 01 02 00 	mvhi r1,0x200
 20090a8:	38 21 a6 08 	ori r1,r1,0xa608
 20090ac:	e3 ff ff f6 	bi 2009084 <__divdf3+0x14c>
 20090b0:	34 01 00 00 	mvi r1,0
 20090b4:	5b 81 00 38 	sw (sp+56),r1
 20090b8:	5b 81 00 44 	sw (sp+68),r1
 20090bc:	5b 81 00 40 	sw (sp+64),r1
 20090c0:	b9 c0 08 00 	mv r1,r14
 20090c4:	e3 ff ff f0 	bi 2009084 <__divdf3+0x14c>
 20090c8:	21 66 00 ff 	andi r6,r11,0xff
 20090cc:	34 01 00 80 	mvi r1,128
 20090d0:	44 c1 00 19 	be r6,r1,2009134 <__divdf3+0x1fc>
 20090d4:	b9 c0 08 00 	mv r1,r14
 20090d8:	5b 8b 00 44 	sw (sp+68),r11
 20090dc:	5b 8c 00 40 	sw (sp+64),r12
 20090e0:	f8 00 02 36 	calli 20099b8 <__pack_d>
 20090e4:	2b 9d 00 04 	lw ra,(sp+4)
 20090e8:	2b 8b 00 14 	lw r11,(sp+20)
 20090ec:	2b 8c 00 10 	lw r12,(sp+16)
 20090f0:	2b 8d 00 0c 	lw r13,(sp+12)
 20090f4:	2b 8e 00 08 	lw r14,(sp+8)
 20090f8:	37 9c 00 54 	addi sp,sp,84
 20090fc:	c3 a0 00 00 	ret
 2009100:	b4 42 20 00 	add r4,r2,r2
 2009104:	f4 44 18 00 	cmpgu r3,r2,r4
 2009108:	b4 a5 08 00 	add r1,r5,r5
 200910c:	34 c2 ff ff 	addi r2,r6,-1
 2009110:	5b 82 00 38 	sw (sp+56),r2
 2009114:	b4 61 28 00 	add r5,r3,r1
 2009118:	b8 80 10 00 	mv r2,r4
 200911c:	e3 ff ff bb 	bi 2009008 <__divdf3+0xd0>
 2009120:	5b 85 00 30 	sw (sp+48),r5
 2009124:	b9 c0 08 00 	mv r1,r14
 2009128:	e3 ff ff d7 	bi 2009084 <__divdf3+0x14c>
 200912c:	55 a2 ff f5 	bgu r13,r2,2009100 <__divdf3+0x1c8>
 2009130:	e3 ff ff b6 	bi 2009008 <__divdf3+0xd0>
 2009134:	21 61 01 00 	andi r1,r11,0x100
 2009138:	5c 20 ff e7 	bne r1,r0,20090d4 <__divdf3+0x19c>
 200913c:	b8 a3 08 00 	or r1,r5,r3
 2009140:	44 20 ff e5 	be r1,r0,20090d4 <__divdf3+0x19c>
 2009144:	b5 66 08 00 	add r1,r11,r6
 2009148:	f5 61 10 00 	cmpgu r2,r11,r1
 200914c:	34 03 ff 00 	mvi r3,-256
 2009150:	b4 4c 60 00 	add r12,r2,r12
 2009154:	a0 23 58 00 	and r11,r1,r3
 2009158:	e3 ff ff df 	bi 20090d4 <__divdf3+0x19c>

0200915c <__eqdf2>:
 200915c:	37 9c ff b4 	addi sp,sp,-76
 2009160:	5b 8b 00 0c 	sw (sp+12),r11
 2009164:	5b 8c 00 08 	sw (sp+8),r12
 2009168:	5b 9d 00 04 	sw (sp+4),ra
 200916c:	37 8c 00 28 	addi r12,sp,40
 2009170:	5b 82 00 4c 	sw (sp+76),r2
 2009174:	5b 81 00 48 	sw (sp+72),r1
 2009178:	b9 80 10 00 	mv r2,r12
 200917c:	37 81 00 48 	addi r1,sp,72
 2009180:	5b 84 00 44 	sw (sp+68),r4
 2009184:	5b 83 00 40 	sw (sp+64),r3
 2009188:	37 8b 00 10 	addi r11,sp,16
 200918c:	f8 00 02 ae 	calli 2009c44 <__unpack_d>
 2009190:	37 81 00 40 	addi r1,sp,64
 2009194:	b9 60 10 00 	mv r2,r11
 2009198:	f8 00 02 ab 	calli 2009c44 <__unpack_d>
 200919c:	2b 81 00 28 	lw r1,(sp+40)
 20091a0:	34 02 00 01 	mvi r2,1
 20091a4:	50 41 00 0b 	bgeu r2,r1,20091d0 <__eqdf2+0x74>
 20091a8:	2b 81 00 10 	lw r1,(sp+16)
 20091ac:	50 41 00 09 	bgeu r2,r1,20091d0 <__eqdf2+0x74>
 20091b0:	b9 80 08 00 	mv r1,r12
 20091b4:	b9 60 10 00 	mv r2,r11
 20091b8:	f8 00 02 eb 	calli 2009d64 <__fpcmp_parts_d>
 20091bc:	2b 9d 00 04 	lw ra,(sp+4)
 20091c0:	2b 8b 00 0c 	lw r11,(sp+12)
 20091c4:	2b 8c 00 08 	lw r12,(sp+8)
 20091c8:	37 9c 00 4c 	addi sp,sp,76
 20091cc:	c3 a0 00 00 	ret
 20091d0:	34 01 00 01 	mvi r1,1
 20091d4:	2b 9d 00 04 	lw ra,(sp+4)
 20091d8:	2b 8b 00 0c 	lw r11,(sp+12)
 20091dc:	2b 8c 00 08 	lw r12,(sp+8)
 20091e0:	37 9c 00 4c 	addi sp,sp,76
 20091e4:	c3 a0 00 00 	ret

020091e8 <__nedf2>:
 20091e8:	37 9c ff b4 	addi sp,sp,-76
 20091ec:	5b 8b 00 0c 	sw (sp+12),r11
 20091f0:	5b 8c 00 08 	sw (sp+8),r12
 20091f4:	5b 9d 00 04 	sw (sp+4),ra
 20091f8:	37 8c 00 28 	addi r12,sp,40
 20091fc:	5b 82 00 4c 	sw (sp+76),r2
 2009200:	5b 81 00 48 	sw (sp+72),r1
 2009204:	b9 80 10 00 	mv r2,r12
 2009208:	37 81 00 48 	addi r1,sp,72
 200920c:	5b 84 00 44 	sw (sp+68),r4
 2009210:	5b 83 00 40 	sw (sp+64),r3
 2009214:	37 8b 00 10 	addi r11,sp,16
 2009218:	f8 00 02 8b 	calli 2009c44 <__unpack_d>
 200921c:	37 81 00 40 	addi r1,sp,64
 2009220:	b9 60 10 00 	mv r2,r11
 2009224:	f8 00 02 88 	calli 2009c44 <__unpack_d>
 2009228:	2b 81 00 28 	lw r1,(sp+40)
 200922c:	34 02 00 01 	mvi r2,1
 2009230:	50 41 00 0b 	bgeu r2,r1,200925c <__nedf2+0x74>
 2009234:	2b 81 00 10 	lw r1,(sp+16)
 2009238:	50 41 00 09 	bgeu r2,r1,200925c <__nedf2+0x74>
 200923c:	b9 80 08 00 	mv r1,r12
 2009240:	b9 60 10 00 	mv r2,r11
 2009244:	f8 00 02 c8 	calli 2009d64 <__fpcmp_parts_d>
 2009248:	2b 9d 00 04 	lw ra,(sp+4)
 200924c:	2b 8b 00 0c 	lw r11,(sp+12)
 2009250:	2b 8c 00 08 	lw r12,(sp+8)
 2009254:	37 9c 00 4c 	addi sp,sp,76
 2009258:	c3 a0 00 00 	ret
 200925c:	34 01 00 01 	mvi r1,1
 2009260:	2b 9d 00 04 	lw ra,(sp+4)
 2009264:	2b 8b 00 0c 	lw r11,(sp+12)
 2009268:	2b 8c 00 08 	lw r12,(sp+8)
 200926c:	37 9c 00 4c 	addi sp,sp,76
 2009270:	c3 a0 00 00 	ret

02009274 <__gtdf2>:
 2009274:	37 9c ff b4 	addi sp,sp,-76
 2009278:	5b 8b 00 0c 	sw (sp+12),r11
 200927c:	5b 8c 00 08 	sw (sp+8),r12
 2009280:	5b 9d 00 04 	sw (sp+4),ra
 2009284:	37 8c 00 28 	addi r12,sp,40
 2009288:	5b 82 00 4c 	sw (sp+76),r2
 200928c:	5b 81 00 48 	sw (sp+72),r1
 2009290:	b9 80 10 00 	mv r2,r12
 2009294:	37 81 00 48 	addi r1,sp,72
 2009298:	5b 84 00 44 	sw (sp+68),r4
 200929c:	5b 83 00 40 	sw (sp+64),r3
 20092a0:	37 8b 00 10 	addi r11,sp,16
 20092a4:	f8 00 02 68 	calli 2009c44 <__unpack_d>
 20092a8:	37 81 00 40 	addi r1,sp,64
 20092ac:	b9 60 10 00 	mv r2,r11
 20092b0:	f8 00 02 65 	calli 2009c44 <__unpack_d>
 20092b4:	2b 81 00 28 	lw r1,(sp+40)
 20092b8:	34 02 00 01 	mvi r2,1
 20092bc:	50 41 00 07 	bgeu r2,r1,20092d8 <__gtdf2+0x64>
 20092c0:	2b 81 00 10 	lw r1,(sp+16)
 20092c4:	50 41 00 05 	bgeu r2,r1,20092d8 <__gtdf2+0x64>
 20092c8:	b9 80 08 00 	mv r1,r12
 20092cc:	b9 60 10 00 	mv r2,r11
 20092d0:	f8 00 02 a5 	calli 2009d64 <__fpcmp_parts_d>
 20092d4:	e0 00 00 02 	bi 20092dc <__gtdf2+0x68>
 20092d8:	34 01 ff ff 	mvi r1,-1
 20092dc:	2b 9d 00 04 	lw ra,(sp+4)
 20092e0:	2b 8b 00 0c 	lw r11,(sp+12)
 20092e4:	2b 8c 00 08 	lw r12,(sp+8)
 20092e8:	37 9c 00 4c 	addi sp,sp,76
 20092ec:	c3 a0 00 00 	ret

020092f0 <__gedf2>:
 20092f0:	37 9c ff b4 	addi sp,sp,-76
 20092f4:	5b 8b 00 0c 	sw (sp+12),r11
 20092f8:	5b 8c 00 08 	sw (sp+8),r12
 20092fc:	5b 9d 00 04 	sw (sp+4),ra
 2009300:	37 8c 00 28 	addi r12,sp,40
 2009304:	5b 82 00 4c 	sw (sp+76),r2
 2009308:	5b 81 00 48 	sw (sp+72),r1
 200930c:	b9 80 10 00 	mv r2,r12
 2009310:	37 81 00 48 	addi r1,sp,72
 2009314:	5b 84 00 44 	sw (sp+68),r4
 2009318:	5b 83 00 40 	sw (sp+64),r3
 200931c:	37 8b 00 10 	addi r11,sp,16
 2009320:	f8 00 02 49 	calli 2009c44 <__unpack_d>
 2009324:	37 81 00 40 	addi r1,sp,64
 2009328:	b9 60 10 00 	mv r2,r11
 200932c:	f8 00 02 46 	calli 2009c44 <__unpack_d>
 2009330:	2b 81 00 28 	lw r1,(sp+40)
 2009334:	34 02 00 01 	mvi r2,1
 2009338:	50 41 00 07 	bgeu r2,r1,2009354 <__gedf2+0x64>
 200933c:	2b 81 00 10 	lw r1,(sp+16)
 2009340:	50 41 00 05 	bgeu r2,r1,2009354 <__gedf2+0x64>
 2009344:	b9 80 08 00 	mv r1,r12
 2009348:	b9 60 10 00 	mv r2,r11
 200934c:	f8 00 02 86 	calli 2009d64 <__fpcmp_parts_d>
 2009350:	e0 00 00 02 	bi 2009358 <__gedf2+0x68>
 2009354:	34 01 ff ff 	mvi r1,-1
 2009358:	2b 9d 00 04 	lw ra,(sp+4)
 200935c:	2b 8b 00 0c 	lw r11,(sp+12)
 2009360:	2b 8c 00 08 	lw r12,(sp+8)
 2009364:	37 9c 00 4c 	addi sp,sp,76
 2009368:	c3 a0 00 00 	ret

0200936c <__ltdf2>:
 200936c:	37 9c ff b4 	addi sp,sp,-76
 2009370:	5b 8b 00 0c 	sw (sp+12),r11
 2009374:	5b 8c 00 08 	sw (sp+8),r12
 2009378:	5b 9d 00 04 	sw (sp+4),ra
 200937c:	37 8c 00 28 	addi r12,sp,40
 2009380:	5b 82 00 4c 	sw (sp+76),r2
 2009384:	5b 81 00 48 	sw (sp+72),r1
 2009388:	b9 80 10 00 	mv r2,r12
 200938c:	37 81 00 48 	addi r1,sp,72
 2009390:	5b 84 00 44 	sw (sp+68),r4
 2009394:	5b 83 00 40 	sw (sp+64),r3
 2009398:	37 8b 00 10 	addi r11,sp,16
 200939c:	f8 00 02 2a 	calli 2009c44 <__unpack_d>
 20093a0:	37 81 00 40 	addi r1,sp,64
 20093a4:	b9 60 10 00 	mv r2,r11
 20093a8:	f8 00 02 27 	calli 2009c44 <__unpack_d>
 20093ac:	2b 81 00 28 	lw r1,(sp+40)
 20093b0:	34 02 00 01 	mvi r2,1
 20093b4:	50 41 00 0b 	bgeu r2,r1,20093e0 <__ltdf2+0x74>
 20093b8:	2b 81 00 10 	lw r1,(sp+16)
 20093bc:	50 41 00 09 	bgeu r2,r1,20093e0 <__ltdf2+0x74>
 20093c0:	b9 80 08 00 	mv r1,r12
 20093c4:	b9 60 10 00 	mv r2,r11
 20093c8:	f8 00 02 67 	calli 2009d64 <__fpcmp_parts_d>
 20093cc:	2b 9d 00 04 	lw ra,(sp+4)
 20093d0:	2b 8b 00 0c 	lw r11,(sp+12)
 20093d4:	2b 8c 00 08 	lw r12,(sp+8)
 20093d8:	37 9c 00 4c 	addi sp,sp,76
 20093dc:	c3 a0 00 00 	ret
 20093e0:	34 01 00 01 	mvi r1,1
 20093e4:	2b 9d 00 04 	lw ra,(sp+4)
 20093e8:	2b 8b 00 0c 	lw r11,(sp+12)
 20093ec:	2b 8c 00 08 	lw r12,(sp+8)
 20093f0:	37 9c 00 4c 	addi sp,sp,76
 20093f4:	c3 a0 00 00 	ret

020093f8 <__floatsidf>:
 20093f8:	37 9c ff d8 	addi sp,sp,-40
 20093fc:	5b 8b 00 10 	sw (sp+16),r11
 2009400:	5b 8c 00 0c 	sw (sp+12),r12
 2009404:	5b 8d 00 08 	sw (sp+8),r13
 2009408:	5b 9d 00 04 	sw (sp+4),ra
 200940c:	34 02 00 03 	mvi r2,3
 2009410:	5b 82 00 14 	sw (sp+20),r2
 2009414:	00 2c 00 1f 	srui r12,r1,31
 2009418:	b8 20 10 00 	mv r2,r1
 200941c:	5c 20 00 0c 	bne r1,r0,200944c <__floatsidf+0x54>
 2009420:	34 01 00 02 	mvi r1,2
 2009424:	5b 81 00 14 	sw (sp+20),r1
 2009428:	37 81 00 14 	addi r1,sp,20
 200942c:	5b 8c 00 18 	sw (sp+24),r12
 2009430:	f8 00 01 62 	calli 20099b8 <__pack_d>
 2009434:	2b 9d 00 04 	lw ra,(sp+4)
 2009438:	2b 8b 00 10 	lw r11,(sp+16)
 200943c:	2b 8c 00 0c 	lw r12,(sp+12)
 2009440:	2b 8d 00 08 	lw r13,(sp+8)
 2009444:	37 9c 00 28 	addi sp,sp,40
 2009448:	c3 a0 00 00 	ret
 200944c:	b8 20 58 00 	mv r11,r1
 2009450:	5d 80 00 14 	bne r12,r0,20094a0 <__floatsidf+0xa8>
 2009454:	34 02 00 3c 	mvi r2,60
 2009458:	34 0d 00 00 	mvi r13,0
 200945c:	b9 60 08 00 	mv r1,r11
 2009460:	5b 82 00 1c 	sw (sp+28),r2
 2009464:	5b 8b 00 28 	sw (sp+40),r11
 2009468:	5b 8d 00 24 	sw (sp+36),r13
 200946c:	f8 00 01 35 	calli 2009940 <__clzsi2>
 2009470:	34 23 00 1d 	addi r3,r1,29
 2009474:	4d a3 ff ed 	bge r13,r3,2009428 <__floatsidf+0x30>
 2009478:	20 61 00 20 	andi r1,r3,0x20
 200947c:	b9 a0 20 00 	mv r4,r13
 2009480:	bd 63 10 00 	sl r2,r11,r3
 2009484:	44 2d 00 0f 	be r1,r13,20094c0 <__floatsidf+0xc8>
 2009488:	34 01 00 3c 	mvi r1,60
 200948c:	c8 23 08 00 	sub r1,r1,r3
 2009490:	5b 84 00 28 	sw (sp+40),r4
 2009494:	5b 82 00 24 	sw (sp+36),r2
 2009498:	5b 81 00 1c 	sw (sp+28),r1
 200949c:	e3 ff ff e3 	bi 2009428 <__floatsidf+0x30>
 20094a0:	78 01 80 00 	mvhi r1,0x8000
 20094a4:	38 21 00 00 	ori r1,r1,0x0
 20094a8:	c8 02 58 00 	sub r11,r0,r2
 20094ac:	5c 41 ff ea 	bne r2,r1,2009454 <__floatsidf+0x5c>
 20094b0:	78 01 c1 e0 	mvhi r1,0xc1e0
 20094b4:	38 21 00 00 	ori r1,r1,0x0
 20094b8:	34 02 00 00 	mvi r2,0
 20094bc:	e3 ff ff de 	bi 2009434 <__floatsidf+0x3c>
 20094c0:	01 62 00 01 	srui r2,r11,1
 20094c4:	a4 60 08 00 	not r1,r3
 20094c8:	80 41 10 00 	sru r2,r2,r1
 20094cc:	bd 63 20 00 	sl r4,r11,r3
 20094d0:	e3 ff ff ee 	bi 2009488 <__floatsidf+0x90>

020094d4 <__fixdfsi>:
 20094d4:	37 9c ff dc 	addi sp,sp,-36
 20094d8:	5b 9d 00 04 	sw (sp+4),ra
 20094dc:	5b 82 00 24 	sw (sp+36),r2
 20094e0:	5b 81 00 20 	sw (sp+32),r1
 20094e4:	37 82 00 08 	addi r2,sp,8
 20094e8:	37 81 00 20 	addi r1,sp,32
 20094ec:	f8 00 01 d6 	calli 2009c44 <__unpack_d>
 20094f0:	2b 82 00 08 	lw r2,(sp+8)
 20094f4:	34 01 00 02 	mvi r1,2
 20094f8:	44 41 00 11 	be r2,r1,200953c <__fixdfsi+0x68>
 20094fc:	34 01 00 01 	mvi r1,1
 2009500:	50 22 00 0f 	bgeu r1,r2,200953c <__fixdfsi+0x68>
 2009504:	34 01 00 04 	mvi r1,4
 2009508:	44 41 00 05 	be r2,r1,200951c <__fixdfsi+0x48>
 200950c:	2b 82 00 10 	lw r2,(sp+16)
 2009510:	48 02 00 0b 	bg r0,r2,200953c <__fixdfsi+0x68>
 2009514:	34 01 00 1e 	mvi r1,30
 2009518:	4c 22 00 14 	bge r1,r2,2009568 <__fixdfsi+0x94>
 200951c:	2b 81 00 0c 	lw r1,(sp+12)
 2009520:	5c 20 00 0c 	bne r1,r0,2009550 <__fixdfsi+0x7c>
 2009524:	78 02 7f ff 	mvhi r2,0x7fff
 2009528:	38 42 ff ff 	ori r2,r2,0xffff
 200952c:	b8 40 08 00 	mv r1,r2
 2009530:	2b 9d 00 04 	lw ra,(sp+4)
 2009534:	37 9c 00 24 	addi sp,sp,36
 2009538:	c3 a0 00 00 	ret
 200953c:	34 02 00 00 	mvi r2,0
 2009540:	b8 40 08 00 	mv r1,r2
 2009544:	2b 9d 00 04 	lw ra,(sp+4)
 2009548:	37 9c 00 24 	addi sp,sp,36
 200954c:	c3 a0 00 00 	ret
 2009550:	78 02 80 00 	mvhi r2,0x8000
 2009554:	38 42 00 00 	ori r2,r2,0x0
 2009558:	b8 40 08 00 	mv r1,r2
 200955c:	2b 9d 00 04 	lw ra,(sp+4)
 2009560:	37 9c 00 24 	addi sp,sp,36
 2009564:	c3 a0 00 00 	ret
 2009568:	2b 85 00 18 	lw r5,(sp+24)
 200956c:	34 01 00 3c 	mvi r1,60
 2009570:	c8 22 20 00 	sub r4,r1,r2
 2009574:	20 82 00 20 	andi r2,r4,0x20
 2009578:	2b 86 00 1c 	lw r6,(sp+28)
 200957c:	80 a4 18 00 	sru r3,r5,r4
 2009580:	44 40 00 06 	be r2,r0,2009598 <__fixdfsi+0xc4>
 2009584:	2b 81 00 0c 	lw r1,(sp+12)
 2009588:	b8 60 10 00 	mv r2,r3
 200958c:	44 20 ff ed 	be r1,r0,2009540 <__fixdfsi+0x6c>
 2009590:	c8 03 10 00 	sub r2,r0,r3
 2009594:	e3 ff ff eb 	bi 2009540 <__fixdfsi+0x6c>
 2009598:	3c a1 00 01 	sli r1,r5,1
 200959c:	a4 80 10 00 	not r2,r4
 20095a0:	bc 22 08 00 	sl r1,r1,r2
 20095a4:	80 c4 18 00 	sru r3,r6,r4
 20095a8:	b8 23 18 00 	or r3,r1,r3
 20095ac:	e3 ff ff f6 	bi 2009584 <__fixdfsi+0xb0>

020095b0 <__floatunsidf>:
 20095b0:	37 9c ff dc 	addi sp,sp,-36
 20095b4:	5b 8b 00 0c 	sw (sp+12),r11
 20095b8:	5b 8c 00 08 	sw (sp+8),r12
 20095bc:	5b 9d 00 04 	sw (sp+4),ra
 20095c0:	34 0c 00 00 	mvi r12,0
 20095c4:	b8 20 58 00 	mv r11,r1
 20095c8:	5c 2c 00 0c 	bne r1,r12,20095f8 <__floatunsidf+0x48>
 20095cc:	34 01 00 02 	mvi r1,2
 20095d0:	5b 81 00 10 	sw (sp+16),r1
 20095d4:	37 81 00 10 	addi r1,sp,16
 20095d8:	34 02 00 00 	mvi r2,0
 20095dc:	5b 82 00 14 	sw (sp+20),r2
 20095e0:	f8 00 00 f6 	calli 20099b8 <__pack_d>
 20095e4:	2b 9d 00 04 	lw ra,(sp+4)
 20095e8:	2b 8b 00 0c 	lw r11,(sp+12)
 20095ec:	2b 8c 00 08 	lw r12,(sp+8)
 20095f0:	37 9c 00 24 	addi sp,sp,36
 20095f4:	c3 a0 00 00 	ret
 20095f8:	34 02 00 03 	mvi r2,3
 20095fc:	34 03 00 3c 	mvi r3,60
 2009600:	5b 82 00 10 	sw (sp+16),r2
 2009604:	5b 83 00 18 	sw (sp+24),r3
 2009608:	5b 81 00 24 	sw (sp+36),r1
 200960c:	5b 8c 00 20 	sw (sp+32),r12
 2009610:	f8 00 00 cc 	calli 2009940 <__clzsi2>
 2009614:	34 24 00 1d 	addi r4,r1,29
 2009618:	4c 80 00 17 	bge r4,r0,2009674 <__floatunsidf+0xc4>
 200961c:	c8 04 10 00 	sub r2,r0,r4
 2009620:	34 01 00 01 	mvi r1,1
 2009624:	20 45 00 20 	andi r5,r2,0x20
 2009628:	b9 80 18 00 	mv r3,r12
 200962c:	bc 22 08 00 	sl r1,r1,r2
 2009630:	44 a0 00 02 	be r5,r0,2009638 <__floatunsidf+0x88>
 2009634:	b9 80 08 00 	mv r1,r12
 2009638:	34 21 ff ff 	addi r1,r1,-1
 200963c:	a0 2b 08 00 	and r1,r1,r11
 2009640:	44 20 00 02 	be r1,r0,2009648 <__floatunsidf+0x98>
 2009644:	34 03 00 01 	mvi r3,1
 2009648:	81 62 08 00 	sru r1,r11,r2
 200964c:	44 a0 00 02 	be r5,r0,2009654 <__floatunsidf+0xa4>
 2009650:	34 01 00 00 	mvi r1,0
 2009654:	34 02 00 3c 	mvi r2,60
 2009658:	b8 61 18 00 	or r3,r3,r1
 200965c:	c8 44 10 00 	sub r2,r2,r4
 2009660:	34 01 00 00 	mvi r1,0
 2009664:	5b 83 00 24 	sw (sp+36),r3
 2009668:	5b 81 00 20 	sw (sp+32),r1
 200966c:	5b 82 00 18 	sw (sp+24),r2
 2009670:	e3 ff ff d9 	bi 20095d4 <__floatunsidf+0x24>
 2009674:	44 80 ff d8 	be r4,r0,20095d4 <__floatunsidf+0x24>
 2009678:	20 81 00 20 	andi r1,r4,0x20
 200967c:	b9 80 18 00 	mv r3,r12
 2009680:	bd 64 10 00 	sl r2,r11,r4
 2009684:	44 20 00 07 	be r1,r0,20096a0 <__floatunsidf+0xf0>
 2009688:	34 01 00 3c 	mvi r1,60
 200968c:	c8 24 08 00 	sub r1,r1,r4
 2009690:	5b 83 00 24 	sw (sp+36),r3
 2009694:	5b 82 00 20 	sw (sp+32),r2
 2009698:	5b 81 00 18 	sw (sp+24),r1
 200969c:	e3 ff ff ce 	bi 20095d4 <__floatunsidf+0x24>
 20096a0:	01 62 00 01 	srui r2,r11,1
 20096a4:	a4 80 08 00 	not r1,r4
 20096a8:	80 41 10 00 	sru r2,r2,r1
 20096ac:	bd 64 18 00 	sl r3,r11,r4
 20096b0:	e3 ff ff f6 	bi 2009688 <__floatunsidf+0xd8>

020096b4 <__divsi3>:
 20096b4:	37 9c ff f8 	addi sp,sp,-8
 20096b8:	5b 8b 00 08 	sw (sp+8),r11
 20096bc:	5b 9d 00 04 	sw (sp+4),ra
 20096c0:	b8 40 20 00 	mv r4,r2
 20096c4:	b8 20 28 00 	mv r5,r1
 20096c8:	5c 40 00 05 	bne r2,r0,20096dc <__divsi3+0x28>
 20096cc:	90 e0 08 00 	rcsr r1,EBA
 20096d0:	bb a0 f0 00 	mv ea,ra
 20096d4:	34 21 00 a0 	addi r1,r1,160
 20096d8:	c0 20 00 00 	b r1
 20096dc:	b8 85 10 00 	or r2,r4,r5
 20096e0:	34 01 00 0f 	mvi r1,15
 20096e4:	54 41 00 0b 	bgu r2,r1,2009710 <__divsi3+0x5c>
 20096e8:	78 01 02 00 	mvhi r1,0x200
 20096ec:	38 21 a6 20 	ori r1,r1,0xa620
 20096f0:	3c a2 00 04 	sli r2,r5,4
 20096f4:	b4 24 08 00 	add r1,r1,r4
 20096f8:	b4 22 08 00 	add r1,r1,r2
 20096fc:	40 21 00 00 	lbu r1,(r1+0)
 2009700:	2b 9d 00 04 	lw ra,(sp+4)
 2009704:	2b 8b 00 08 	lw r11,(sp+8)
 2009708:	37 9c 00 08 	addi sp,sp,8
 200970c:	c3 a0 00 00 	ret
 2009710:	48 05 00 13 	bg r0,r5,200975c <__divsi3+0xa8>
 2009714:	34 0b 00 00 	mvi r11,0
 2009718:	4c 80 00 03 	bge r4,r0,2009724 <__divsi3+0x70>
 200971c:	65 6b 00 00 	cmpei r11,r11,0
 2009720:	c8 04 20 00 	sub r4,r0,r4
 2009724:	90 c0 08 00 	rcsr r1,CFG
 2009728:	20 23 00 02 	andi r3,r1,0x2
 200972c:	8c a4 08 00 	divu r1,r5,r4
 2009730:	44 60 00 07 	be r3,r0,200974c <__divsi3+0x98>
 2009734:	45 60 ff f3 	be r11,r0,2009700 <__divsi3+0x4c>
 2009738:	c8 01 08 00 	sub r1,r0,r1
 200973c:	2b 9d 00 04 	lw ra,(sp+4)
 2009740:	2b 8b 00 08 	lw r11,(sp+8)
 2009744:	37 9c 00 08 	addi sp,sp,8
 2009748:	c3 a0 00 00 	ret
 200974c:	b8 a0 08 00 	mv r1,r5
 2009750:	b8 80 10 00 	mv r2,r4
 2009754:	f8 00 01 b9 	calli 2009e38 <__udivmodsi4>
 2009758:	e3 ff ff f7 	bi 2009734 <__divsi3+0x80>
 200975c:	c8 05 28 00 	sub r5,r0,r5
 2009760:	34 0b 00 01 	mvi r11,1
 2009764:	4c 80 ff f0 	bge r4,r0,2009724 <__divsi3+0x70>
 2009768:	e3 ff ff ed 	bi 200971c <__divsi3+0x68>

0200976c <__modsi3>:
 200976c:	37 9c ff f8 	addi sp,sp,-8
 2009770:	5b 8b 00 08 	sw (sp+8),r11
 2009774:	5b 9d 00 04 	sw (sp+4),ra
 2009778:	b8 40 18 00 	mv r3,r2
 200977c:	b8 20 20 00 	mv r4,r1
 2009780:	5c 40 00 09 	bne r2,r0,20097a4 <__modsi3+0x38>
 2009784:	90 00 08 00 	rcsr r1,IE
 2009788:	20 21 00 01 	andi r1,r1,0x1
 200978c:	b4 21 08 00 	add r1,r1,r1
 2009790:	d0 01 00 00 	wcsr IE,r1
 2009794:	90 e0 10 00 	rcsr r2,EBA
 2009798:	bb a0 f0 00 	mv ea,ra
 200979c:	34 42 00 a0 	addi r2,r2,160
 20097a0:	c0 40 00 00 	b r2
 20097a4:	48 04 00 16 	bg r0,r4,20097fc <__modsi3+0x90>
 20097a8:	34 0b 00 00 	mvi r11,0
 20097ac:	14 62 00 1f 	sri r2,r3,31
 20097b0:	90 c0 08 00 	rcsr r1,CFG
 20097b4:	98 43 18 00 	xor r3,r2,r3
 20097b8:	20 21 00 02 	andi r1,r1,0x2
 20097bc:	c8 62 18 00 	sub r3,r3,r2
 20097c0:	c4 83 10 00 	modu r2,r4,r3
 20097c4:	44 20 00 08 	be r1,r0,20097e4 <__modsi3+0x78>
 20097c8:	45 60 00 02 	be r11,r0,20097d0 <__modsi3+0x64>
 20097cc:	c8 02 10 00 	sub r2,r0,r2
 20097d0:	b8 40 08 00 	mv r1,r2
 20097d4:	2b 9d 00 04 	lw ra,(sp+4)
 20097d8:	2b 8b 00 08 	lw r11,(sp+8)
 20097dc:	37 9c 00 08 	addi sp,sp,8
 20097e0:	c3 a0 00 00 	ret
 20097e4:	b8 60 10 00 	mv r2,r3
 20097e8:	b8 80 08 00 	mv r1,r4
 20097ec:	34 03 00 01 	mvi r3,1
 20097f0:	f8 00 01 92 	calli 2009e38 <__udivmodsi4>
 20097f4:	b8 20 10 00 	mv r2,r1
 20097f8:	e3 ff ff f4 	bi 20097c8 <__modsi3+0x5c>
 20097fc:	c8 04 20 00 	sub r4,r0,r4
 2009800:	34 0b 00 01 	mvi r11,1
 2009804:	e3 ff ff ea 	bi 20097ac <__modsi3+0x40>

02009808 <__udivsi3>:
 2009808:	37 9c ff fc 	addi sp,sp,-4
 200980c:	5b 9d 00 04 	sw (sp+4),ra
 2009810:	b8 40 18 00 	mv r3,r2
 2009814:	b8 20 20 00 	mv r4,r1
 2009818:	5c 40 00 09 	bne r2,r0,200983c <__udivsi3+0x34>
 200981c:	90 00 08 00 	rcsr r1,IE
 2009820:	20 21 00 01 	andi r1,r1,0x1
 2009824:	b4 21 08 00 	add r1,r1,r1
 2009828:	d0 01 00 00 	wcsr IE,r1
 200982c:	90 e0 10 00 	rcsr r2,EBA
 2009830:	bb a0 f0 00 	mv ea,ra
 2009834:	34 42 00 a0 	addi r2,r2,160
 2009838:	c0 40 00 00 	b r2
 200983c:	b8 60 10 00 	mv r2,r3
 2009840:	b8 80 08 00 	mv r1,r4
 2009844:	34 03 00 00 	mvi r3,0
 2009848:	f8 00 01 7c 	calli 2009e38 <__udivmodsi4>
 200984c:	2b 9d 00 04 	lw ra,(sp+4)
 2009850:	37 9c 00 04 	addi sp,sp,4
 2009854:	c3 a0 00 00 	ret

02009858 <__umodsi3>:
 2009858:	37 9c ff fc 	addi sp,sp,-4
 200985c:	5b 9d 00 04 	sw (sp+4),ra
 2009860:	b8 40 18 00 	mv r3,r2
 2009864:	b8 20 20 00 	mv r4,r1
 2009868:	5c 40 00 09 	bne r2,r0,200988c <__umodsi3+0x34>
 200986c:	90 00 08 00 	rcsr r1,IE
 2009870:	20 21 00 01 	andi r1,r1,0x1
 2009874:	b4 21 08 00 	add r1,r1,r1
 2009878:	d0 01 00 00 	wcsr IE,r1
 200987c:	90 e0 10 00 	rcsr r2,EBA
 2009880:	bb a0 f0 00 	mv ea,ra
 2009884:	34 42 00 a0 	addi r2,r2,160
 2009888:	c0 40 00 00 	b r2
 200988c:	b8 60 10 00 	mv r2,r3
 2009890:	b8 80 08 00 	mv r1,r4
 2009894:	34 03 00 01 	mvi r3,1
 2009898:	f8 00 01 68 	calli 2009e38 <__udivmodsi4>
 200989c:	2b 9d 00 04 	lw ra,(sp+4)
 20098a0:	37 9c 00 04 	addi sp,sp,4
 20098a4:	c3 a0 00 00 	ret

020098a8 <__muldi3>:
 20098a8:	b8 40 40 00 	mv r8,r2
 20098ac:	b8 80 48 00 	mv r9,r4
 20098b0:	20 42 ff ff 	andi r2,r2,0xffff
 20098b4:	01 07 00 10 	srui r7,r8,16
 20098b8:	20 84 ff ff 	andi r4,r4,0xffff
 20098bc:	01 26 00 10 	srui r6,r9,16
 20098c0:	88 82 50 00 	mul r10,r4,r2
 20098c4:	88 c2 10 00 	mul r2,r6,r2
 20098c8:	88 87 20 00 	mul r4,r4,r7
 20098cc:	01 45 00 10 	srui r5,r10,16
 20098d0:	88 c7 30 00 	mul r6,r6,r7
 20098d4:	b4 82 10 00 	add r2,r4,r2
 20098d8:	b4 45 28 00 	add r5,r2,r5
 20098dc:	b8 20 10 00 	mv r2,r1
 20098e0:	50 a4 00 04 	bgeu r5,r4,20098f0 <__muldi3+0x48>
 20098e4:	78 01 00 01 	mvhi r1,0x1
 20098e8:	38 21 00 00 	ori r1,r1,0x0
 20098ec:	b4 c1 30 00 	add r6,r6,r1
 20098f0:	89 22 10 00 	mul r2,r9,r2
 20098f4:	89 03 18 00 	mul r3,r8,r3
 20098f8:	00 a1 00 10 	srui r1,r5,16
 20098fc:	3c a4 00 10 	sli r4,r5,16
 2009900:	b4 62 18 00 	add r3,r3,r2
 2009904:	b4 c1 08 00 	add r1,r6,r1
 2009908:	21 42 ff ff 	andi r2,r10,0xffff
 200990c:	b4 61 08 00 	add r1,r3,r1
 2009910:	b4 82 10 00 	add r2,r4,r2
 2009914:	c3 a0 00 00 	ret

02009918 <__ucmpdi2>:
 2009918:	54 61 00 08 	bgu r3,r1,2009938 <__ucmpdi2+0x20>
 200991c:	54 23 00 05 	bgu r1,r3,2009930 <__ucmpdi2+0x18>
 2009920:	54 82 00 06 	bgu r4,r2,2009938 <__ucmpdi2+0x20>
 2009924:	54 44 00 03 	bgu r2,r4,2009930 <__ucmpdi2+0x18>
 2009928:	34 01 00 01 	mvi r1,1
 200992c:	c3 a0 00 00 	ret
 2009930:	34 01 00 02 	mvi r1,2
 2009934:	c3 a0 00 00 	ret
 2009938:	34 01 00 00 	mvi r1,0
 200993c:	c3 a0 00 00 	ret

02009940 <__clzsi2>:
 2009940:	b8 20 18 00 	mv r3,r1
 2009944:	38 01 ff ff 	mvu r1,0xffff
 2009948:	54 61 00 0e 	bgu r3,r1,2009980 <__clzsi2+0x40>
 200994c:	34 01 00 ff 	mvi r1,255
 2009950:	34 02 00 00 	mvi r2,0
 2009954:	34 04 00 20 	mvi r4,32
 2009958:	50 23 00 03 	bgeu r1,r3,2009964 <__clzsi2+0x24>
 200995c:	34 02 00 08 	mvi r2,8
 2009960:	34 04 00 18 	mvi r4,24
 2009964:	80 62 08 00 	sru r1,r3,r2
 2009968:	78 02 02 00 	mvhi r2,0x200
 200996c:	38 42 a7 20 	ori r2,r2,0xa720
 2009970:	b4 41 10 00 	add r2,r2,r1
 2009974:	40 41 00 00 	lbu r1,(r2+0)
 2009978:	c8 81 08 00 	sub r1,r4,r1
 200997c:	c3 a0 00 00 	ret
 2009980:	78 01 00 ff 	mvhi r1,0xff
 2009984:	34 02 00 10 	mvi r2,16
 2009988:	38 21 ff ff 	ori r1,r1,0xffff
 200998c:	b8 40 20 00 	mv r4,r2
 2009990:	50 23 ff f5 	bgeu r1,r3,2009964 <__clzsi2+0x24>
 2009994:	34 02 00 18 	mvi r2,24
 2009998:	80 62 08 00 	sru r1,r3,r2
 200999c:	78 02 02 00 	mvhi r2,0x200
 20099a0:	38 42 a7 20 	ori r2,r2,0xa720
 20099a4:	b4 41 10 00 	add r2,r2,r1
 20099a8:	40 41 00 00 	lbu r1,(r2+0)
 20099ac:	34 04 00 08 	mvi r4,8
 20099b0:	c8 81 08 00 	sub r1,r4,r1
 20099b4:	c3 a0 00 00 	ret

020099b8 <__pack_d>:
 20099b8:	37 9c ff e8 	addi sp,sp,-24
 20099bc:	5b 8b 00 18 	sw (sp+24),r11
 20099c0:	5b 8c 00 14 	sw (sp+20),r12
 20099c4:	5b 8d 00 10 	sw (sp+16),r13
 20099c8:	5b 8e 00 0c 	sw (sp+12),r14
 20099cc:	5b 8f 00 08 	sw (sp+8),r15
 20099d0:	5b 9d 00 04 	sw (sp+4),ra
 20099d4:	28 23 00 00 	lw r3,(r1+0)
 20099d8:	b8 20 10 00 	mv r2,r1
 20099dc:	28 24 00 10 	lw r4,(r1+16)
 20099e0:	28 25 00 14 	lw r5,(r1+20)
 20099e4:	28 2b 00 04 	lw r11,(r1+4)
 20099e8:	34 01 00 01 	mvi r1,1
 20099ec:	54 61 00 0c 	bgu r3,r1,2009a1c <__pack_d+0x64>
 20099f0:	78 01 00 08 	mvhi r1,0x8
 20099f4:	38 21 00 00 	ori r1,r1,0x0
 20099f8:	78 03 00 0f 	mvhi r3,0xf
 20099fc:	38 63 ff ff 	ori r3,r3,0xffff
 2009a00:	b8 81 08 00 	or r1,r4,r1
 2009a04:	78 02 7f f0 	mvhi r2,0x7ff0
 2009a08:	38 42 00 00 	ori r2,r2,0x0
 2009a0c:	a0 23 08 00 	and r1,r1,r3
 2009a10:	b8 22 18 00 	or r3,r1,r2
 2009a14:	b8 a0 10 00 	mv r2,r5
 2009a18:	e0 00 00 09 	bi 2009a3c <__pack_d+0x84>
 2009a1c:	34 01 00 04 	mvi r1,4
 2009a20:	44 61 00 11 	be r3,r1,2009a64 <__pack_d+0xac>
 2009a24:	34 01 00 02 	mvi r1,2
 2009a28:	44 61 00 03 	be r3,r1,2009a34 <__pack_d+0x7c>
 2009a2c:	b8 85 08 00 	or r1,r4,r5
 2009a30:	5c 20 00 11 	bne r1,r0,2009a74 <__pack_d+0xbc>
 2009a34:	34 03 00 00 	mvi r3,0
 2009a38:	b8 60 10 00 	mv r2,r3
 2009a3c:	3d 61 00 1f 	sli r1,r11,31
 2009a40:	b8 61 08 00 	or r1,r3,r1
 2009a44:	2b 9d 00 04 	lw ra,(sp+4)
 2009a48:	2b 8b 00 18 	lw r11,(sp+24)
 2009a4c:	2b 8c 00 14 	lw r12,(sp+20)
 2009a50:	2b 8d 00 10 	lw r13,(sp+16)
 2009a54:	2b 8e 00 0c 	lw r14,(sp+12)
 2009a58:	2b 8f 00 08 	lw r15,(sp+8)
 2009a5c:	37 9c 00 18 	addi sp,sp,24
 2009a60:	c3 a0 00 00 	ret
 2009a64:	78 03 7f f0 	mvhi r3,0x7ff0
 2009a68:	38 63 00 00 	ori r3,r3,0x0
 2009a6c:	34 02 00 00 	mvi r2,0
 2009a70:	e3 ff ff f3 	bi 2009a3c <__pack_d+0x84>
 2009a74:	28 43 00 08 	lw r3,(r2+8)
 2009a78:	34 01 fc 02 	mvi r1,-1022
 2009a7c:	4c 61 00 36 	bge r3,r1,2009b54 <__pack_d+0x19c>
 2009a80:	c8 23 38 00 	sub r7,r1,r3
 2009a84:	34 08 00 00 	mvi r8,0
 2009a88:	34 01 00 38 	mvi r1,56
 2009a8c:	b9 00 18 00 	mv r3,r8
 2009a90:	b9 00 30 00 	mv r6,r8
 2009a94:	48 e1 00 29 	bg r7,r1,2009b38 <__pack_d+0x180>
 2009a98:	20 e3 00 20 	andi r3,r7,0x20
 2009a9c:	b9 00 78 00 	mv r15,r8
 2009aa0:	80 87 70 00 	sru r14,r4,r7
 2009aa4:	44 68 00 5d 	be r3,r8,2009c18 <__pack_d+0x260>
 2009aa8:	34 01 00 01 	mvi r1,1
 2009aac:	bc 27 10 00 	sl r2,r1,r7
 2009ab0:	44 60 00 03 	be r3,r0,2009abc <__pack_d+0x104>
 2009ab4:	b8 40 18 00 	mv r3,r2
 2009ab8:	34 02 00 00 	mvi r2,0
 2009abc:	34 41 ff ff 	addi r1,r2,-1
 2009ac0:	f4 41 10 00 	cmpgu r2,r2,r1
 2009ac4:	34 63 ff ff 	addi r3,r3,-1
 2009ac8:	b4 43 10 00 	add r2,r2,r3
 2009acc:	a0 44 68 00 	and r13,r2,r4
 2009ad0:	a0 25 60 00 	and r12,r1,r5
 2009ad4:	34 03 00 00 	mvi r3,0
 2009ad8:	b9 80 10 00 	mv r2,r12
 2009adc:	b9 a0 08 00 	mv r1,r13
 2009ae0:	b8 60 20 00 	mv r4,r3
 2009ae4:	fb ff ff 8d 	calli 2009918 <__ucmpdi2>
 2009ae8:	34 02 00 01 	mvi r2,1
 2009aec:	44 22 00 03 	be r1,r2,2009af8 <__pack_d+0x140>
 2009af0:	b8 40 60 00 	mv r12,r2
 2009af4:	34 0d 00 00 	mvi r13,0
 2009af8:	b9 8e 10 00 	or r2,r12,r14
 2009afc:	20 44 00 ff 	andi r4,r2,0xff
 2009b00:	34 01 00 80 	mvi r1,128
 2009b04:	b9 af 18 00 	or r3,r13,r15
 2009b08:	44 81 00 38 	be r4,r1,2009be8 <__pack_d+0x230>
 2009b0c:	34 44 00 7f 	addi r4,r2,127
 2009b10:	f4 44 10 00 	cmpgu r2,r2,r4
 2009b14:	78 01 0f ff 	mvhi r1,0xfff
 2009b18:	b4 43 10 00 	add r2,r2,r3
 2009b1c:	38 21 ff ff 	ori r1,r1,0xffff
 2009b20:	34 08 00 00 	mvi r8,0
 2009b24:	54 41 00 44 	bgu r2,r1,2009c34 <__pack_d+0x27c>
 2009b28:	00 86 00 08 	srui r6,r4,8
 2009b2c:	3c 41 00 18 	sli r1,r2,24
 2009b30:	00 43 00 08 	srui r3,r2,8
 2009b34:	b8 26 30 00 	or r6,r1,r6
 2009b38:	78 01 00 0f 	mvhi r1,0xf
 2009b3c:	3d 02 00 14 	sli r2,r8,20
 2009b40:	38 21 ff ff 	ori r1,r1,0xffff
 2009b44:	a0 61 08 00 	and r1,r3,r1
 2009b48:	b8 41 18 00 	or r3,r2,r1
 2009b4c:	b8 c0 10 00 	mv r2,r6
 2009b50:	e3 ff ff bb 	bi 2009a3c <__pack_d+0x84>
 2009b54:	34 01 03 ff 	mvi r1,1023
 2009b58:	48 61 ff c3 	bg r3,r1,2009a64 <__pack_d+0xac>
 2009b5c:	b4 61 18 00 	add r3,r3,r1
 2009b60:	20 a2 00 ff 	andi r2,r5,0xff
 2009b64:	34 01 00 80 	mvi r1,128
 2009b68:	44 41 00 19 	be r2,r1,2009bcc <__pack_d+0x214>
 2009b6c:	34 a1 00 7f 	addi r1,r5,127
 2009b70:	f4 a1 10 00 	cmpgu r2,r5,r1
 2009b74:	b8 20 28 00 	mv r5,r1
 2009b78:	b4 44 20 00 	add r4,r2,r4
 2009b7c:	78 01 1f ff 	mvhi r1,0x1fff
 2009b80:	38 21 ff ff 	ori r1,r1,0xffff
 2009b84:	54 81 00 0c 	bgu r4,r1,2009bb4 <__pack_d+0x1fc>
 2009b88:	00 82 00 08 	srui r2,r4,8
 2009b8c:	20 63 07 ff 	andi r3,r3,0x7ff
 2009b90:	78 01 00 0f 	mvhi r1,0xf
 2009b94:	3c 63 00 14 	sli r3,r3,20
 2009b98:	00 a5 00 08 	srui r5,r5,8
 2009b9c:	38 21 ff ff 	ori r1,r1,0xffff
 2009ba0:	3c 84 00 18 	sli r4,r4,24
 2009ba4:	a0 41 10 00 	and r2,r2,r1
 2009ba8:	b8 62 18 00 	or r3,r3,r2
 2009bac:	b8 85 10 00 	or r2,r4,r5
 2009bb0:	e3 ff ff a3 	bi 2009a3c <__pack_d+0x84>
 2009bb4:	3c 81 00 1f 	sli r1,r4,31
 2009bb8:	00 a2 00 01 	srui r2,r5,1
 2009bbc:	00 84 00 01 	srui r4,r4,1
 2009bc0:	b8 22 28 00 	or r5,r1,r2
 2009bc4:	34 63 00 01 	addi r3,r3,1
 2009bc8:	e3 ff ff f0 	bi 2009b88 <__pack_d+0x1d0>
 2009bcc:	20 a1 01 00 	andi r1,r5,0x100
 2009bd0:	44 20 ff eb 	be r1,r0,2009b7c <__pack_d+0x1c4>
 2009bd4:	b4 a2 08 00 	add r1,r5,r2
 2009bd8:	f4 a1 10 00 	cmpgu r2,r5,r1
 2009bdc:	b8 20 28 00 	mv r5,r1
 2009be0:	b4 44 20 00 	add r4,r2,r4
 2009be4:	e3 ff ff e6 	bi 2009b7c <__pack_d+0x1c4>
 2009be8:	20 46 01 00 	andi r6,r2,0x100
 2009bec:	b4 44 20 00 	add r4,r2,r4
 2009bf0:	5c c0 ff c8 	bne r6,r0,2009b10 <__pack_d+0x158>
 2009bf4:	78 01 0f ff 	mvhi r1,0xfff
 2009bf8:	38 21 ff ff 	ori r1,r1,0xffff
 2009bfc:	b8 c0 40 00 	mv r8,r6
 2009c00:	54 61 00 0f 	bgu r3,r1,2009c3c <__pack_d+0x284>
 2009c04:	3c 61 00 18 	sli r1,r3,24
 2009c08:	00 46 00 08 	srui r6,r2,8
 2009c0c:	00 63 00 08 	srui r3,r3,8
 2009c10:	b8 26 30 00 	or r6,r1,r6
 2009c14:	e3 ff ff c9 	bi 2009b38 <__pack_d+0x180>
 2009c18:	3c 82 00 01 	sli r2,r4,1
 2009c1c:	a4 e0 08 00 	not r1,r7
 2009c20:	bc 41 10 00 	sl r2,r2,r1
 2009c24:	80 a7 70 00 	sru r14,r5,r7
 2009c28:	80 87 78 00 	sru r15,r4,r7
 2009c2c:	b8 4e 70 00 	or r14,r2,r14
 2009c30:	e3 ff ff 9e 	bi 2009aa8 <__pack_d+0xf0>
 2009c34:	34 08 00 01 	mvi r8,1
 2009c38:	e3 ff ff bc 	bi 2009b28 <__pack_d+0x170>
 2009c3c:	34 08 00 01 	mvi r8,1
 2009c40:	e3 ff ff f1 	bi 2009c04 <__pack_d+0x24c>

02009c44 <__unpack_d>:
 2009c44:	28 23 00 00 	lw r3,(r1+0)
 2009c48:	b8 40 30 00 	mv r6,r2
 2009c4c:	78 02 00 0f 	mvhi r2,0xf
 2009c50:	00 64 00 1f 	srui r4,r3,31
 2009c54:	00 65 00 14 	srui r5,r3,20
 2009c58:	28 27 00 04 	lw r7,(r1+4)
 2009c5c:	38 42 ff ff 	ori r2,r2,0xffff
 2009c60:	58 c4 00 04 	sw (r6+4),r4
 2009c64:	20 a5 07 ff 	andi r5,r5,0x7ff
 2009c68:	a0 62 10 00 	and r2,r3,r2
 2009c6c:	5c a0 00 1e 	bne r5,r0,2009ce4 <__unpack_d+0xa0>
 2009c70:	b8 47 08 00 	or r1,r2,r7
 2009c74:	44 25 00 15 	be r1,r5,2009cc8 <__unpack_d+0x84>
 2009c78:	3c 44 00 08 	sli r4,r2,8
 2009c7c:	00 e2 00 18 	srui r2,r7,24
 2009c80:	34 05 fc 02 	mvi r5,-1022
 2009c84:	78 03 0f ff 	mvhi r3,0xfff
 2009c88:	34 01 00 03 	mvi r1,3
 2009c8c:	b8 44 20 00 	or r4,r2,r4
 2009c90:	58 c1 00 00 	sw (r6+0),r1
 2009c94:	58 c5 00 08 	sw (r6+8),r5
 2009c98:	38 63 ff ff 	ori r3,r3,0xffff
 2009c9c:	3c e2 00 08 	sli r2,r7,8
 2009ca0:	54 83 00 0e 	bgu r4,r3,2009cd8 <__unpack_d+0x94>
 2009ca4:	b8 60 38 00 	mv r7,r3
 2009ca8:	b4 42 18 00 	add r3,r2,r2
 2009cac:	f4 43 10 00 	cmpgu r2,r2,r3
 2009cb0:	b4 84 08 00 	add r1,r4,r4
 2009cb4:	b4 41 20 00 	add r4,r2,r1
 2009cb8:	34 a5 ff ff 	addi r5,r5,-1
 2009cbc:	b8 60 10 00 	mv r2,r3
 2009cc0:	54 87 00 05 	bgu r4,r7,2009cd4 <__unpack_d+0x90>
 2009cc4:	e3 ff ff f9 	bi 2009ca8 <__unpack_d+0x64>
 2009cc8:	34 01 00 02 	mvi r1,2
 2009ccc:	58 c1 00 00 	sw (r6+0),r1
 2009cd0:	c3 a0 00 00 	ret
 2009cd4:	58 c5 00 08 	sw (r6+8),r5
 2009cd8:	58 c2 00 14 	sw (r6+20),r2
 2009cdc:	58 c4 00 10 	sw (r6+16),r4
 2009ce0:	c3 a0 00 00 	ret
 2009ce4:	34 01 07 ff 	mvi r1,2047
 2009ce8:	44 a1 00 0f 	be r5,r1,2009d24 <__unpack_d+0xe0>
 2009cec:	00 e3 00 18 	srui r3,r7,24
 2009cf0:	3c 42 00 08 	sli r2,r2,8
 2009cf4:	78 01 10 00 	mvhi r1,0x1000
 2009cf8:	b8 62 10 00 	or r2,r3,r2
 2009cfc:	38 21 00 00 	ori r1,r1,0x0
 2009d00:	3c e4 00 08 	sli r4,r7,8
 2009d04:	b8 41 10 00 	or r2,r2,r1
 2009d08:	34 a3 fc 01 	addi r3,r5,-1023
 2009d0c:	34 01 00 03 	mvi r1,3
 2009d10:	58 c4 00 14 	sw (r6+20),r4
 2009d14:	58 c3 00 08 	sw (r6+8),r3
 2009d18:	58 c1 00 00 	sw (r6+0),r1
 2009d1c:	58 c2 00 10 	sw (r6+16),r2
 2009d20:	c3 a0 00 00 	ret
 2009d24:	b8 47 08 00 	or r1,r2,r7
 2009d28:	44 20 00 0a 	be r1,r0,2009d50 <__unpack_d+0x10c>
 2009d2c:	78 01 00 08 	mvhi r1,0x8
 2009d30:	38 21 00 00 	ori r1,r1,0x0
 2009d34:	a0 41 08 00 	and r1,r2,r1
 2009d38:	44 20 00 09 	be r1,r0,2009d5c <__unpack_d+0x118>
 2009d3c:	34 01 00 01 	mvi r1,1
 2009d40:	58 c1 00 00 	sw (r6+0),r1
 2009d44:	58 c7 00 14 	sw (r6+20),r7
 2009d48:	58 c2 00 10 	sw (r6+16),r2
 2009d4c:	c3 a0 00 00 	ret
 2009d50:	34 01 00 04 	mvi r1,4
 2009d54:	58 c1 00 00 	sw (r6+0),r1
 2009d58:	c3 a0 00 00 	ret
 2009d5c:	58 c1 00 00 	sw (r6+0),r1
 2009d60:	e3 ff ff f9 	bi 2009d44 <__unpack_d+0x100>

02009d64 <__fpcmp_parts_d>:
 2009d64:	b8 20 28 00 	mv r5,r1
 2009d68:	28 21 00 00 	lw r1,(r1+0)
 2009d6c:	34 04 00 01 	mvi r4,1
 2009d70:	50 81 00 0d 	bgeu r4,r1,2009da4 <__fpcmp_parts_d+0x40>
 2009d74:	28 43 00 00 	lw r3,(r2+0)
 2009d78:	50 83 00 0b 	bgeu r4,r3,2009da4 <__fpcmp_parts_d+0x40>
 2009d7c:	34 04 00 04 	mvi r4,4
 2009d80:	44 24 00 0b 	be r1,r4,2009dac <__fpcmp_parts_d+0x48>
 2009d84:	44 64 00 10 	be r3,r4,2009dc4 <__fpcmp_parts_d+0x60>
 2009d88:	34 04 00 02 	mvi r4,2
 2009d8c:	44 24 00 0d 	be r1,r4,2009dc0 <__fpcmp_parts_d+0x5c>
 2009d90:	44 64 00 08 	be r3,r4,2009db0 <__fpcmp_parts_d+0x4c>
 2009d94:	28 a3 00 04 	lw r3,(r5+4)
 2009d98:	28 41 00 04 	lw r1,(r2+4)
 2009d9c:	44 61 00 0d 	be r3,r1,2009dd0 <__fpcmp_parts_d+0x6c>
 2009da0:	5c 60 00 06 	bne r3,r0,2009db8 <__fpcmp_parts_d+0x54>
 2009da4:	34 01 00 01 	mvi r1,1
 2009da8:	c3 a0 00 00 	ret
 2009dac:	44 61 00 1d 	be r3,r1,2009e20 <__fpcmp_parts_d+0xbc>
 2009db0:	28 a1 00 04 	lw r1,(r5+4)
 2009db4:	44 20 ff fc 	be r1,r0,2009da4 <__fpcmp_parts_d+0x40>
 2009db8:	34 01 ff ff 	mvi r1,-1
 2009dbc:	c3 a0 00 00 	ret
 2009dc0:	44 61 00 14 	be r3,r1,2009e10 <__fpcmp_parts_d+0xac>
 2009dc4:	28 41 00 04 	lw r1,(r2+4)
 2009dc8:	44 20 ff fc 	be r1,r0,2009db8 <__fpcmp_parts_d+0x54>
 2009dcc:	e3 ff ff f6 	bi 2009da4 <__fpcmp_parts_d+0x40>
 2009dd0:	28 a4 00 08 	lw r4,(r5+8)
 2009dd4:	28 41 00 08 	lw r1,(r2+8)
 2009dd8:	4c 24 00 03 	bge r1,r4,2009de4 <__fpcmp_parts_d+0x80>
 2009ddc:	44 60 ff f2 	be r3,r0,2009da4 <__fpcmp_parts_d+0x40>
 2009de0:	e3 ff ff f6 	bi 2009db8 <__fpcmp_parts_d+0x54>
 2009de4:	4c 81 00 03 	bge r4,r1,2009df0 <__fpcmp_parts_d+0x8c>
 2009de8:	44 60 ff f4 	be r3,r0,2009db8 <__fpcmp_parts_d+0x54>
 2009dec:	e3 ff ff ee 	bi 2009da4 <__fpcmp_parts_d+0x40>
 2009df0:	28 44 00 10 	lw r4,(r2+16)
 2009df4:	28 a6 00 10 	lw r6,(r5+16)
 2009df8:	28 a1 00 14 	lw r1,(r5+20)
 2009dfc:	28 42 00 14 	lw r2,(r2+20)
 2009e00:	54 c4 ff e8 	bgu r6,r4,2009da0 <__fpcmp_parts_d+0x3c>
 2009e04:	44 c4 00 05 	be r6,r4,2009e18 <__fpcmp_parts_d+0xb4>
 2009e08:	54 86 ff f8 	bgu r4,r6,2009de8 <__fpcmp_parts_d+0x84>
 2009e0c:	44 86 00 09 	be r4,r6,2009e30 <__fpcmp_parts_d+0xcc>
 2009e10:	34 01 00 00 	mvi r1,0
 2009e14:	c3 a0 00 00 	ret
 2009e18:	54 22 ff e2 	bgu r1,r2,2009da0 <__fpcmp_parts_d+0x3c>
 2009e1c:	e3 ff ff fb 	bi 2009e08 <__fpcmp_parts_d+0xa4>
 2009e20:	28 42 00 04 	lw r2,(r2+4)
 2009e24:	28 a1 00 04 	lw r1,(r5+4)
 2009e28:	c8 41 08 00 	sub r1,r2,r1
 2009e2c:	c3 a0 00 00 	ret
 2009e30:	54 41 ff ee 	bgu r2,r1,2009de8 <__fpcmp_parts_d+0x84>
 2009e34:	e3 ff ff f7 	bi 2009e10 <__fpcmp_parts_d+0xac>

02009e38 <__udivmodsi4>:
 2009e38:	b8 20 30 00 	mv r6,r1
 2009e3c:	b8 40 20 00 	mv r4,r2
 2009e40:	50 41 00 03 	bgeu r2,r1,2009e4c <__udivmodsi4+0x14>
 2009e44:	34 05 00 01 	mvi r5,1
 2009e48:	4c 40 00 0d 	bge r2,r0,2009e7c <__udivmodsi4+0x44>
 2009e4c:	34 05 00 01 	mvi r5,1
 2009e50:	34 01 00 00 	mvi r1,0
 2009e54:	54 86 00 03 	bgu r4,r6,2009e60 <__udivmodsi4+0x28>
 2009e58:	c8 c4 30 00 	sub r6,r6,r4
 2009e5c:	b8 25 08 00 	or r1,r1,r5
 2009e60:	00 a5 00 01 	srui r5,r5,1
 2009e64:	00 84 00 01 	srui r4,r4,1
 2009e68:	5c a0 ff fb 	bne r5,r0,2009e54 <__udivmodsi4+0x1c>
 2009e6c:	5c 60 00 02 	bne r3,r0,2009e74 <__udivmodsi4+0x3c>
 2009e70:	b8 20 30 00 	mv r6,r1
 2009e74:	b8 c0 08 00 	mv r1,r6
 2009e78:	c3 a0 00 00 	ret
 2009e7c:	b4 84 20 00 	add r4,r4,r4
 2009e80:	b4 a5 28 00 	add r5,r5,r5
 2009e84:	f4 c4 10 00 	cmpgu r2,r6,r4
 2009e88:	7c a1 00 00 	cmpnei r1,r5,0
 2009e8c:	a0 41 10 00 	and r2,r2,r1
 2009e90:	44 40 00 04 	be r2,r0,2009ea0 <__udivmodsi4+0x68>
 2009e94:	4c 80 ff fa 	bge r4,r0,2009e7c <__udivmodsi4+0x44>
 2009e98:	34 01 00 00 	mvi r1,0
 2009e9c:	e3 ff ff ee 	bi 2009e54 <__udivmodsi4+0x1c>
 2009ea0:	5c a2 ff ec 	bne r5,r2,2009e50 <__udivmodsi4+0x18>
 2009ea4:	b8 a0 08 00 	mv r1,r5
 2009ea8:	e3 ff ff f1 	bi 2009e6c <__udivmodsi4+0x34>

02009eac <_close>:
 2009eac:	37 9c ff f4 	addi sp,sp,-12
 2009eb0:	5b 8b 00 08 	sw (sp+8),r11
 2009eb4:	5b 9d 00 04 	sw (sp+4),ra
 2009eb8:	37 82 00 0c 	addi r2,sp,12
 2009ebc:	b8 20 58 00 	mv r11,r1
 2009ec0:	f8 00 00 11 	calli 2009f04 <MicoGetFDEntry>
 2009ec4:	b8 20 18 00 	mv r3,r1
 2009ec8:	34 01 ff ff 	mvi r1,-1
 2009ecc:	5c 60 00 0a 	bne r3,r0,2009ef4 <_close+0x48>
 2009ed0:	2b 84 00 0c 	lw r4,(sp+12)
 2009ed4:	28 81 00 0c 	lw r1,(r4+12)
 2009ed8:	28 22 00 04 	lw r2,(r1+4)
 2009edc:	44 43 00 03 	be r2,r3,2009ee8 <_close+0x3c>
 2009ee0:	b8 80 08 00 	mv r1,r4
 2009ee4:	d8 40 00 00 	call r2
 2009ee8:	b9 60 08 00 	mv r1,r11
 2009eec:	f8 00 00 16 	calli 2009f44 <MicoFreeFDEntry>
 2009ef0:	34 01 00 00 	mvi r1,0
 2009ef4:	2b 9d 00 04 	lw ra,(sp+4)
 2009ef8:	2b 8b 00 08 	lw r11,(sp+8)
 2009efc:	37 9c 00 0c 	addi sp,sp,12
 2009f00:	c3 a0 00 00 	ret

02009f04 <MicoGetFDEntry>:
 2009f04:	b8 20 18 00 	mv r3,r1
 2009f08:	34 01 00 04 	mvi r1,4
 2009f0c:	b8 40 20 00 	mv r4,r2
 2009f10:	54 61 00 0b 	bgu r3,r1,2009f3c <MicoGetFDEntry+0x38>
 2009f14:	3c 61 00 05 	sli r1,r3,5
 2009f18:	78 02 02 00 	mvhi r2,0x200
 2009f1c:	38 42 b3 84 	ori r2,r2,0xb384
 2009f20:	b4 41 08 00 	add r1,r2,r1
 2009f24:	28 23 00 00 	lw r3,(r1+0)
 2009f28:	44 60 00 05 	be r3,r0,2009f3c <MicoGetFDEntry+0x38>
 2009f2c:	34 21 00 04 	addi r1,r1,4
 2009f30:	58 81 00 00 	sw (r4+0),r1
 2009f34:	34 01 00 00 	mvi r1,0
 2009f38:	c3 a0 00 00 	ret
 2009f3c:	34 01 00 02 	mvi r1,2
 2009f40:	c3 a0 00 00 	ret

02009f44 <MicoFreeFDEntry>:
 2009f44:	b8 20 18 00 	mv r3,r1
 2009f48:	34 22 ff ff 	addi r2,r1,-1
 2009f4c:	34 01 00 03 	mvi r1,3
 2009f50:	54 41 00 09 	bgu r2,r1,2009f74 <MicoFreeFDEntry+0x30>
 2009f54:	3c 61 00 05 	sli r1,r3,5
 2009f58:	78 02 02 00 	mvhi r2,0x200
 2009f5c:	38 42 b3 84 	ori r2,r2,0xb384
 2009f60:	b4 41 10 00 	add r2,r2,r1
 2009f64:	28 43 00 00 	lw r3,(r2+0)
 2009f68:	44 60 00 03 	be r3,r0,2009f74 <MicoFreeFDEntry+0x30>
 2009f6c:	34 01 00 00 	mvi r1,0
 2009f70:	58 41 00 00 	sw (r2+0),r1
 2009f74:	c3 a0 00 00 	ret

02009f78 <isatty>:
 2009f78:	37 9c ff f8 	addi sp,sp,-8
 2009f7c:	5b 9d 00 04 	sw (sp+4),ra
 2009f80:	37 82 00 08 	addi r2,sp,8
 2009f84:	fb ff ff e0 	calli 2009f04 <MicoGetFDEntry>
 2009f88:	b8 20 10 00 	mv r2,r1
 2009f8c:	5c 20 00 0a 	bne r1,r0,2009fb4 <isatty+0x3c>
 2009f90:	2b 84 00 08 	lw r4,(sp+8)
 2009f94:	28 81 00 0c 	lw r1,(r4+12)
 2009f98:	28 23 00 24 	lw r3,(r1+36)
 2009f9c:	44 62 00 06 	be r3,r2,2009fb4 <isatty+0x3c>
 2009fa0:	b8 80 08 00 	mv r1,r4
 2009fa4:	d8 60 00 00 	call r3
 2009fa8:	2b 9d 00 04 	lw ra,(sp+4)
 2009fac:	37 9c 00 08 	addi sp,sp,8
 2009fb0:	c3 a0 00 00 	ret
 2009fb4:	34 01 00 00 	mvi r1,0
 2009fb8:	2b 9d 00 04 	lw ra,(sp+4)
 2009fbc:	37 9c 00 08 	addi sp,sp,8
 2009fc0:	c3 a0 00 00 	ret

02009fc4 <_read>:
 2009fc4:	37 9c ff f0 	addi sp,sp,-16
 2009fc8:	5b 8b 00 0c 	sw (sp+12),r11
 2009fcc:	5b 8c 00 08 	sw (sp+8),r12
 2009fd0:	5b 9d 00 04 	sw (sp+4),ra
 2009fd4:	b8 40 60 00 	mv r12,r2
 2009fd8:	37 82 00 10 	addi r2,sp,16
 2009fdc:	b8 60 58 00 	mv r11,r3
 2009fe0:	fb ff ff c9 	calli 2009f04 <MicoGetFDEntry>
 2009fe4:	b8 20 10 00 	mv r2,r1
 2009fe8:	34 01 ff ff 	mvi r1,-1
 2009fec:	5c 40 00 0a 	bne r2,r0,200a014 <_read+0x50>
 2009ff0:	2b 83 00 10 	lw r3,(sp+16)
 2009ff4:	28 61 00 0c 	lw r1,(r3+12)
 2009ff8:	28 24 00 08 	lw r4,(r1+8)
 2009ffc:	b8 80 08 00 	mv r1,r4
 200a000:	44 82 00 05 	be r4,r2,200a014 <_read+0x50>
 200a004:	b8 60 08 00 	mv r1,r3
 200a008:	b9 80 10 00 	mv r2,r12
 200a00c:	b9 60 18 00 	mv r3,r11
 200a010:	d8 80 00 00 	call r4
 200a014:	2b 9d 00 04 	lw ra,(sp+4)
 200a018:	2b 8b 00 0c 	lw r11,(sp+12)
 200a01c:	2b 8c 00 08 	lw r12,(sp+8)
 200a020:	37 9c 00 10 	addi sp,sp,16
 200a024:	c3 a0 00 00 	ret

0200a028 <_lseek>:
 200a028:	37 9c ff f0 	addi sp,sp,-16
 200a02c:	5b 8b 00 0c 	sw (sp+12),r11
 200a030:	5b 8c 00 08 	sw (sp+8),r12
 200a034:	5b 9d 00 04 	sw (sp+4),ra
 200a038:	b8 40 60 00 	mv r12,r2
 200a03c:	34 02 00 02 	mvi r2,2
 200a040:	b8 60 58 00 	mv r11,r3
 200a044:	54 62 00 10 	bgu r3,r2,200a084 <_lseek+0x5c>
 200a048:	37 82 00 10 	addi r2,sp,16
 200a04c:	fb ff ff ae 	calli 2009f04 <MicoGetFDEntry>
 200a050:	b8 20 18 00 	mv r3,r1
 200a054:	5c 20 00 0c 	bne r1,r0,200a084 <_lseek+0x5c>
 200a058:	2b 85 00 10 	lw r5,(sp+16)
 200a05c:	34 02 ff ff 	mvi r2,-1
 200a060:	28 a1 00 0c 	lw r1,(r5+12)
 200a064:	28 24 00 10 	lw r4,(r1+16)
 200a068:	44 83 00 08 	be r4,r3,200a088 <_lseek+0x60>
 200a06c:	b9 80 10 00 	mv r2,r12
 200a070:	b8 a0 08 00 	mv r1,r5
 200a074:	b9 60 18 00 	mv r3,r11
 200a078:	d8 80 00 00 	call r4
 200a07c:	b8 20 10 00 	mv r2,r1
 200a080:	e0 00 00 02 	bi 200a088 <_lseek+0x60>
 200a084:	34 02 ff ff 	mvi r2,-1
 200a088:	b8 40 08 00 	mv r1,r2
 200a08c:	2b 9d 00 04 	lw ra,(sp+4)
 200a090:	2b 8b 00 0c 	lw r11,(sp+12)
 200a094:	2b 8c 00 08 	lw r12,(sp+8)
 200a098:	37 9c 00 10 	addi sp,sp,16
 200a09c:	c3 a0 00 00 	ret

0200a0a0 <_fstat>:
 200a0a0:	37 9c ff f4 	addi sp,sp,-12
 200a0a4:	5b 8b 00 08 	sw (sp+8),r11
 200a0a8:	5b 9d 00 04 	sw (sp+4),ra
 200a0ac:	b8 40 58 00 	mv r11,r2
 200a0b0:	37 82 00 0c 	addi r2,sp,12
 200a0b4:	fb ff ff 94 	calli 2009f04 <MicoGetFDEntry>
 200a0b8:	b8 20 10 00 	mv r2,r1
 200a0bc:	5c 20 00 0c 	bne r1,r0,200a0ec <_fstat+0x4c>
 200a0c0:	2b 84 00 0c 	lw r4,(sp+12)
 200a0c4:	28 81 00 0c 	lw r1,(r4+12)
 200a0c8:	28 23 00 1c 	lw r3,(r1+28)
 200a0cc:	44 62 00 08 	be r3,r2,200a0ec <_fstat+0x4c>
 200a0d0:	b8 80 08 00 	mv r1,r4
 200a0d4:	b9 60 10 00 	mv r2,r11
 200a0d8:	d8 60 00 00 	call r3
 200a0dc:	2b 9d 00 04 	lw ra,(sp+4)
 200a0e0:	2b 8b 00 08 	lw r11,(sp+8)
 200a0e4:	37 9c 00 0c 	addi sp,sp,12
 200a0e8:	c3 a0 00 00 	ret
 200a0ec:	34 01 ff ff 	mvi r1,-1
 200a0f0:	2b 9d 00 04 	lw ra,(sp+4)
 200a0f4:	2b 8b 00 08 	lw r11,(sp+8)
 200a0f8:	37 9c 00 0c 	addi sp,sp,12
 200a0fc:	c3 a0 00 00 	ret

0200a100 <_write>:
 200a100:	37 9c ff f0 	addi sp,sp,-16
 200a104:	5b 8b 00 0c 	sw (sp+12),r11
 200a108:	5b 8c 00 08 	sw (sp+8),r12
 200a10c:	5b 9d 00 04 	sw (sp+4),ra
 200a110:	b8 40 60 00 	mv r12,r2
 200a114:	37 82 00 10 	addi r2,sp,16
 200a118:	b8 60 58 00 	mv r11,r3
 200a11c:	fb ff ff 7a 	calli 2009f04 <MicoGetFDEntry>
 200a120:	b8 20 10 00 	mv r2,r1
 200a124:	34 01 ff ff 	mvi r1,-1
 200a128:	5c 40 00 0a 	bne r2,r0,200a150 <_write+0x50>
 200a12c:	2b 83 00 10 	lw r3,(sp+16)
 200a130:	28 61 00 0c 	lw r1,(r3+12)
 200a134:	28 24 00 0c 	lw r4,(r1+12)
 200a138:	b8 80 08 00 	mv r1,r4
 200a13c:	44 82 00 05 	be r4,r2,200a150 <_write+0x50>
 200a140:	b8 60 08 00 	mv r1,r3
 200a144:	b9 80 10 00 	mv r2,r12
 200a148:	b9 60 18 00 	mv r3,r11
 200a14c:	d8 80 00 00 	call r4
 200a150:	2b 9d 00 04 	lw ra,(sp+4)
 200a154:	2b 8b 00 0c 	lw r11,(sp+12)
 200a158:	2b 8c 00 08 	lw r12,(sp+8)
 200a15c:	37 9c 00 10 	addi sp,sp,16
 200a160:	c3 a0 00 00 	ret

0200a164 <_sbrk>:
 200a164:	78 03 02 00 	mvhi r3,0x200
 200a168:	38 63 b4 28 	ori r3,r3,0xb428
 200a16c:	28 62 00 00 	lw r2,(r3+0)
 200a170:	b8 20 20 00 	mv r4,r1
 200a174:	44 40 00 05 	be r2,r0,200a188 <_sbrk+0x24>
 200a178:	28 61 00 00 	lw r1,(r3+0)
 200a17c:	b4 24 10 00 	add r2,r1,r4
 200a180:	58 62 00 00 	sw (r3+0),r2
 200a184:	c3 a0 00 00 	ret
 200a188:	78 01 02 00 	mvhi r1,0x200
 200a18c:	38 21 b5 c0 	ori r1,r1,0xb5c0
 200a190:	58 61 00 00 	sw (r3+0),r1
 200a194:	28 61 00 00 	lw r1,(r3+0)
 200a198:	b4 24 10 00 	add r2,r1,r4
 200a19c:	58 62 00 00 	sw (r3+0),r2
 200a1a0:	c3 a0 00 00 	ret
